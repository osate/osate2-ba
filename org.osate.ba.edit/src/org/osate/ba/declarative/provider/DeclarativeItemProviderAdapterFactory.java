/**
 * AADL-BA-FrontEnd
 * 
 * Copyright Â© 2011 TELECOM ParisTech and CNRS
 * 
 * TELECOM ParisTech/LTCI
 * 
 * Authors: see AUTHORS
 * 
 * This program is free software: you can redistribute it and/or modify it under
 * the terms of the Eclipse Public License as published by Eclipse, either
 * version 1.0 of the License, or (at your option) any later version. This
 * program is distributed in the hope that it will be useful, but WITHOUT ANY
 * WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE. See the Eclipse Public License for
 * more details. You should have received a copy of the Eclipse Public License
 * along with this program. If not, see
 * http://www.eclipse.org/org/documents/epl-v10.php
 */
package org.osate.ba.declarative.provider;

import java.util.ArrayList;
import java.util.Collection;

import org.eclipse.emf.common.notify.Adapter;
import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.Notifier;

import org.eclipse.emf.edit.provider.ChangeNotifier;
import org.eclipse.emf.edit.provider.ComposeableAdapterFactory;
import org.eclipse.emf.edit.provider.ComposedAdapterFactory;
import org.eclipse.emf.edit.provider.IChangeNotifier;
import org.eclipse.emf.edit.provider.IDisposable;
import org.eclipse.emf.edit.provider.IEditingDomainItemProvider;
import org.eclipse.emf.edit.provider.IItemLabelProvider;
import org.eclipse.emf.edit.provider.IItemPropertySource;
import org.eclipse.emf.edit.provider.INotifyChangedListener;
import org.eclipse.emf.edit.provider.IStructuredItemContentProvider;
import org.eclipse.emf.edit.provider.ITreeItemContentProvider;

import org.osate.ba.declarative.util.DeclarativeAdapterFactory;

/**
 * This is the factory that is used to provide the interfaces needed to support Viewers.
 * The adapters generated by this factory convert EMF adapter notifications into calls to {@link #fireNotifyChanged fireNotifyChanged}.
 * The adapters also support Eclipse property sheets.
 * Note that most of the adapters are shared among multiple instances.
 * <!-- begin-user-doc -->
 * <!-- end-user-doc -->
 * @generated
 */
public class DeclarativeItemProviderAdapterFactory extends DeclarativeAdapterFactory
		implements ComposeableAdapterFactory, IChangeNotifier, IDisposable {
	/**
	 * This keeps track of the root adapter factory that delegates to this adapter factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ComposedAdapterFactory parentAdapterFactory;

	/**
	 * This is used to implement {@link org.eclipse.emf.edit.provider.IChangeNotifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IChangeNotifier changeNotifier = new ChangeNotifier();

	/**
	 * This keeps track of all the supported types checked by {@link #isFactoryForType isFactoryForType}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected Collection<Object> supportedTypes = new ArrayList<Object>();

	/**
	 * This constructs an instance.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public DeclarativeItemProviderAdapterFactory() {
		supportedTypes.add(IEditingDomainItemProvider.class);
		supportedTypes.add(IStructuredItemContentProvider.class);
		supportedTypes.add(ITreeItemContentProvider.class);
		supportedTypes.add(IItemLabelProvider.class);
		supportedTypes.add(IItemPropertySource.class);
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.ArrayableIdentifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ArrayableIdentifierItemProvider arrayableIdentifierItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.ArrayableIdentifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createArrayableIdentifierAdapter() {
		if (arrayableIdentifierItemProvider == null) {
			arrayableIdentifierItemProvider = new ArrayableIdentifierItemProvider(this);
		}

		return arrayableIdentifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.CommAction} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected CommActionItemProvider commActionItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.CommAction}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createCommActionAdapter() {
		if (commActionItemProvider == null) {
			commActionItemProvider = new CommActionItemProvider(this);
		}

		return commActionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.DeclarativeArrayDimension} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarativeArrayDimensionItemProvider declarativeArrayDimensionItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.DeclarativeArrayDimension}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarativeArrayDimensionAdapter() {
		if (declarativeArrayDimensionItemProvider == null) {
			declarativeArrayDimensionItemProvider = new DeclarativeArrayDimensionItemProvider(this);
		}

		return declarativeArrayDimensionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.DeclarativeBehaviorTransition} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarativeBehaviorTransitionItemProvider declarativeBehaviorTransitionItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.DeclarativeBehaviorTransition}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarativeBehaviorTransitionAdapter() {
		if (declarativeBehaviorTransitionItemProvider == null) {
			declarativeBehaviorTransitionItemProvider = new DeclarativeBehaviorTransitionItemProvider(this);
		}

		return declarativeBehaviorTransitionItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.DeclarativePropertyName} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarativePropertyNameItemProvider declarativePropertyNameItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.DeclarativePropertyName}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarativePropertyNameAdapter() {
		if (declarativePropertyNameItemProvider == null) {
			declarativePropertyNameItemProvider = new DeclarativePropertyNameItemProvider(this);
		}

		return declarativePropertyNameItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.DeclarativePropertyReference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarativePropertyReferenceItemProvider declarativePropertyReferenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.DeclarativePropertyReference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarativePropertyReferenceAdapter() {
		if (declarativePropertyReferenceItemProvider == null) {
			declarativePropertyReferenceItemProvider = new DeclarativePropertyReferenceItemProvider(this);
		}

		return declarativePropertyReferenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.DeclarativeTime} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarativeTimeItemProvider declarativeTimeItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.DeclarativeTime}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarativeTimeAdapter() {
		if (declarativeTimeItemProvider == null) {
			declarativeTimeItemProvider = new DeclarativeTimeItemProvider(this);
		}

		return declarativeTimeItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.Identifier} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected IdentifierItemProvider identifierItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.Identifier}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createIdentifierAdapter() {
		if (identifierItemProvider == null) {
			identifierItemProvider = new IdentifierItemProvider(this);
		}

		return identifierItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.NamedValue} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected NamedValueItemProvider namedValueItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.NamedValue}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createNamedValueAdapter() {
		if (namedValueItemProvider == null) {
			namedValueItemProvider = new NamedValueItemProvider(this);
		}

		return namedValueItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.QualifiedNamedElement} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected QualifiedNamedElementItemProvider qualifiedNamedElementItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.QualifiedNamedElement}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createQualifiedNamedElementAdapter() {
		if (qualifiedNamedElementItemProvider == null) {
			qualifiedNamedElementItemProvider = new QualifiedNamedElementItemProvider(this);
		}

		return qualifiedNamedElementItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.Reference} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected ReferenceItemProvider referenceItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.Reference}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createReferenceAdapter() {
		if (referenceItemProvider == null) {
			referenceItemProvider = new ReferenceItemProvider(this);
		}

		return referenceItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.DeclarativeBehaviorStateSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarativeBehaviorStateSetItemProvider declarativeBehaviorStateSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.DeclarativeBehaviorStateSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarativeBehaviorStateSetAdapter() {
		if (declarativeBehaviorStateSetItemProvider == null) {
			declarativeBehaviorStateSetItemProvider = new DeclarativeBehaviorStateSetItemProvider(this);
		}

		return declarativeBehaviorStateSetItemProvider;
	}

	/**
	 * This keeps track of the one adapter used for all {@link org.osate.ba.declarative.DeclarativeBehaviorVariableSet} instances.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	protected DeclarativeBehaviorVariableSetItemProvider declarativeBehaviorVariableSetItemProvider;

	/**
	 * This creates an adapter for a {@link org.osate.ba.declarative.DeclarativeBehaviorVariableSet}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter createDeclarativeBehaviorVariableSetAdapter() {
		if (declarativeBehaviorVariableSetItemProvider == null) {
			declarativeBehaviorVariableSetItemProvider = new DeclarativeBehaviorVariableSetItemProvider(this);
		}

		return declarativeBehaviorVariableSetItemProvider;
	}

	/**
	 * This returns the root adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public ComposeableAdapterFactory getRootAdapterFactory() {
		return parentAdapterFactory == null ? this : parentAdapterFactory.getRootAdapterFactory();
	}

	/**
	 * This sets the composed adapter factory that contains this factory.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void setParentAdapterFactory(ComposedAdapterFactory parentAdapterFactory) {
		this.parentAdapterFactory = parentAdapterFactory;
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public boolean isFactoryForType(Object type) {
		return supportedTypes.contains(type) || super.isFactoryForType(type);
	}

	/**
	 * This implementation substitutes the factory itself as the key for the adapter.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Adapter adapt(Notifier notifier, Object type) {
		return super.adapt(notifier, this);
	}

	/**
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	@Override
	public Object adapt(Object object, Object type) {
		if (isFactoryForType(type)) {
			Object adapter = super.adapt(object, type);
			if (!(type instanceof Class<?>) || (((Class<?>) type).isInstance(adapter))) {
				return adapter;
			}
		}

		return null;
	}

	/**
	 * This adds a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void addListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.addListener(notifyChangedListener);
	}

	/**
	 * This removes a listener.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void removeListener(INotifyChangedListener notifyChangedListener) {
		changeNotifier.removeListener(notifyChangedListener);
	}

	/**
	 * This delegates to {@link #changeNotifier} and to {@link #parentAdapterFactory}.
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void fireNotifyChanged(Notification notification) {
		changeNotifier.fireNotifyChanged(notification);

		if (parentAdapterFactory != null) {
			parentAdapterFactory.fireNotifyChanged(notification);
		}
	}

	/**
	 * This disposes all of the item providers created by this factory. 
	 * <!-- begin-user-doc -->
	 * <!-- end-user-doc -->
	 * @generated
	 */
	public void dispose() {
		if (arrayableIdentifierItemProvider != null)
			arrayableIdentifierItemProvider.dispose();
		if (commActionItemProvider != null)
			commActionItemProvider.dispose();
		if (declarativeArrayDimensionItemProvider != null)
			declarativeArrayDimensionItemProvider.dispose();
		if (declarativeBehaviorTransitionItemProvider != null)
			declarativeBehaviorTransitionItemProvider.dispose();
		if (declarativePropertyNameItemProvider != null)
			declarativePropertyNameItemProvider.dispose();
		if (declarativePropertyReferenceItemProvider != null)
			declarativePropertyReferenceItemProvider.dispose();
		if (declarativeTimeItemProvider != null)
			declarativeTimeItemProvider.dispose();
		if (identifierItemProvider != null)
			identifierItemProvider.dispose();
		if (namedValueItemProvider != null)
			namedValueItemProvider.dispose();
		if (qualifiedNamedElementItemProvider != null)
			qualifiedNamedElementItemProvider.dispose();
		if (referenceItemProvider != null)
			referenceItemProvider.dispose();
		if (declarativeBehaviorStateSetItemProvider != null)
			declarativeBehaviorStateSetItemProvider.dispose();
		if (declarativeBehaviorVariableSetItemProvider != null)
			declarativeBehaviorVariableSetItemProvider.dispose();
	}

}
