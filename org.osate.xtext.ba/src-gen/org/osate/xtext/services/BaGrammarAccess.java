/*
 * generated by Xtext
 */
package org.osate.xtext.services;

import com.google.inject.Singleton;
import com.google.inject.Inject;

import java.util.List;

import org.eclipse.xtext.*;
import org.eclipse.xtext.service.GrammarProvider;
import org.eclipse.xtext.service.AbstractElementFinder.*;

import org.osate.xtext.aadl2.properties.services.PropertiesGrammarAccess;

@Singleton
public class BaGrammarAccess extends AbstractGrammarElementFinder {
	
	
	public class AnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AnnexSubclause");
		private final RuleCall cBehaviorAnnexSubclauseParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		////import "http://www.eclipse.org/emf/2002/Ecore" as ecore
		//AnnexSubclause returns ba::BehaviorAnnex:
		//	BehaviorAnnexSubclause;
		@Override public ParserRule getRule() { return rule; }

		//BehaviorAnnexSubclause
		public RuleCall getBehaviorAnnexSubclauseParserRuleCall() { return cBehaviorAnnexSubclauseParserRuleCall; }
	}

	public class BehaviorAnnexSubclauseElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorAnnexSubclause");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBehaviorAnnexAction_0 = (Action)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cVariablesKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Group cGroup_1_1 = (Group)cGroup_1.eContents().get(1);
		private final Assignment cVariablesAssignment_1_1_0 = (Assignment)cGroup_1_1.eContents().get(0);
		private final RuleCall cVariablesBehaviorVariableSetParserRuleCall_1_1_0_0 = (RuleCall)cVariablesAssignment_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_1 = (Group)cGroup_1_1.eContents().get(1);
		private final Keyword cCommaKeyword_1_1_1_0 = (Keyword)cGroup_1_1_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1_1_1 = (Assignment)cGroup_1_1_1.eContents().get(1);
		private final RuleCall cVariablesBehaviorVariableSetParserRuleCall_1_1_1_1_0 = (RuleCall)cVariablesAssignment_1_1_1_1.eContents().get(0);
		private final Keyword cStatesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Assignment cStatesAssignment_3_0 = (Assignment)cGroup_3.eContents().get(0);
		private final RuleCall cStatesBehaviorStateSetParserRuleCall_3_0_0 = (RuleCall)cStatesAssignment_3_0.eContents().get(0);
		private final Group cGroup_3_1 = (Group)cGroup_3.eContents().get(1);
		private final Keyword cCommaKeyword_3_1_0 = (Keyword)cGroup_3_1.eContents().get(0);
		private final Assignment cStatesAssignment_3_1_1 = (Assignment)cGroup_3_1.eContents().get(1);
		private final RuleCall cStatesBehaviorStateSetParserRuleCall_3_1_1_0 = (RuleCall)cStatesAssignment_3_1_1.eContents().get(0);
		private final Keyword cTransitionsKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Assignment cTransitionsAssignment_5_0 = (Assignment)cGroup_5.eContents().get(0);
		private final RuleCall cTransitionsBehaviorTransitionParserRuleCall_5_0_0 = (RuleCall)cTransitionsAssignment_5_0.eContents().get(0);
		private final Group cGroup_5_1 = (Group)cGroup_5.eContents().get(1);
		private final Keyword cCommaKeyword_5_1_0 = (Keyword)cGroup_5_1.eContents().get(0);
		private final Assignment cTransitionsAssignment_5_1_1 = (Assignment)cGroup_5_1.eContents().get(1);
		private final RuleCall cTransitionsBehaviorTransitionParserRuleCall_5_1_1_0 = (RuleCall)cTransitionsAssignment_5_1_1.eContents().get(0);
		
		//// behavior_annex ::=
		////   [ variables { behavior_variable }+ ]
		////   [ states { behavior_state }+ ]
		////   [ transitions { behavior_transition }+ ]
		//BehaviorAnnexSubclause returns ba::BehaviorAnnex: //'{**'
		//	{ba::BehaviorAnnex} ("variables" (variables+=BehaviorVariableSet ("," variables+=BehaviorVariableSet)*)+)? "states"
		//	(states+=BehaviorStateSet ("," states+=BehaviorStateSet)*)+ "transitions" (transitions+=BehaviorTransition (","
		//	transitions+=BehaviorTransition)*)+;
		@Override public ParserRule getRule() { return rule; }

		////'{**'
		//{ba::BehaviorAnnex} ("variables" (variables+=BehaviorVariableSet ("," variables+=BehaviorVariableSet)*)+)? "states"
		//(states+=BehaviorStateSet ("," states+=BehaviorStateSet)*)+ "transitions" (transitions+=BehaviorTransition (","
		//transitions+=BehaviorTransition)*)+
		public Group getGroup() { return cGroup; }

		////'{**'
		//{ba::BehaviorAnnex}
		public Action getBehaviorAnnexAction_0() { return cBehaviorAnnexAction_0; }

		//("variables" (variables+=BehaviorVariableSet ("," variables+=BehaviorVariableSet)*)+)?
		public Group getGroup_1() { return cGroup_1; }

		//"variables"
		public Keyword getVariablesKeyword_1_0() { return cVariablesKeyword_1_0; }

		//(variables+=BehaviorVariableSet ("," variables+=BehaviorVariableSet)*)+
		public Group getGroup_1_1() { return cGroup_1_1; }

		//variables+=BehaviorVariableSet
		public Assignment getVariablesAssignment_1_1_0() { return cVariablesAssignment_1_1_0; }

		//BehaviorVariableSet
		public RuleCall getVariablesBehaviorVariableSetParserRuleCall_1_1_0_0() { return cVariablesBehaviorVariableSetParserRuleCall_1_1_0_0; }

		//("," variables+=BehaviorVariableSet)*
		public Group getGroup_1_1_1() { return cGroup_1_1_1; }

		//","
		public Keyword getCommaKeyword_1_1_1_0() { return cCommaKeyword_1_1_1_0; }

		//variables+=BehaviorVariableSet
		public Assignment getVariablesAssignment_1_1_1_1() { return cVariablesAssignment_1_1_1_1; }

		//BehaviorVariableSet
		public RuleCall getVariablesBehaviorVariableSetParserRuleCall_1_1_1_1_0() { return cVariablesBehaviorVariableSetParserRuleCall_1_1_1_1_0; }

		//"states"
		public Keyword getStatesKeyword_2() { return cStatesKeyword_2; }

		//(states+=BehaviorStateSet ("," states+=BehaviorStateSet)*)+
		public Group getGroup_3() { return cGroup_3; }

		//states+=BehaviorStateSet
		public Assignment getStatesAssignment_3_0() { return cStatesAssignment_3_0; }

		//BehaviorStateSet
		public RuleCall getStatesBehaviorStateSetParserRuleCall_3_0_0() { return cStatesBehaviorStateSetParserRuleCall_3_0_0; }

		//("," states+=BehaviorStateSet)*
		public Group getGroup_3_1() { return cGroup_3_1; }

		//","
		public Keyword getCommaKeyword_3_1_0() { return cCommaKeyword_3_1_0; }

		//states+=BehaviorStateSet
		public Assignment getStatesAssignment_3_1_1() { return cStatesAssignment_3_1_1; }

		//BehaviorStateSet
		public RuleCall getStatesBehaviorStateSetParserRuleCall_3_1_1_0() { return cStatesBehaviorStateSetParserRuleCall_3_1_1_0; }

		//"transitions"
		public Keyword getTransitionsKeyword_4() { return cTransitionsKeyword_4; }

		//(transitions+=BehaviorTransition ("," transitions+=BehaviorTransition)*)+
		public Group getGroup_5() { return cGroup_5; }

		//transitions+=BehaviorTransition
		public Assignment getTransitionsAssignment_5_0() { return cTransitionsAssignment_5_0; }

		//BehaviorTransition
		public RuleCall getTransitionsBehaviorTransitionParserRuleCall_5_0_0() { return cTransitionsBehaviorTransitionParserRuleCall_5_0_0; }

		//("," transitions+=BehaviorTransition)*
		public Group getGroup_5_1() { return cGroup_5_1; }

		//","
		public Keyword getCommaKeyword_5_1_0() { return cCommaKeyword_5_1_0; }

		//transitions+=BehaviorTransition
		public Assignment getTransitionsAssignment_5_1_1() { return cTransitionsAssignment_5_1_1; }

		//BehaviorTransition
		public RuleCall getTransitionsBehaviorTransitionParserRuleCall_5_1_1_0() { return cTransitionsBehaviorTransitionParserRuleCall_5_1_1_0; }
	}

	public class BehaviorVariableSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorVariableSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cVariablesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cVariablesBehaviorVariableParserRuleCall_0_0 = (RuleCall)cVariablesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cVariablesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cVariablesBehaviorVariableParserRuleCall_1_1_0 = (RuleCall)cVariablesAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cDataClassifierAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cDataClassifierDataClassifierCrossReference_3_0 = (CrossReference)cDataClassifierAssignment_3.eContents().get(0);
		private final RuleCall cDataClassifierDataClassifierIDTerminalRuleCall_3_0_1 = (RuleCall)cDataClassifierDataClassifierCrossReference_3_0.eContents().get(1);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cLeftCurlyBracketKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Keyword cSemicolonKeyword_5 = (Keyword)cGroup.eContents().get(5);
		
		//// behavior_variable ::= 
		////   local_variable_declarator { , local_variable_declarator }* 
		////   : data_unique_component_classifier_reference;
		//BehaviorVariableSet returns declarative::DeclarativeBehaviorVariableSet:
		//	variables+=BehaviorVariable ("," variables+=BehaviorVariable)* ":" dataClassifier=[aadl2::DataClassifier] ("{" // TODO: property association reference does not work
		//	//			  (ownedPropertyAssociation+=PropertyAssociation)+
		//	"}")? ";";
		@Override public ParserRule getRule() { return rule; }

		//variables+=BehaviorVariable ("," variables+=BehaviorVariable)* ":" dataClassifier=[aadl2::DataClassifier] ("{" // TODO: property association reference does not work
		////			  (ownedPropertyAssociation+=PropertyAssociation)+
		//"}")? ";"
		public Group getGroup() { return cGroup; }

		//variables+=BehaviorVariable
		public Assignment getVariablesAssignment_0() { return cVariablesAssignment_0; }

		//BehaviorVariable
		public RuleCall getVariablesBehaviorVariableParserRuleCall_0_0() { return cVariablesBehaviorVariableParserRuleCall_0_0; }

		//("," variables+=BehaviorVariable)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//variables+=BehaviorVariable
		public Assignment getVariablesAssignment_1_1() { return cVariablesAssignment_1_1; }

		//BehaviorVariable
		public RuleCall getVariablesBehaviorVariableParserRuleCall_1_1_0() { return cVariablesBehaviorVariableParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//dataClassifier=[aadl2::DataClassifier]
		public Assignment getDataClassifierAssignment_3() { return cDataClassifierAssignment_3; }

		//[aadl2::DataClassifier]
		public CrossReference getDataClassifierDataClassifierCrossReference_3_0() { return cDataClassifierDataClassifierCrossReference_3_0; }

		//ID
		public RuleCall getDataClassifierDataClassifierIDTerminalRuleCall_3_0_1() { return cDataClassifierDataClassifierIDTerminalRuleCall_3_0_1; }

		//("{" // TODO: property association reference does not work
		////			  (ownedPropertyAssociation+=PropertyAssociation)+
		//"}")?
		public Group getGroup_4() { return cGroup_4; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_4_0() { return cLeftCurlyBracketKeyword_4_0; }

		//// TODO: property association reference does not work
		////			  (ownedPropertyAssociation+=PropertyAssociation)+
		//"}"
		public Keyword getRightCurlyBracketKeyword_4_1() { return cRightCurlyBracketKeyword_4_1; }

		//";"
		public Keyword getSemicolonKeyword_5() { return cSemicolonKeyword_5; }
	}

	public class BehaviorVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorVariable");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//BehaviorVariable returns ba::BehaviorVariable:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class BehaviorStateSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorStateSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cStatesAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cStatesBehaviorStateParserRuleCall_0_0 = (RuleCall)cStatesAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cCommaKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cStatesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cStatesBehaviorStateParserRuleCall_1_1_0 = (RuleCall)cStatesAssignment_1_1.eContents().get(0);
		private final Keyword cColonKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cInitialAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Keyword cInitialInitialKeyword_3_0 = (Keyword)cInitialAssignment_3.eContents().get(0);
		private final Assignment cCompleteAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Keyword cCompleteCompleteKeyword_4_0 = (Keyword)cCompleteAssignment_4.eContents().get(0);
		private final Assignment cFinalAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final Keyword cFinalFinalKeyword_5_0 = (Keyword)cFinalAssignment_5.eContents().get(0);
		private final Keyword cStateKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cSemicolonKeyword_7 = (Keyword)cGroup.eContents().get(7);
		
		//BehaviorStateSet returns declarative::DeclarativeBehaviorStateSet:
		//	states+=BehaviorState ("," states+=BehaviorState)* ":" initial?="initial"? complete?="complete"? final?="final"?
		//	"state" ";";
		@Override public ParserRule getRule() { return rule; }

		//states+=BehaviorState ("," states+=BehaviorState)* ":" initial?="initial"? complete?="complete"? final?="final"? "state"
		//";"
		public Group getGroup() { return cGroup; }

		//states+=BehaviorState
		public Assignment getStatesAssignment_0() { return cStatesAssignment_0; }

		//BehaviorState
		public RuleCall getStatesBehaviorStateParserRuleCall_0_0() { return cStatesBehaviorStateParserRuleCall_0_0; }

		//("," states+=BehaviorState)*
		public Group getGroup_1() { return cGroup_1; }

		//","
		public Keyword getCommaKeyword_1_0() { return cCommaKeyword_1_0; }

		//states+=BehaviorState
		public Assignment getStatesAssignment_1_1() { return cStatesAssignment_1_1; }

		//BehaviorState
		public RuleCall getStatesBehaviorStateParserRuleCall_1_1_0() { return cStatesBehaviorStateParserRuleCall_1_1_0; }

		//":"
		public Keyword getColonKeyword_2() { return cColonKeyword_2; }

		//initial?="initial"?
		public Assignment getInitialAssignment_3() { return cInitialAssignment_3; }

		//"initial"
		public Keyword getInitialInitialKeyword_3_0() { return cInitialInitialKeyword_3_0; }

		//complete?="complete"?
		public Assignment getCompleteAssignment_4() { return cCompleteAssignment_4; }

		//"complete"
		public Keyword getCompleteCompleteKeyword_4_0() { return cCompleteCompleteKeyword_4_0; }

		//final?="final"?
		public Assignment getFinalAssignment_5() { return cFinalAssignment_5; }

		//"final"
		public Keyword getFinalFinalKeyword_5_0() { return cFinalFinalKeyword_5_0; }

		//"state"
		public Keyword getStateKeyword_6() { return cStateKeyword_6; }

		//";"
		public Keyword getSemicolonKeyword_7() { return cSemicolonKeyword_7; }
	}

	public class BehaviorStateElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorState");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//BehaviorState returns ba::BehaviorState:
		//	name=ID;
		@Override public ParserRule getRule() { return rule; }

		//name=ID
		public Assignment getNameAssignment() { return cNameAssignment; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}

	public class BehaviorTransitionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorTransition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0_0 = (RuleCall)cNameAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_0_1_0 = (Keyword)cGroup_0_1.eContents().get(0);
		private final Assignment cPriorityAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cPriorityINTVALUEParserRuleCall_0_1_1_0 = (RuleCall)cPriorityAssignment_0_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_0_1_2 = (Keyword)cGroup_0_1.eContents().get(2);
		private final Keyword cColonKeyword_0_2 = (Keyword)cGroup_0.eContents().get(2);
		private final Assignment cSrcStatesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cSrcStatesBehaviorStateCrossReference_1_0 = (CrossReference)cSrcStatesAssignment_1.eContents().get(0);
		private final RuleCall cSrcStatesBehaviorStateIDTerminalRuleCall_1_0_1 = (RuleCall)cSrcStatesBehaviorStateCrossReference_1_0.eContents().get(1);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cCommaKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cSrcStatesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final CrossReference cSrcStatesBehaviorStateCrossReference_2_1_0 = (CrossReference)cSrcStatesAssignment_2_1.eContents().get(0);
		private final RuleCall cSrcStatesBehaviorStateIDTerminalRuleCall_2_1_0_1 = (RuleCall)cSrcStatesBehaviorStateCrossReference_2_1_0.eContents().get(1);
		private final Keyword cHyphenMinusLeftSquareBracketKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cConditionAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cConditionBehaviorConditionParserRuleCall_4_0 = (RuleCall)cConditionAssignment_4.eContents().get(0);
		private final Keyword cRightSquareBracketHyphenMinusGreaterThanSignKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cDestinationStateAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cDestinationStateBehaviorStateCrossReference_6_0 = (CrossReference)cDestinationStateAssignment_6.eContents().get(0);
		private final RuleCall cDestinationStateBehaviorStateIDTerminalRuleCall_6_0_1 = (RuleCall)cDestinationStateBehaviorStateCrossReference_6_0.eContents().get(1);
		private final Assignment cActionBlockAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cActionBlockBehaviorActionBlockParserRuleCall_7_0 = (RuleCall)cActionBlockAssignment_7.eContents().get(0);
		private final Keyword cSemicolonKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//// behavior_transition ::=
		////   [ transition_identifier [ [ behavior_transition_priority ] ] : ]
		////   source_state_identifier { , source_state_identifier }*
		////    -[ behavior_condition ]->
		////   destination_state_identifier [ behavior_action_block ] ;
		//BehaviorTransition returns declarative::DeclarativeBehaviorTransition:
		//	(name=ID ("[" priority=INTVALUE "]")? ":")? srcStates+=[ba::BehaviorState] ("," srcStates+=[ba::BehaviorState])* "-["
		//	condition=BehaviorCondition "]->" destinationState=[ba::BehaviorState] actionBlock=BehaviorActionBlock? ";";
		@Override public ParserRule getRule() { return rule; }

		//(name=ID ("[" priority=INTVALUE "]")? ":")? srcStates+=[ba::BehaviorState] ("," srcStates+=[ba::BehaviorState])* "-["
		//condition=BehaviorCondition "]->" destinationState=[ba::BehaviorState] actionBlock=BehaviorActionBlock? ";"
		public Group getGroup() { return cGroup; }

		//(name=ID ("[" priority=INTVALUE "]")? ":")?
		public Group getGroup_0() { return cGroup_0; }

		//name=ID
		public Assignment getNameAssignment_0_0() { return cNameAssignment_0_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0_0() { return cNameIDTerminalRuleCall_0_0_0; }

		//("[" priority=INTVALUE "]")?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_0_1_0() { return cLeftSquareBracketKeyword_0_1_0; }

		//priority=INTVALUE
		public Assignment getPriorityAssignment_0_1_1() { return cPriorityAssignment_0_1_1; }

		//INTVALUE
		public RuleCall getPriorityINTVALUEParserRuleCall_0_1_1_0() { return cPriorityINTVALUEParserRuleCall_0_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_0_1_2() { return cRightSquareBracketKeyword_0_1_2; }

		//":"
		public Keyword getColonKeyword_0_2() { return cColonKeyword_0_2; }

		//srcStates+=[ba::BehaviorState]
		public Assignment getSrcStatesAssignment_1() { return cSrcStatesAssignment_1; }

		//[ba::BehaviorState]
		public CrossReference getSrcStatesBehaviorStateCrossReference_1_0() { return cSrcStatesBehaviorStateCrossReference_1_0; }

		//ID
		public RuleCall getSrcStatesBehaviorStateIDTerminalRuleCall_1_0_1() { return cSrcStatesBehaviorStateIDTerminalRuleCall_1_0_1; }

		//("," srcStates+=[ba::BehaviorState])*
		public Group getGroup_2() { return cGroup_2; }

		//","
		public Keyword getCommaKeyword_2_0() { return cCommaKeyword_2_0; }

		//srcStates+=[ba::BehaviorState]
		public Assignment getSrcStatesAssignment_2_1() { return cSrcStatesAssignment_2_1; }

		//[ba::BehaviorState]
		public CrossReference getSrcStatesBehaviorStateCrossReference_2_1_0() { return cSrcStatesBehaviorStateCrossReference_2_1_0; }

		//ID
		public RuleCall getSrcStatesBehaviorStateIDTerminalRuleCall_2_1_0_1() { return cSrcStatesBehaviorStateIDTerminalRuleCall_2_1_0_1; }

		//"-["
		public Keyword getHyphenMinusLeftSquareBracketKeyword_3() { return cHyphenMinusLeftSquareBracketKeyword_3; }

		//condition=BehaviorCondition
		public Assignment getConditionAssignment_4() { return cConditionAssignment_4; }

		//BehaviorCondition
		public RuleCall getConditionBehaviorConditionParserRuleCall_4_0() { return cConditionBehaviorConditionParserRuleCall_4_0; }

		//"]->"
		public Keyword getRightSquareBracketHyphenMinusGreaterThanSignKeyword_5() { return cRightSquareBracketHyphenMinusGreaterThanSignKeyword_5; }

		//destinationState=[ba::BehaviorState]
		public Assignment getDestinationStateAssignment_6() { return cDestinationStateAssignment_6; }

		//[ba::BehaviorState]
		public CrossReference getDestinationStateBehaviorStateCrossReference_6_0() { return cDestinationStateBehaviorStateCrossReference_6_0; }

		//ID
		public RuleCall getDestinationStateBehaviorStateIDTerminalRuleCall_6_0_1() { return cDestinationStateBehaviorStateIDTerminalRuleCall_6_0_1; }

		//actionBlock=BehaviorActionBlock?
		public Assignment getActionBlockAssignment_7() { return cActionBlockAssignment_7; }

		//BehaviorActionBlock
		public RuleCall getActionBlockBehaviorActionBlockParserRuleCall_7_0() { return cActionBlockBehaviorActionBlockParserRuleCall_7_0; }

		//";"
		public Keyword getSemicolonKeyword_8() { return cSemicolonKeyword_8; }
	}

	public class BehaviorActionBlockElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorActionBlock");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cLeftCurlyBracketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cContentAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cContentBehaviorActionsParserRuleCall_1_0 = (RuleCall)cContentAssignment_1.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cTimeoutKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cTimeoutAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cTimeoutBehaviorTimeParserRuleCall_3_1_0 = (RuleCall)cTimeoutAssignment_3_1.eContents().get(0);
		
		//BehaviorActionBlock returns ba::BehaviorActionBlock:
		//	"{" content=BehaviorActions "}" ("timeout" timeout=BehaviorTime)?;
		@Override public ParserRule getRule() { return rule; }

		//"{" content=BehaviorActions "}" ("timeout" timeout=BehaviorTime)?
		public Group getGroup() { return cGroup; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0() { return cLeftCurlyBracketKeyword_0; }

		//content=BehaviorActions
		public Assignment getContentAssignment_1() { return cContentAssignment_1; }

		//BehaviorActions
		public RuleCall getContentBehaviorActionsParserRuleCall_1_0() { return cContentBehaviorActionsParserRuleCall_1_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_2() { return cRightCurlyBracketKeyword_2; }

		//("timeout" timeout=BehaviorTime)?
		public Group getGroup_3() { return cGroup_3; }

		//"timeout"
		public Keyword getTimeoutKeyword_3_0() { return cTimeoutKeyword_3_0; }

		//timeout=BehaviorTime
		public Assignment getTimeoutAssignment_3_1() { return cTimeoutAssignment_3_1; }

		//BehaviorTime
		public RuleCall getTimeoutBehaviorTimeParserRuleCall_3_1_0() { return cTimeoutBehaviorTimeParserRuleCall_3_1_0; }
	}

	public class BehaviorActionsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorActions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBehaviorActionSequenceParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cBehaviorActionSetParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBehaviorActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//BehaviorActions returns ba::BehaviorActions:
		//	BehaviorActionSequence | => BehaviorActionSet | => BehaviorAction;
		@Override public ParserRule getRule() { return rule; }

		//BehaviorActionSequence | => BehaviorActionSet | => BehaviorAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//BehaviorActionSequence
		public RuleCall getBehaviorActionSequenceParserRuleCall_0() { return cBehaviorActionSequenceParserRuleCall_0; }

		//=> BehaviorActionSet
		public RuleCall getBehaviorActionSetParserRuleCall_1() { return cBehaviorActionSetParserRuleCall_1; }

		//=> BehaviorAction
		public RuleCall getBehaviorActionParserRuleCall_2() { return cBehaviorActionParserRuleCall_2; }
	}

	public class BehaviorActionSequenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorActionSequence");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cActionsBehaviorActionParserRuleCall_0_0_0 = (RuleCall)cActionsAssignment_0_0.eContents().get(0);
		private final Keyword cSemicolonKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsBehaviorActionParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		
		//BehaviorActionSequence returns ba::BehaviorActionSequence:
		//	(actions+=BehaviorAction ";")+ actions+=BehaviorAction;
		@Override public ParserRule getRule() { return rule; }

		//(actions+=BehaviorAction ";")+ actions+=BehaviorAction
		public Group getGroup() { return cGroup; }

		//(actions+=BehaviorAction ";")+
		public Group getGroup_0() { return cGroup_0; }

		//actions+=BehaviorAction
		public Assignment getActionsAssignment_0_0() { return cActionsAssignment_0_0; }

		//BehaviorAction
		public RuleCall getActionsBehaviorActionParserRuleCall_0_0_0() { return cActionsBehaviorActionParserRuleCall_0_0_0; }

		//";"
		public Keyword getSemicolonKeyword_0_1() { return cSemicolonKeyword_0_1; }

		//actions+=BehaviorAction
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }

		//BehaviorAction
		public RuleCall getActionsBehaviorActionParserRuleCall_1_0() { return cActionsBehaviorActionParserRuleCall_1_0; }
	}

	public class BehaviorActionSetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorActionSet");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cGroup.eContents().get(0);
		private final Assignment cActionsAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cActionsBehaviorActionParserRuleCall_0_0_0 = (RuleCall)cActionsAssignment_0_0.eContents().get(0);
		private final Keyword cCommaKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cActionsBehaviorActionParserRuleCall_1_0 = (RuleCall)cActionsAssignment_1.eContents().get(0);
		
		//BehaviorActionSet returns ba::BehaviorActionSet:
		//	(actions+=BehaviorAction ",")+ actions+=BehaviorAction;
		@Override public ParserRule getRule() { return rule; }

		//(actions+=BehaviorAction ",")+ actions+=BehaviorAction
		public Group getGroup() { return cGroup; }

		//(actions+=BehaviorAction ",")+
		public Group getGroup_0() { return cGroup_0; }

		//actions+=BehaviorAction
		public Assignment getActionsAssignment_0_0() { return cActionsAssignment_0_0; }

		//BehaviorAction
		public RuleCall getActionsBehaviorActionParserRuleCall_0_0_0() { return cActionsBehaviorActionParserRuleCall_0_0_0; }

		//","
		public Keyword getCommaKeyword_0_1() { return cCommaKeyword_0_1; }

		//actions+=BehaviorAction
		public Assignment getActionsAssignment_1() { return cActionsAssignment_1; }

		//BehaviorAction
		public RuleCall getActionsBehaviorActionParserRuleCall_1_0() { return cActionsBehaviorActionParserRuleCall_1_0; }
	}

	public class BehaviorActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBasicActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIfStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cForOrForAllStatementParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cWhileOrDoUntilStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BehaviorAction returns ba::BehaviorAction:
		//	BasicAction | IfStatement | ForOrForAllStatement | WhileOrDoUntilStatement;
		@Override public ParserRule getRule() { return rule; }

		//BasicAction | IfStatement | ForOrForAllStatement | WhileOrDoUntilStatement
		public Alternatives getAlternatives() { return cAlternatives; }

		//BasicAction
		public RuleCall getBasicActionParserRuleCall_0() { return cBasicActionParserRuleCall_0; }

		//IfStatement
		public RuleCall getIfStatementParserRuleCall_1() { return cIfStatementParserRuleCall_1; }

		//ForOrForAllStatement
		public RuleCall getForOrForAllStatementParserRuleCall_2() { return cForOrForAllStatementParserRuleCall_2; }

		//WhileOrDoUntilStatement
		public RuleCall getWhileOrDoUntilStatementParserRuleCall_3() { return cWhileOrDoUntilStatementParserRuleCall_3; }
	}

	public class BasicActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BasicAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cAssignmentActionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cCommunicationActionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cTimedActionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//// basic_action ::=
		////   assignment_action
		//// | communication_action
		//// | timed_action
		//BasicAction returns ba::BasicAction:
		//	AssignmentAction | CommunicationAction | TimedAction;
		@Override public ParserRule getRule() { return rule; }

		//AssignmentAction | CommunicationAction | TimedAction
		public Alternatives getAlternatives() { return cAlternatives; }

		//AssignmentAction
		public RuleCall getAssignmentActionParserRuleCall_0() { return cAssignmentActionParserRuleCall_0; }

		//CommunicationAction
		public RuleCall getCommunicationActionParserRuleCall_1() { return cCommunicationActionParserRuleCall_1; }

		//TimedAction
		public RuleCall getTimedActionParserRuleCall_2() { return cTimedActionParserRuleCall_2; }
	}

	public class AssignmentActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "AssignmentAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetTargetParserRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Keyword cColonEqualsSignKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Alternatives cAlternatives_2 = (Alternatives)cGroup.eContents().get(2);
		private final Assignment cValueExpressionAssignment_2_0 = (Assignment)cAlternatives_2.eContents().get(0);
		private final RuleCall cValueExpressionValueExpressionParserRuleCall_2_0_0 = (RuleCall)cValueExpressionAssignment_2_0.eContents().get(0);
		private final Assignment cValueExpressionAssignment_2_1 = (Assignment)cAlternatives_2.eContents().get(1);
		private final RuleCall cValueExpressionAnyParserRuleCall_2_1_0 = (RuleCall)cValueExpressionAssignment_2_1.eContents().get(0);
		
		//// assignment_action ::=
		////   target := ( value_expression | any )
		//AssignmentAction returns ba::AssignmentAction:
		//	target=Target ":=" (valueExpression=ValueExpression | valueExpression=Any);
		@Override public ParserRule getRule() { return rule; }

		//target=Target ":=" (valueExpression=ValueExpression | valueExpression=Any)
		public Group getGroup() { return cGroup; }

		//target=Target
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }

		//Target
		public RuleCall getTargetTargetParserRuleCall_0_0() { return cTargetTargetParserRuleCall_0_0; }

		//":="
		public Keyword getColonEqualsSignKeyword_1() { return cColonEqualsSignKeyword_1; }

		//valueExpression=ValueExpression | valueExpression=Any
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//valueExpression=ValueExpression
		public Assignment getValueExpressionAssignment_2_0() { return cValueExpressionAssignment_2_0; }

		//ValueExpression
		public RuleCall getValueExpressionValueExpressionParserRuleCall_2_0_0() { return cValueExpressionValueExpressionParserRuleCall_2_0_0; }

		//valueExpression=Any
		public Assignment getValueExpressionAssignment_2_1() { return cValueExpressionAssignment_2_1; }

		//Any
		public RuleCall getValueExpressionAnyParserRuleCall_2_1_0() { return cValueExpressionAnyParserRuleCall_2_1_0; }
	}

	public class AnyElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Any");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cAnyAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cAnyKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//Any returns ba::Any:
		//	{ba::Any} "any";
		@Override public ParserRule getRule() { return rule; }

		//{ba::Any} "any"
		public Group getGroup() { return cGroup; }

		//{ba::Any}
		public Action getAnyAction_0() { return cAnyAction_0; }

		//"any"
		public Keyword getAnyKeyword_1() { return cAnyKeyword_1; }
	}

	public class TargetElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Target");
		private final RuleCall cReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//// target ::=
		//// | outgoing_port_name
		//// | outgoing_subprogram_parameter
		//// | data_component_reference
		//// | outgoing_port_prototype_name
		//Target returns ba::Target:
		//	Reference;
		@Override public ParserRule getRule() { return rule; }

		//Reference
		public RuleCall getReferenceParserRuleCall() { return cReferenceParserRuleCall; }
	}

	public class CommunicationActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CommunicationAction");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cQualifiedNameAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cQualifiedNameQualifiedNamedElementParserRuleCall_0_0_0 = (RuleCall)cQualifiedNameAssignment_0_0.eContents().get(0);
		private final Keyword cExclamationMarkKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Group cGroup_0_2 = (Group)cGroup_0.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_0_2_0 = (Keyword)cGroup_0_2.eContents().get(0);
		private final Assignment cParametersAssignment_0_2_1 = (Assignment)cGroup_0_2.eContents().get(1);
		private final RuleCall cParametersParameterLabelParserRuleCall_0_2_1_0 = (RuleCall)cParametersAssignment_0_2_1.eContents().get(0);
		private final Group cGroup_0_2_2 = (Group)cGroup_0_2.eContents().get(2);
		private final Keyword cCommaKeyword_0_2_2_0 = (Keyword)cGroup_0_2_2.eContents().get(0);
		private final Assignment cParametersAssignment_0_2_2_1 = (Assignment)cGroup_0_2_2.eContents().get(1);
		private final RuleCall cParametersParameterLabelParserRuleCall_0_2_2_1_0 = (RuleCall)cParametersAssignment_0_2_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_2_3 = (Keyword)cGroup_0_2.eContents().get(3);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cReferenceAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cReferenceReferenceParserRuleCall_1_0_0 = (RuleCall)cReferenceAssignment_1_0.eContents().get(0);
		private final Alternatives cAlternatives_1_1 = (Alternatives)cGroup_1.eContents().get(1);
		private final Group cGroup_1_1_0 = (Group)cAlternatives_1_1.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1_1_0_0 = (Keyword)cGroup_1_1_0.eContents().get(0);
		private final Group cGroup_1_1_0_1 = (Group)cGroup_1_1_0.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_0_1_0 = (Keyword)cGroup_1_1_0_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1_0_1_1 = (Assignment)cGroup_1_1_0_1.eContents().get(1);
		private final RuleCall cTargetTargetParserRuleCall_1_1_0_1_1_0 = (RuleCall)cTargetAssignment_1_1_0_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_0_1_2 = (Keyword)cGroup_1_1_0_1.eContents().get(2);
		private final Keyword cGreaterThanSignGreaterThanSignKeyword_1_1_1 = (Keyword)cAlternatives_1_1.eContents().get(1);
		private final Keyword cExclamationMarkLessThanSignKeyword_1_1_2 = (Keyword)cAlternatives_1_1.eContents().get(2);
		private final Keyword cExclamationMarkGreaterThanSignKeyword_1_1_3 = (Keyword)cAlternatives_1_1.eContents().get(3);
		private final Group cGroup_1_1_4 = (Group)cAlternatives_1_1.eContents().get(4);
		private final Keyword cExclamationMarkKeyword_1_1_4_0 = (Keyword)cGroup_1_1_4.eContents().get(0);
		private final Group cGroup_1_1_4_1 = (Group)cGroup_1_1_4.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_4_1_0 = (Keyword)cGroup_1_1_4_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_4_1_1 = (Assignment)cGroup_1_1_4_1.eContents().get(1);
		private final RuleCall cParametersParameterLabelParserRuleCall_1_1_4_1_1_0 = (RuleCall)cParametersAssignment_1_1_4_1_1.eContents().get(0);
		private final Group cGroup_1_1_4_1_2 = (Group)cGroup_1_1_4_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_4_1_2_0 = (Keyword)cGroup_1_1_4_1_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_4_1_2_1 = (Assignment)cGroup_1_1_4_1_2.eContents().get(1);
		private final RuleCall cParametersParameterLabelParserRuleCall_1_1_4_1_2_1_0 = (RuleCall)cParametersAssignment_1_1_4_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_4_1_3 = (Keyword)cGroup_1_1_4_1.eContents().get(3);
		private final Group cGroup_1_1_5 = (Group)cAlternatives_1_1.eContents().get(5);
		private final Keyword cQuestionMarkKeyword_1_1_5_0 = (Keyword)cGroup_1_1_5.eContents().get(0);
		private final Group cGroup_1_1_5_1 = (Group)cGroup_1_1_5.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_5_1_0 = (Keyword)cGroup_1_1_5_1.eContents().get(0);
		private final Assignment cTargetAssignment_1_1_5_1_1 = (Assignment)cGroup_1_1_5_1.eContents().get(1);
		private final RuleCall cTargetTargetParserRuleCall_1_1_5_1_1_0 = (RuleCall)cTargetAssignment_1_1_5_1_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_5_1_2 = (Keyword)cGroup_1_1_5_1.eContents().get(2);
		private final Group cGroup_1_1_6 = (Group)cAlternatives_1_1.eContents().get(6);
		private final Keyword cExclamationMarkKeyword_1_1_6_0 = (Keyword)cGroup_1_1_6.eContents().get(0);
		private final Group cGroup_1_1_6_1 = (Group)cGroup_1_1_6.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_1_1_6_1_0 = (Keyword)cGroup_1_1_6_1.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_6_1_1 = (Assignment)cGroup_1_1_6_1.eContents().get(1);
		private final RuleCall cParametersParameterLabelParserRuleCall_1_1_6_1_1_0 = (RuleCall)cParametersAssignment_1_1_6_1_1.eContents().get(0);
		private final Group cGroup_1_1_6_1_2 = (Group)cGroup_1_1_6_1.eContents().get(2);
		private final Keyword cCommaKeyword_1_1_6_1_2_0 = (Keyword)cGroup_1_1_6_1_2.eContents().get(0);
		private final Assignment cParametersAssignment_1_1_6_1_2_1 = (Assignment)cGroup_1_1_6_1_2.eContents().get(1);
		private final RuleCall cParametersParameterLabelParserRuleCall_1_1_6_1_2_1_0 = (RuleCall)cParametersAssignment_1_1_6_1_2_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_1_6_1_3 = (Keyword)cGroup_1_1_6_1.eContents().get(3);
		private final Alternatives cAlternatives_2 = (Alternatives)cAlternatives.eContents().get(2);
		private final Keyword cAsteriskExclamationMarkLessThanSignKeyword_2_0 = (Keyword)cAlternatives_2.eContents().get(0);
		private final Keyword cAsteriskExclamationMarkGreaterThanSignKeyword_2_1 = (Keyword)cAlternatives_2.eContents().get(1);
		
		//// communication_action ::=
		////   subprogram_prototype_name ! [ ( subprogram_parameter_list ) ]
		//// | required_subprogram_access_name ! [ ( subprogram_parameter_list ) ]
		//// | subprogram_classifier_name ! [ ( subprogram_parameter_list ) ]
		//// | output_port_name ! [ ( value_expression ) ]
		//// | input_port_name >>
		//// | input_port_name ? [ ( target ) ]
		//// | required_data_access_name !<
		//// | required_data_access_name !>
		//// | *!<
		//// | *!>
		//// | required_data_access_name . provided_subprogram_access_name ! [ ( subprogram_parameter_list ) ]
		//// | data_subcomponent_name . provided_subprogram_access_name ! [ ( subprogram_parameter_list ) ]
		//// | local_variable_name . provided_subprogram_access_name ! [ ( subprogram_parameter_list ) ]
		////    |
		////      qualifiedName=QualifiedNamedElement '!' ('(' parameters+=ParameterLabel (',' parameters+=ParameterLabel)* ')')?
		//CommunicationAction returns declarative::CommAction:
		//	qualifiedName=QualifiedNamedElement "!" ("(" parameters+=ParameterLabel ("," parameters+=ParameterLabel)* ")")? |
		//	reference=Reference ("?" ("(" target=Target ")")? | ">>" | "!<" | "!>" | "!" ("(" parameters+=ParameterLabel (","
		//	parameters+=ParameterLabel)* ")")? | "?" ("(" target=Target ")")? | "!" ("(" parameters+=ParameterLabel (","
		//	parameters+=ParameterLabel)* ")")?) | ("*!<" | "*!>");
		@Override public ParserRule getRule() { return rule; }

		//qualifiedName=QualifiedNamedElement "!" ("(" parameters+=ParameterLabel ("," parameters+=ParameterLabel)* ")")? |
		//reference=Reference ("?" ("(" target=Target ")")? | ">>" | "!<" | "!>" | "!" ("(" parameters+=ParameterLabel (","
		//parameters+=ParameterLabel)* ")")? | "?" ("(" target=Target ")")? | "!" ("(" parameters+=ParameterLabel (","
		//parameters+=ParameterLabel)* ")")?) | ("*!<" | "*!>")
		public Alternatives getAlternatives() { return cAlternatives; }

		//qualifiedName=QualifiedNamedElement "!" ("(" parameters+=ParameterLabel ("," parameters+=ParameterLabel)* ")")?
		public Group getGroup_0() { return cGroup_0; }

		//qualifiedName=QualifiedNamedElement
		public Assignment getQualifiedNameAssignment_0_0() { return cQualifiedNameAssignment_0_0; }

		//QualifiedNamedElement
		public RuleCall getQualifiedNameQualifiedNamedElementParserRuleCall_0_0_0() { return cQualifiedNameQualifiedNamedElementParserRuleCall_0_0_0; }

		//"!"
		public Keyword getExclamationMarkKeyword_0_1() { return cExclamationMarkKeyword_0_1; }

		//("(" parameters+=ParameterLabel ("," parameters+=ParameterLabel)* ")")?
		public Group getGroup_0_2() { return cGroup_0_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_2_0() { return cLeftParenthesisKeyword_0_2_0; }

		//parameters+=ParameterLabel
		public Assignment getParametersAssignment_0_2_1() { return cParametersAssignment_0_2_1; }

		//ParameterLabel
		public RuleCall getParametersParameterLabelParserRuleCall_0_2_1_0() { return cParametersParameterLabelParserRuleCall_0_2_1_0; }

		//("," parameters+=ParameterLabel)*
		public Group getGroup_0_2_2() { return cGroup_0_2_2; }

		//","
		public Keyword getCommaKeyword_0_2_2_0() { return cCommaKeyword_0_2_2_0; }

		//parameters+=ParameterLabel
		public Assignment getParametersAssignment_0_2_2_1() { return cParametersAssignment_0_2_2_1; }

		//ParameterLabel
		public RuleCall getParametersParameterLabelParserRuleCall_0_2_2_1_0() { return cParametersParameterLabelParserRuleCall_0_2_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_2_3() { return cRightParenthesisKeyword_0_2_3; }

		//reference=Reference ("?" ("(" target=Target ")")? | ">>" | "!<" | "!>" | "!" ("(" parameters+=ParameterLabel (","
		//parameters+=ParameterLabel)* ")")? | "?" ("(" target=Target ")")? | "!" ("(" parameters+=ParameterLabel (","
		//parameters+=ParameterLabel)* ")")?)
		public Group getGroup_1() { return cGroup_1; }

		//reference=Reference
		public Assignment getReferenceAssignment_1_0() { return cReferenceAssignment_1_0; }

		//Reference
		public RuleCall getReferenceReferenceParserRuleCall_1_0_0() { return cReferenceReferenceParserRuleCall_1_0_0; }

		//"?" ("(" target=Target ")")? | ">>" | "!<" | "!>" | "!" ("(" parameters+=ParameterLabel (","
		//parameters+=ParameterLabel)* ")")? | "?" ("(" target=Target ")")? | "!" ("(" parameters+=ParameterLabel (","
		//parameters+=ParameterLabel)* ")")?
		public Alternatives getAlternatives_1_1() { return cAlternatives_1_1; }

		//"?" ("(" target=Target ")")?
		public Group getGroup_1_1_0() { return cGroup_1_1_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1_0_0() { return cQuestionMarkKeyword_1_1_0_0; }

		//("(" target=Target ")")?
		public Group getGroup_1_1_0_1() { return cGroup_1_1_0_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_0_1_0() { return cLeftParenthesisKeyword_1_1_0_1_0; }

		//target=Target
		public Assignment getTargetAssignment_1_1_0_1_1() { return cTargetAssignment_1_1_0_1_1; }

		//Target
		public RuleCall getTargetTargetParserRuleCall_1_1_0_1_1_0() { return cTargetTargetParserRuleCall_1_1_0_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_0_1_2() { return cRightParenthesisKeyword_1_1_0_1_2; }

		//">>"
		public Keyword getGreaterThanSignGreaterThanSignKeyword_1_1_1() { return cGreaterThanSignGreaterThanSignKeyword_1_1_1; }

		//"!<"
		public Keyword getExclamationMarkLessThanSignKeyword_1_1_2() { return cExclamationMarkLessThanSignKeyword_1_1_2; }

		//"!>"
		public Keyword getExclamationMarkGreaterThanSignKeyword_1_1_3() { return cExclamationMarkGreaterThanSignKeyword_1_1_3; }

		//"!" ("(" parameters+=ParameterLabel ("," parameters+=ParameterLabel)* ")")?
		public Group getGroup_1_1_4() { return cGroup_1_1_4; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_4_0() { return cExclamationMarkKeyword_1_1_4_0; }

		//("(" parameters+=ParameterLabel ("," parameters+=ParameterLabel)* ")")?
		public Group getGroup_1_1_4_1() { return cGroup_1_1_4_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_4_1_0() { return cLeftParenthesisKeyword_1_1_4_1_0; }

		//parameters+=ParameterLabel
		public Assignment getParametersAssignment_1_1_4_1_1() { return cParametersAssignment_1_1_4_1_1; }

		//ParameterLabel
		public RuleCall getParametersParameterLabelParserRuleCall_1_1_4_1_1_0() { return cParametersParameterLabelParserRuleCall_1_1_4_1_1_0; }

		//("," parameters+=ParameterLabel)*
		public Group getGroup_1_1_4_1_2() { return cGroup_1_1_4_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_4_1_2_0() { return cCommaKeyword_1_1_4_1_2_0; }

		//parameters+=ParameterLabel
		public Assignment getParametersAssignment_1_1_4_1_2_1() { return cParametersAssignment_1_1_4_1_2_1; }

		//ParameterLabel
		public RuleCall getParametersParameterLabelParserRuleCall_1_1_4_1_2_1_0() { return cParametersParameterLabelParserRuleCall_1_1_4_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_4_1_3() { return cRightParenthesisKeyword_1_1_4_1_3; }

		//"?" ("(" target=Target ")")?
		public Group getGroup_1_1_5() { return cGroup_1_1_5; }

		//"?"
		public Keyword getQuestionMarkKeyword_1_1_5_0() { return cQuestionMarkKeyword_1_1_5_0; }

		//("(" target=Target ")")?
		public Group getGroup_1_1_5_1() { return cGroup_1_1_5_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_5_1_0() { return cLeftParenthesisKeyword_1_1_5_1_0; }

		//target=Target
		public Assignment getTargetAssignment_1_1_5_1_1() { return cTargetAssignment_1_1_5_1_1; }

		//Target
		public RuleCall getTargetTargetParserRuleCall_1_1_5_1_1_0() { return cTargetTargetParserRuleCall_1_1_5_1_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_5_1_2() { return cRightParenthesisKeyword_1_1_5_1_2; }

		//"!" ("(" parameters+=ParameterLabel ("," parameters+=ParameterLabel)* ")")?
		public Group getGroup_1_1_6() { return cGroup_1_1_6; }

		//"!"
		public Keyword getExclamationMarkKeyword_1_1_6_0() { return cExclamationMarkKeyword_1_1_6_0; }

		//("(" parameters+=ParameterLabel ("," parameters+=ParameterLabel)* ")")?
		public Group getGroup_1_1_6_1() { return cGroup_1_1_6_1; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_1_6_1_0() { return cLeftParenthesisKeyword_1_1_6_1_0; }

		//parameters+=ParameterLabel
		public Assignment getParametersAssignment_1_1_6_1_1() { return cParametersAssignment_1_1_6_1_1; }

		//ParameterLabel
		public RuleCall getParametersParameterLabelParserRuleCall_1_1_6_1_1_0() { return cParametersParameterLabelParserRuleCall_1_1_6_1_1_0; }

		//("," parameters+=ParameterLabel)*
		public Group getGroup_1_1_6_1_2() { return cGroup_1_1_6_1_2; }

		//","
		public Keyword getCommaKeyword_1_1_6_1_2_0() { return cCommaKeyword_1_1_6_1_2_0; }

		//parameters+=ParameterLabel
		public Assignment getParametersAssignment_1_1_6_1_2_1() { return cParametersAssignment_1_1_6_1_2_1; }

		//ParameterLabel
		public RuleCall getParametersParameterLabelParserRuleCall_1_1_6_1_2_1_0() { return cParametersParameterLabelParserRuleCall_1_1_6_1_2_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_1_6_1_3() { return cRightParenthesisKeyword_1_1_6_1_3; }

		//"*!<" | "*!>"
		public Alternatives getAlternatives_2() { return cAlternatives_2; }

		//"*!<"
		public Keyword getAsteriskExclamationMarkLessThanSignKeyword_2_0() { return cAsteriskExclamationMarkLessThanSignKeyword_2_0; }

		//"*!>"
		public Keyword getAsteriskExclamationMarkGreaterThanSignKeyword_2_1() { return cAsteriskExclamationMarkGreaterThanSignKeyword_2_1; }
	}

	public class QualifiedNamedElementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedNamedElement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cBaNamespaceAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cBaNamespaceQualifiedIndentifierParserRuleCall_0_0 = (RuleCall)cBaNamespaceAssignment_0.eContents().get(0);
		private final Assignment cBaNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBaNameIdentifierParserRuleCall_1_0 = (RuleCall)cBaNameAssignment_1.eContents().get(0);
		
		//QualifiedNamedElement returns declarative::QualifiedNamedElement:
		//	baNamespace=QualifiedIndentifier baName=Identifier;
		@Override public ParserRule getRule() { return rule; }

		//baNamespace=QualifiedIndentifier baName=Identifier
		public Group getGroup() { return cGroup; }

		//baNamespace=QualifiedIndentifier
		public Assignment getBaNamespaceAssignment_0() { return cBaNamespaceAssignment_0; }

		//QualifiedIndentifier
		public RuleCall getBaNamespaceQualifiedIndentifierParserRuleCall_0_0() { return cBaNamespaceQualifiedIndentifierParserRuleCall_0_0; }

		//baName=Identifier
		public Assignment getBaNameAssignment_1() { return cBaNameAssignment_1; }

		//Identifier
		public RuleCall getBaNameIdentifierParserRuleCall_1_0() { return cBaNameIdentifierParserRuleCall_1_0; }
	}

	public class QualifiedIndentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedIndentifier");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdNameSpaceParserRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//QualifiedIndentifier returns declarative::Identifier:
		//	id=NameSpace;
		@Override public ParserRule getRule() { return rule; }

		//id=NameSpace
		public Assignment getIdAssignment() { return cIdAssignment; }

		//NameSpace
		public RuleCall getIdNameSpaceParserRuleCall_0() { return cIdNameSpaceParserRuleCall_0; }
	}

	public class IdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Identifier");
		private final Assignment cIdAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cIdQualifiedNameParserRuleCall_0 = (RuleCall)cIdAssignment.eContents().get(0);
		
		//Identifier returns declarative::Identifier:
		//	id=QualifiedName;
		@Override public ParserRule getRule() { return rule; }

		//id=QualifiedName
		public Assignment getIdAssignment() { return cIdAssignment; }

		//QualifiedName
		public RuleCall getIdQualifiedNameParserRuleCall_0() { return cIdQualifiedNameParserRuleCall_0; }
	}

	public class NameSpaceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "NameSpace");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cColonColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//NameSpace:
		//	(ID "::")+;
		@Override public ParserRule getRule() { return rule; }

		//(ID "::")+
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//"::"
		public Keyword getColonColonKeyword_1() { return cColonColonKeyword_1; }
	}

	public class QualifiedNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "QualifiedName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cIDTerminalRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_1_1 = (RuleCall)cGroup_1.eContents().get(1);
		
		//QualifiedName:
		//	ID ("." ID)*;
		@Override public ParserRule getRule() { return rule; }

		//ID ("." ID)*
		public Group getGroup() { return cGroup; }

		//ID
		public RuleCall getIDTerminalRuleCall_0() { return cIDTerminalRuleCall_0; }

		//("." ID)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ID
		public RuleCall getIDTerminalRuleCall_1_1() { return cIDTerminalRuleCall_1_1; }
	}

	public class ReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Reference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdsArrayIdentifierParserRuleCall_0_0 = (RuleCall)cIdsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cFullStopKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cIdsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cIdsArrayIdentifierParserRuleCall_1_1_0 = (RuleCall)cIdsAssignment_1_1.eContents().get(0);
		
		//Reference returns declarative::Reference:
		//	ids+=ArrayIdentifier ("." ids+=ArrayIdentifier)*;
		@Override public ParserRule getRule() { return rule; }

		//ids+=ArrayIdentifier ("." ids+=ArrayIdentifier)*
		public Group getGroup() { return cGroup; }

		//ids+=ArrayIdentifier
		public Assignment getIdsAssignment_0() { return cIdsAssignment_0; }

		//ArrayIdentifier
		public RuleCall getIdsArrayIdentifierParserRuleCall_0_0() { return cIdsArrayIdentifierParserRuleCall_0_0; }

		//("." ids+=ArrayIdentifier)*
		public Group getGroup_1() { return cGroup_1; }

		//"."
		public Keyword getFullStopKeyword_1_0() { return cFullStopKeyword_1_0; }

		//ids+=ArrayIdentifier
		public Assignment getIdsAssignment_1_1() { return cIdsAssignment_1_1; }

		//ArrayIdentifier
		public RuleCall getIdsArrayIdentifierParserRuleCall_1_1_0() { return cIdsArrayIdentifierParserRuleCall_1_1_0; }
	}

	public class ArrayIdentifierElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ArrayIdentifier");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIdAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIdIDTerminalRuleCall_0_0 = (RuleCall)cIdAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cLeftSquareBracketKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cArrayIndexesAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cArrayIndexesIntegerValueParserRuleCall_1_1_0 = (RuleCall)cArrayIndexesAssignment_1_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		
		//// array_identifier ::=
		////   identifier { integer_value }*
		//ArrayIdentifier returns declarative::ArrayableIdentifier:
		//	id=ID ("[" arrayIndexes+=IntegerValue "]")*;
		@Override public ParserRule getRule() { return rule; }

		//id=ID ("[" arrayIndexes+=IntegerValue "]")*
		public Group getGroup() { return cGroup; }

		//id=ID
		public Assignment getIdAssignment_0() { return cIdAssignment_0; }

		//ID
		public RuleCall getIdIDTerminalRuleCall_0_0() { return cIdIDTerminalRuleCall_0_0; }

		//("[" arrayIndexes+=IntegerValue "]")*
		public Group getGroup_1() { return cGroup_1; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0() { return cLeftSquareBracketKeyword_1_0; }

		//arrayIndexes+=IntegerValue
		public Assignment getArrayIndexesAssignment_1_1() { return cArrayIndexesAssignment_1_1; }

		//IntegerValue
		public RuleCall getArrayIndexesIntegerValueParserRuleCall_1_1_0() { return cArrayIndexesIntegerValueParserRuleCall_1_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_2() { return cRightSquareBracketKeyword_1_2; }
	}

	public class ParameterLabelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ParameterLabel");
		private final RuleCall cValueExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ParameterLabel returns ba::ParameterLabel:
		//	ValueExpression;
		@Override public ParserRule getRule() { return rule; }

		//ValueExpression
		public RuleCall getValueExpressionParserRuleCall() { return cValueExpressionParserRuleCall; }
	}

	public class TimedActionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimedAction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cComputationKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLowerTimeAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLowerTimeBehaviorTimeParserRuleCall_2_0 = (RuleCall)cLowerTimeAssignment_2.eContents().get(0);
		private final Group cGroup_3 = (Group)cGroup.eContents().get(3);
		private final Keyword cFullStopFullStopKeyword_3_0 = (Keyword)cGroup_3.eContents().get(0);
		private final Assignment cUpperTimeAssignment_3_1 = (Assignment)cGroup_3.eContents().get(1);
		private final RuleCall cUpperTimeBehaviorTimeParserRuleCall_3_1_0 = (RuleCall)cUpperTimeAssignment_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Group cGroup_5 = (Group)cGroup.eContents().get(5);
		private final Keyword cInKeyword_5_0 = (Keyword)cGroup_5.eContents().get(0);
		private final Keyword cBindingKeyword_5_1 = (Keyword)cGroup_5.eContents().get(1);
		private final Assignment cProcessorClassifierAssignment_5_2 = (Assignment)cGroup_5.eContents().get(2);
		private final CrossReference cProcessorClassifierProcessorClassifierCrossReference_5_2_0 = (CrossReference)cProcessorClassifierAssignment_5_2.eContents().get(0);
		private final RuleCall cProcessorClassifierProcessorClassifierIDTerminalRuleCall_5_2_0_1 = (RuleCall)cProcessorClassifierProcessorClassifierCrossReference_5_2_0.eContents().get(1);
		private final Group cGroup_5_3 = (Group)cGroup_5.eContents().get(3);
		private final Keyword cCommaKeyword_5_3_0 = (Keyword)cGroup_5_3.eContents().get(0);
		private final Assignment cProcessorClassifierAssignment_5_3_1 = (Assignment)cGroup_5_3.eContents().get(1);
		private final CrossReference cProcessorClassifierProcessorClassifierCrossReference_5_3_1_0 = (CrossReference)cProcessorClassifierAssignment_5_3_1.eContents().get(0);
		private final RuleCall cProcessorClassifierProcessorClassifierIDTerminalRuleCall_5_3_1_0_1 = (RuleCall)cProcessorClassifierProcessorClassifierCrossReference_5_3_1_0.eContents().get(1);
		
		//// timed_action ::= 
		////   computation ( behavior_time [ .. behavior_time ] ) [ in_binding ]
		//TimedAction returns ba::TimedAction:
		//	"computation" "(" lowerTime=BehaviorTime (".." upperTime=BehaviorTime)? ")" ("in" "binding"
		//	processorClassifier+=[aadl2::ProcessorClassifier] ("," processorClassifier+=[aadl2::ProcessorClassifier])*)?;
		@Override public ParserRule getRule() { return rule; }

		//"computation" "(" lowerTime=BehaviorTime (".." upperTime=BehaviorTime)? ")" ("in" "binding"
		//processorClassifier+=[aadl2::ProcessorClassifier] ("," processorClassifier+=[aadl2::ProcessorClassifier])*)?
		public Group getGroup() { return cGroup; }

		//"computation"
		public Keyword getComputationKeyword_0() { return cComputationKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//lowerTime=BehaviorTime
		public Assignment getLowerTimeAssignment_2() { return cLowerTimeAssignment_2; }

		//BehaviorTime
		public RuleCall getLowerTimeBehaviorTimeParserRuleCall_2_0() { return cLowerTimeBehaviorTimeParserRuleCall_2_0; }

		//(".." upperTime=BehaviorTime)?
		public Group getGroup_3() { return cGroup_3; }

		//".."
		public Keyword getFullStopFullStopKeyword_3_0() { return cFullStopFullStopKeyword_3_0; }

		//upperTime=BehaviorTime
		public Assignment getUpperTimeAssignment_3_1() { return cUpperTimeAssignment_3_1; }

		//BehaviorTime
		public RuleCall getUpperTimeBehaviorTimeParserRuleCall_3_1_0() { return cUpperTimeBehaviorTimeParserRuleCall_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }

		//("in" "binding" processorClassifier+=[aadl2::ProcessorClassifier] (","
		//processorClassifier+=[aadl2::ProcessorClassifier])*)?
		public Group getGroup_5() { return cGroup_5; }

		//"in"
		public Keyword getInKeyword_5_0() { return cInKeyword_5_0; }

		//"binding"
		public Keyword getBindingKeyword_5_1() { return cBindingKeyword_5_1; }

		//processorClassifier+=[aadl2::ProcessorClassifier]
		public Assignment getProcessorClassifierAssignment_5_2() { return cProcessorClassifierAssignment_5_2; }

		//[aadl2::ProcessorClassifier]
		public CrossReference getProcessorClassifierProcessorClassifierCrossReference_5_2_0() { return cProcessorClassifierProcessorClassifierCrossReference_5_2_0; }

		//ID
		public RuleCall getProcessorClassifierProcessorClassifierIDTerminalRuleCall_5_2_0_1() { return cProcessorClassifierProcessorClassifierIDTerminalRuleCall_5_2_0_1; }

		//("," processorClassifier+=[aadl2::ProcessorClassifier])*
		public Group getGroup_5_3() { return cGroup_5_3; }

		//","
		public Keyword getCommaKeyword_5_3_0() { return cCommaKeyword_5_3_0; }

		//processorClassifier+=[aadl2::ProcessorClassifier]
		public Assignment getProcessorClassifierAssignment_5_3_1() { return cProcessorClassifierAssignment_5_3_1; }

		//[aadl2::ProcessorClassifier]
		public CrossReference getProcessorClassifierProcessorClassifierCrossReference_5_3_1_0() { return cProcessorClassifierProcessorClassifierCrossReference_5_3_1_0; }

		//ID
		public RuleCall getProcessorClassifierProcessorClassifierIDTerminalRuleCall_5_3_1_0_1() { return cProcessorClassifierProcessorClassifierIDTerminalRuleCall_5_3_1_0_1; }
	}

	public class IfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cIfKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLogicalValueExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogicalValueExpressionValueExpressionParserRuleCall_2_0 = (RuleCall)cLogicalValueExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBehaviorActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBehaviorActionsBehaviorActionsParserRuleCall_4_0 = (RuleCall)cBehaviorActionsAssignment_4.eContents().get(0);
		private final Alternatives cAlternatives_5 = (Alternatives)cGroup.eContents().get(5);
		private final Assignment cElseStatementAssignment_5_0 = (Assignment)cAlternatives_5.eContents().get(0);
		private final RuleCall cElseStatementElseStatementParserRuleCall_5_0_0 = (RuleCall)cElseStatementAssignment_5_0.eContents().get(0);
		private final Assignment cElseStatementAssignment_5_1 = (Assignment)cAlternatives_5.eContents().get(1);
		private final RuleCall cElseStatementElseIfStatementParserRuleCall_5_1_0 = (RuleCall)cElseStatementAssignment_5_1.eContents().get(0);
		private final Keyword cEndifKeyword_6 = (Keyword)cGroup.eContents().get(6);
		
		//IfStatement returns ba::IfStatement:
		//	"if" "(" logicalValueExpression=ValueExpression ")" behaviorActions=BehaviorActions (elseStatement=ElseStatement |
		//	elseStatement=ElseIfStatement)? "endif";
		@Override public ParserRule getRule() { return rule; }

		//"if" "(" logicalValueExpression=ValueExpression ")" behaviorActions=BehaviorActions (elseStatement=ElseStatement |
		//elseStatement=ElseIfStatement)? "endif"
		public Group getGroup() { return cGroup; }

		//"if"
		public Keyword getIfKeyword_0() { return cIfKeyword_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//logicalValueExpression=ValueExpression
		public Assignment getLogicalValueExpressionAssignment_2() { return cLogicalValueExpressionAssignment_2; }

		//ValueExpression
		public RuleCall getLogicalValueExpressionValueExpressionParserRuleCall_2_0() { return cLogicalValueExpressionValueExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//behaviorActions=BehaviorActions
		public Assignment getBehaviorActionsAssignment_4() { return cBehaviorActionsAssignment_4; }

		//BehaviorActions
		public RuleCall getBehaviorActionsBehaviorActionsParserRuleCall_4_0() { return cBehaviorActionsBehaviorActionsParserRuleCall_4_0; }

		//(elseStatement=ElseStatement | elseStatement=ElseIfStatement)?
		public Alternatives getAlternatives_5() { return cAlternatives_5; }

		//elseStatement=ElseStatement
		public Assignment getElseStatementAssignment_5_0() { return cElseStatementAssignment_5_0; }

		//ElseStatement
		public RuleCall getElseStatementElseStatementParserRuleCall_5_0_0() { return cElseStatementElseStatementParserRuleCall_5_0_0; }

		//elseStatement=ElseIfStatement
		public Assignment getElseStatementAssignment_5_1() { return cElseStatementAssignment_5_1; }

		//ElseIfStatement
		public RuleCall getElseStatementElseIfStatementParserRuleCall_5_1_0() { return cElseStatementElseIfStatementParserRuleCall_5_1_0; }

		//"endif"
		public Keyword getEndifKeyword_6() { return cEndifKeyword_6; }
	}

	public class ElseIfStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseIfStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cElifAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final Keyword cElifElsifKeyword_0_0 = (Keyword)cElifAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cLogicalValueExpressionAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cLogicalValueExpressionValueExpressionParserRuleCall_2_0 = (RuleCall)cLogicalValueExpressionAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cBehaviorActionsAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cBehaviorActionsBehaviorActionsParserRuleCall_4_0 = (RuleCall)cBehaviorActionsAssignment_4.eContents().get(0);
		
		//ElseIfStatement returns ba::IfStatement:
		//	elif?="elsif" "(" logicalValueExpression=ValueExpression ")" behaviorActions=BehaviorActions;
		@Override public ParserRule getRule() { return rule; }

		//elif?="elsif" "(" logicalValueExpression=ValueExpression ")" behaviorActions=BehaviorActions
		public Group getGroup() { return cGroup; }

		//elif?="elsif"
		public Assignment getElifAssignment_0() { return cElifAssignment_0; }

		//"elsif"
		public Keyword getElifElsifKeyword_0_0() { return cElifElsifKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//logicalValueExpression=ValueExpression
		public Assignment getLogicalValueExpressionAssignment_2() { return cLogicalValueExpressionAssignment_2; }

		//ValueExpression
		public RuleCall getLogicalValueExpressionValueExpressionParserRuleCall_2_0() { return cLogicalValueExpressionValueExpressionParserRuleCall_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }

		//behaviorActions=BehaviorActions
		public Assignment getBehaviorActionsAssignment_4() { return cBehaviorActionsAssignment_4; }

		//BehaviorActions
		public RuleCall getBehaviorActionsBehaviorActionsParserRuleCall_4_0() { return cBehaviorActionsBehaviorActionsParserRuleCall_4_0; }
	}

	public class ElseStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElseStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cElseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cBehaviorActionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cBehaviorActionsBehaviorActionsParserRuleCall_1_0 = (RuleCall)cBehaviorActionsAssignment_1.eContents().get(0);
		
		//ElseStatement returns ba::ElseStatement:
		//	"else" behaviorActions=BehaviorActions;
		@Override public ParserRule getRule() { return rule; }

		//"else" behaviorActions=BehaviorActions
		public Group getGroup() { return cGroup; }

		//"else"
		public Keyword getElseKeyword_0() { return cElseKeyword_0; }

		//behaviorActions=BehaviorActions
		public Assignment getBehaviorActionsAssignment_1() { return cBehaviorActionsAssignment_1; }

		//BehaviorActions
		public RuleCall getBehaviorActionsBehaviorActionsParserRuleCall_1_0() { return cBehaviorActionsBehaviorActionsParserRuleCall_1_0; }
	}

	public class ForOrForAllStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ForOrForAllStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Keyword cForKeyword_0_0 = (Keyword)cAlternatives_0.eContents().get(0);
		private final Assignment cForAllAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final Keyword cForAllForallKeyword_0_1_0 = (Keyword)cForAllAssignment_0_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cIterativeVariableAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cIterativeVariableIterativeVariableParserRuleCall_2_0 = (RuleCall)cIterativeVariableAssignment_2.eContents().get(0);
		private final Keyword cInKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cIteratedValuesAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cIteratedValuesElementValuesParserRuleCall_4_0 = (RuleCall)cIteratedValuesAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cLeftCurlyBracketKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Assignment cBehaviorActionsAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cBehaviorActionsBehaviorActionsParserRuleCall_7_0 = (RuleCall)cBehaviorActionsAssignment_7.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_8 = (Keyword)cGroup.eContents().get(8);
		
		//ForOrForAllStatement returns ba::ForOrForAllStatement:
		//	("for" | forAll?="forall") "(" iterativeVariable=IterativeVariable "in" iteratedValues=ElementValues ")" "{"
		//	behaviorActions=BehaviorActions "}";
		@Override public ParserRule getRule() { return rule; }

		//("for" | forAll?="forall") "(" iterativeVariable=IterativeVariable "in" iteratedValues=ElementValues ")" "{"
		//behaviorActions=BehaviorActions "}"
		public Group getGroup() { return cGroup; }

		//"for" | forAll?="forall"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//"for"
		public Keyword getForKeyword_0_0() { return cForKeyword_0_0; }

		//forAll?="forall"
		public Assignment getForAllAssignment_0_1() { return cForAllAssignment_0_1; }

		//"forall"
		public Keyword getForAllForallKeyword_0_1_0() { return cForAllForallKeyword_0_1_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }

		//iterativeVariable=IterativeVariable
		public Assignment getIterativeVariableAssignment_2() { return cIterativeVariableAssignment_2; }

		//IterativeVariable
		public RuleCall getIterativeVariableIterativeVariableParserRuleCall_2_0() { return cIterativeVariableIterativeVariableParserRuleCall_2_0; }

		//"in"
		public Keyword getInKeyword_3() { return cInKeyword_3; }

		//iteratedValues=ElementValues
		public Assignment getIteratedValuesAssignment_4() { return cIteratedValuesAssignment_4; }

		//ElementValues
		public RuleCall getIteratedValuesElementValuesParserRuleCall_4_0() { return cIteratedValuesElementValuesParserRuleCall_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_6() { return cLeftCurlyBracketKeyword_6; }

		//behaviorActions=BehaviorActions
		public Assignment getBehaviorActionsAssignment_7() { return cBehaviorActionsAssignment_7; }

		//BehaviorActions
		public RuleCall getBehaviorActionsBehaviorActionsParserRuleCall_7_0() { return cBehaviorActionsBehaviorActionsParserRuleCall_7_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_8() { return cRightCurlyBracketKeyword_8; }
	}

	public class IterativeVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IterativeVariable");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cNameIDTerminalRuleCall_0_0 = (RuleCall)cNameAssignment_0.eContents().get(0);
		private final Keyword cColonKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cDataClassifierAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cDataClassifierDataClassifierCrossReference_2_0 = (CrossReference)cDataClassifierAssignment_2.eContents().get(0);
		private final RuleCall cDataClassifierDataClassifierIDTerminalRuleCall_2_0_1 = (RuleCall)cDataClassifierDataClassifierCrossReference_2_0.eContents().get(1);
		
		//IterativeVariable returns ba::IterativeVariable:
		//	name=ID ":" dataClassifier=[aadl2::DataClassifier];
		@Override public ParserRule getRule() { return rule; }

		//name=ID ":" dataClassifier=[aadl2::DataClassifier]
		public Group getGroup() { return cGroup; }

		//name=ID
		public Assignment getNameAssignment_0() { return cNameAssignment_0; }

		//ID
		public RuleCall getNameIDTerminalRuleCall_0_0() { return cNameIDTerminalRuleCall_0_0; }

		//":"
		public Keyword getColonKeyword_1() { return cColonKeyword_1; }

		//dataClassifier=[aadl2::DataClassifier]
		public Assignment getDataClassifierAssignment_2() { return cDataClassifierAssignment_2; }

		//[aadl2::DataClassifier]
		public CrossReference getDataClassifierDataClassifierCrossReference_2_0() { return cDataClassifierDataClassifierCrossReference_2_0; }

		//ID
		public RuleCall getDataClassifierDataClassifierIDTerminalRuleCall_2_0_1() { return cDataClassifierDataClassifierIDTerminalRuleCall_2_0_1; }
	}

	public class ElementValuesElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ElementValues");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerRangeParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// element_values ::=
		////   integer_range
		//// | event_data_port_name
		//// | array_data_component_reference
		//ElementValues returns ba::ElementValues:
		//	IntegerRange | Reference;
		@Override public ParserRule getRule() { return rule; }

		//IntegerRange | Reference
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerRange
		public RuleCall getIntegerRangeParserRuleCall_0() { return cIntegerRangeParserRuleCall_0; }

		//Reference
		public RuleCall getReferenceParserRuleCall_1() { return cReferenceParserRuleCall_1; }
	}

	public class WhileOrDoUntilStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "WhileOrDoUntilStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Keyword cWhileKeyword_0_0 = (Keyword)cGroup_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_0_1 = (Keyword)cGroup_0.eContents().get(1);
		private final Assignment cLogicalValueExpressionAssignment_0_2 = (Assignment)cGroup_0.eContents().get(2);
		private final RuleCall cLogicalValueExpressionValueExpressionParserRuleCall_0_2_0 = (RuleCall)cLogicalValueExpressionAssignment_0_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_0_3 = (Keyword)cGroup_0.eContents().get(3);
		private final Keyword cLeftCurlyBracketKeyword_0_4 = (Keyword)cGroup_0.eContents().get(4);
		private final Assignment cBehaviorActionsAssignment_0_5 = (Assignment)cGroup_0.eContents().get(5);
		private final RuleCall cBehaviorActionsBehaviorActionsParserRuleCall_0_5_0 = (RuleCall)cBehaviorActionsAssignment_0_5.eContents().get(0);
		private final Keyword cRightCurlyBracketKeyword_0_6 = (Keyword)cGroup_0.eContents().get(6);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cDoUntilAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final Keyword cDoUntilDoKeyword_1_0_0 = (Keyword)cDoUntilAssignment_1_0.eContents().get(0);
		private final Assignment cBehaviorActionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cBehaviorActionsBehaviorActionsParserRuleCall_1_1_0 = (RuleCall)cBehaviorActionsAssignment_1_1.eContents().get(0);
		private final Keyword cUntilKeyword_1_2 = (Keyword)cGroup_1.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_1_3 = (Keyword)cGroup_1.eContents().get(3);
		private final Assignment cLogicalValueExpressionAssignment_1_4 = (Assignment)cGroup_1.eContents().get(4);
		private final RuleCall cLogicalValueExpressionValueExpressionParserRuleCall_1_4_0 = (RuleCall)cLogicalValueExpressionAssignment_1_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_1_5 = (Keyword)cGroup_1.eContents().get(5);
		
		//WhileOrDoUntilStatement returns ba::WhileOrDoUntilStatement:
		//	"while" "(" logicalValueExpression=ValueExpression ")" "{" behaviorActions=BehaviorActions "}" | doUntil?="do"
		//	behaviorActions=BehaviorActions "until" "(" logicalValueExpression=ValueExpression ")";
		@Override public ParserRule getRule() { return rule; }

		//"while" "(" logicalValueExpression=ValueExpression ")" "{" behaviorActions=BehaviorActions "}" | doUntil?="do"
		//behaviorActions=BehaviorActions "until" "(" logicalValueExpression=ValueExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//"while" "(" logicalValueExpression=ValueExpression ")" "{" behaviorActions=BehaviorActions "}"
		public Group getGroup_0() { return cGroup_0; }

		//"while"
		public Keyword getWhileKeyword_0_0() { return cWhileKeyword_0_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_0_1() { return cLeftParenthesisKeyword_0_1; }

		//logicalValueExpression=ValueExpression
		public Assignment getLogicalValueExpressionAssignment_0_2() { return cLogicalValueExpressionAssignment_0_2; }

		//ValueExpression
		public RuleCall getLogicalValueExpressionValueExpressionParserRuleCall_0_2_0() { return cLogicalValueExpressionValueExpressionParserRuleCall_0_2_0; }

		//")"
		public Keyword getRightParenthesisKeyword_0_3() { return cRightParenthesisKeyword_0_3; }

		//"{"
		public Keyword getLeftCurlyBracketKeyword_0_4() { return cLeftCurlyBracketKeyword_0_4; }

		//behaviorActions=BehaviorActions
		public Assignment getBehaviorActionsAssignment_0_5() { return cBehaviorActionsAssignment_0_5; }

		//BehaviorActions
		public RuleCall getBehaviorActionsBehaviorActionsParserRuleCall_0_5_0() { return cBehaviorActionsBehaviorActionsParserRuleCall_0_5_0; }

		//"}"
		public Keyword getRightCurlyBracketKeyword_0_6() { return cRightCurlyBracketKeyword_0_6; }

		//doUntil?="do" behaviorActions=BehaviorActions "until" "(" logicalValueExpression=ValueExpression ")"
		public Group getGroup_1() { return cGroup_1; }

		//doUntil?="do"
		public Assignment getDoUntilAssignment_1_0() { return cDoUntilAssignment_1_0; }

		//"do"
		public Keyword getDoUntilDoKeyword_1_0_0() { return cDoUntilDoKeyword_1_0_0; }

		//behaviorActions=BehaviorActions
		public Assignment getBehaviorActionsAssignment_1_1() { return cBehaviorActionsAssignment_1_1; }

		//BehaviorActions
		public RuleCall getBehaviorActionsBehaviorActionsParserRuleCall_1_1_0() { return cBehaviorActionsBehaviorActionsParserRuleCall_1_1_0; }

		//"until"
		public Keyword getUntilKeyword_1_2() { return cUntilKeyword_1_2; }

		//"("
		public Keyword getLeftParenthesisKeyword_1_3() { return cLeftParenthesisKeyword_1_3; }

		//logicalValueExpression=ValueExpression
		public Assignment getLogicalValueExpressionAssignment_1_4() { return cLogicalValueExpressionAssignment_1_4; }

		//ValueExpression
		public RuleCall getLogicalValueExpressionValueExpressionParserRuleCall_1_4_0() { return cLogicalValueExpressionValueExpressionParserRuleCall_1_4_0; }

		//")"
		public Keyword getRightParenthesisKeyword_1_5() { return cRightParenthesisKeyword_1_5; }
	}

	public class ValueExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cRelationsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cRelationsRelationParserRuleCall_0_0 = (RuleCall)cRelationsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cLogicalOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cLogicalOperatorsLogicalOperatorEnumRuleCall_1_0_0 = (RuleCall)cLogicalOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cRelationsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cRelationsRelationParserRuleCall_1_1_0 = (RuleCall)cRelationsAssignment_1_1.eContents().get(0);
		
		//// value_expression ::=
		////   relation { logical_operator relation }*
		//ValueExpression returns ba::ValueExpression:
		//	relations+=Relation (logicalOperators+=LogicalOperator relations+=Relation)?;
		@Override public ParserRule getRule() { return rule; }

		//relations+=Relation (logicalOperators+=LogicalOperator relations+=Relation)?
		public Group getGroup() { return cGroup; }

		//relations+=Relation
		public Assignment getRelationsAssignment_0() { return cRelationsAssignment_0; }

		//Relation
		public RuleCall getRelationsRelationParserRuleCall_0_0() { return cRelationsRelationParserRuleCall_0_0; }

		//(logicalOperators+=LogicalOperator relations+=Relation)?
		public Group getGroup_1() { return cGroup_1; }

		//logicalOperators+=LogicalOperator
		public Assignment getLogicalOperatorsAssignment_1_0() { return cLogicalOperatorsAssignment_1_0; }

		//LogicalOperator
		public RuleCall getLogicalOperatorsLogicalOperatorEnumRuleCall_1_0_0() { return cLogicalOperatorsLogicalOperatorEnumRuleCall_1_0_0; }

		//relations+=Relation
		public Assignment getRelationsAssignment_1_1() { return cRelationsAssignment_1_1; }

		//Relation
		public RuleCall getRelationsRelationParserRuleCall_1_1_0() { return cRelationsRelationParserRuleCall_1_1_0; }
	}

	public class RelationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Relation");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFirstExpressionAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFirstExpressionSimpleExpressionParserRuleCall_0_0 = (RuleCall)cFirstExpressionAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cRelationalOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cRelationalOperatorRelationalOperatorEnumRuleCall_1_0_0 = (RuleCall)cRelationalOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cSecondExpressionAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cSecondExpressionSimpleExpressionParserRuleCall_1_1_0 = (RuleCall)cSecondExpressionAssignment_1_1.eContents().get(0);
		
		//// relation ::=
		////   simple_expression [ relational_operator simple_expression ]
		//Relation returns ba::Relation:
		//	firstExpression=SimpleExpression (relationalOperator=RelationalOperator secondExpression=SimpleExpression)?;
		@Override public ParserRule getRule() { return rule; }

		//firstExpression=SimpleExpression (relationalOperator=RelationalOperator secondExpression=SimpleExpression)?
		public Group getGroup() { return cGroup; }

		//firstExpression=SimpleExpression
		public Assignment getFirstExpressionAssignment_0() { return cFirstExpressionAssignment_0; }

		//SimpleExpression
		public RuleCall getFirstExpressionSimpleExpressionParserRuleCall_0_0() { return cFirstExpressionSimpleExpressionParserRuleCall_0_0; }

		//(relationalOperator=RelationalOperator secondExpression=SimpleExpression)?
		public Group getGroup_1() { return cGroup_1; }

		//relationalOperator=RelationalOperator
		public Assignment getRelationalOperatorAssignment_1_0() { return cRelationalOperatorAssignment_1_0; }

		//RelationalOperator
		public RuleCall getRelationalOperatorRelationalOperatorEnumRuleCall_1_0_0() { return cRelationalOperatorRelationalOperatorEnumRuleCall_1_0_0; }

		//secondExpression=SimpleExpression
		public Assignment getSecondExpressionAssignment_1_1() { return cSecondExpressionAssignment_1_1; }

		//SimpleExpression
		public RuleCall getSecondExpressionSimpleExpressionParserRuleCall_1_1_0() { return cSecondExpressionSimpleExpressionParserRuleCall_1_1_0; }
	}

	public class SimpleExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "SimpleExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cUnaryAddingOperatorAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cUnaryAddingOperatorUnaryAddingOperatorEnumRuleCall_0_0 = (RuleCall)cUnaryAddingOperatorAssignment_0.eContents().get(0);
		private final Assignment cTermsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_1_0 = (RuleCall)cTermsAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Assignment cBinaryAddingOperatorsAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cBinaryAddingOperatorsBinaryAddingOperatorEnumRuleCall_2_0_0 = (RuleCall)cBinaryAddingOperatorsAssignment_2_0.eContents().get(0);
		private final Assignment cTermsAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cTermsTermParserRuleCall_2_1_0 = (RuleCall)cTermsAssignment_2_1.eContents().get(0);
		
		//// simple_expression ::=
		////   [ unary_adding_operator ] term { binary_adding_operator term }*
		//SimpleExpression returns ba::SimpleExpression:
		//	unaryAddingOperator=UnaryAddingOperator? terms+=Term (binaryAddingOperators+=BinaryAddingOperator terms+=Term)*;
		@Override public ParserRule getRule() { return rule; }

		//unaryAddingOperator=UnaryAddingOperator? terms+=Term (binaryAddingOperators+=BinaryAddingOperator terms+=Term)*
		public Group getGroup() { return cGroup; }

		//unaryAddingOperator=UnaryAddingOperator?
		public Assignment getUnaryAddingOperatorAssignment_0() { return cUnaryAddingOperatorAssignment_0; }

		//UnaryAddingOperator
		public RuleCall getUnaryAddingOperatorUnaryAddingOperatorEnumRuleCall_0_0() { return cUnaryAddingOperatorUnaryAddingOperatorEnumRuleCall_0_0; }

		//terms+=Term
		public Assignment getTermsAssignment_1() { return cTermsAssignment_1; }

		//Term
		public RuleCall getTermsTermParserRuleCall_1_0() { return cTermsTermParserRuleCall_1_0; }

		//(binaryAddingOperators+=BinaryAddingOperator terms+=Term)*
		public Group getGroup_2() { return cGroup_2; }

		//binaryAddingOperators+=BinaryAddingOperator
		public Assignment getBinaryAddingOperatorsAssignment_2_0() { return cBinaryAddingOperatorsAssignment_2_0; }

		//BinaryAddingOperator
		public RuleCall getBinaryAddingOperatorsBinaryAddingOperatorEnumRuleCall_2_0_0() { return cBinaryAddingOperatorsBinaryAddingOperatorEnumRuleCall_2_0_0; }

		//terms+=Term
		public Assignment getTermsAssignment_2_1() { return cTermsAssignment_2_1; }

		//Term
		public RuleCall getTermsTermParserRuleCall_2_1_0() { return cTermsTermParserRuleCall_2_1_0; }
	}

	public class TermElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Term");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cFactorsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cFactorsFactorParserRuleCall_0_0 = (RuleCall)cFactorsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Assignment cMultiplyingOperatorsAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cMultiplyingOperatorsMultiplyingOperatorEnumRuleCall_1_0_0 = (RuleCall)cMultiplyingOperatorsAssignment_1_0.eContents().get(0);
		private final Assignment cFactorsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFactorsFactorParserRuleCall_1_1_0 = (RuleCall)cFactorsAssignment_1_1.eContents().get(0);
		
		//// term ::=
		////   factor { multiplying_operator factor }*
		//Term returns ba::Term:
		//	factors+=Factor (multiplyingOperators+=MultiplyingOperator factors+=Factor)*;
		@Override public ParserRule getRule() { return rule; }

		//factors+=Factor (multiplyingOperators+=MultiplyingOperator factors+=Factor)*
		public Group getGroup() { return cGroup; }

		//factors+=Factor
		public Assignment getFactorsAssignment_0() { return cFactorsAssignment_0; }

		//Factor
		public RuleCall getFactorsFactorParserRuleCall_0_0() { return cFactorsFactorParserRuleCall_0_0; }

		//(multiplyingOperators+=MultiplyingOperator factors+=Factor)*
		public Group getGroup_1() { return cGroup_1; }

		//multiplyingOperators+=MultiplyingOperator
		public Assignment getMultiplyingOperatorsAssignment_1_0() { return cMultiplyingOperatorsAssignment_1_0; }

		//MultiplyingOperator
		public RuleCall getMultiplyingOperatorsMultiplyingOperatorEnumRuleCall_1_0_0() { return cMultiplyingOperatorsMultiplyingOperatorEnumRuleCall_1_0_0; }

		//factors+=Factor
		public Assignment getFactorsAssignment_1_1() { return cFactorsAssignment_1_1; }

		//Factor
		public RuleCall getFactorsFactorParserRuleCall_1_1_0() { return cFactorsFactorParserRuleCall_1_1_0; }
	}

	public class FactorElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Factor");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final Group cGroup_0 = (Group)cAlternatives.eContents().get(0);
		private final Assignment cFirstValueAssignment_0_0 = (Assignment)cGroup_0.eContents().get(0);
		private final RuleCall cFirstValueValueParserRuleCall_0_0_0 = (RuleCall)cFirstValueAssignment_0_0.eContents().get(0);
		private final Group cGroup_0_1 = (Group)cGroup_0.eContents().get(1);
		private final Assignment cBinaryNumericOperatorAssignment_0_1_0 = (Assignment)cGroup_0_1.eContents().get(0);
		private final RuleCall cBinaryNumericOperatorBinaryNumericOperatorEnumRuleCall_0_1_0_0 = (RuleCall)cBinaryNumericOperatorAssignment_0_1_0.eContents().get(0);
		private final Assignment cSecondValueAssignment_0_1_1 = (Assignment)cGroup_0_1.eContents().get(1);
		private final RuleCall cSecondValueValueParserRuleCall_0_1_1_0 = (RuleCall)cSecondValueAssignment_0_1_1.eContents().get(0);
		private final Group cGroup_1 = (Group)cAlternatives.eContents().get(1);
		private final Assignment cUnaryNumericOperatorAssignment_1_0 = (Assignment)cGroup_1.eContents().get(0);
		private final RuleCall cUnaryNumericOperatorUnaryNumericOperatorEnumRuleCall_1_0_0 = (RuleCall)cUnaryNumericOperatorAssignment_1_0.eContents().get(0);
		private final Assignment cFirstValueAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cFirstValueValueParserRuleCall_1_1_0 = (RuleCall)cFirstValueAssignment_1_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Assignment cUnaryBooleanOperatorAssignment_2_0 = (Assignment)cGroup_2.eContents().get(0);
		private final RuleCall cUnaryBooleanOperatorUnaryBooleanOperatorEnumRuleCall_2_0_0 = (RuleCall)cUnaryBooleanOperatorAssignment_2_0.eContents().get(0);
		private final Assignment cFirstValueAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cFirstValueValueParserRuleCall_2_1_0 = (RuleCall)cFirstValueAssignment_2_1.eContents().get(0);
		
		//// factor ::=
		////   value [ binary_numeric_operator value ]
		//// | unary_numeric_operator value
		//// | unary_boolean_operator value
		//Factor returns ba::Factor:
		//	firstValue=Value (binaryNumericOperator=BinaryNumericOperator secondValue=Value)? |
		//	unaryNumericOperator=UnaryNumericOperator firstValue=Value | unaryBooleanOperator=UnaryBooleanOperator
		//	firstValue=Value;
		@Override public ParserRule getRule() { return rule; }

		//firstValue=Value (binaryNumericOperator=BinaryNumericOperator secondValue=Value)? |
		//unaryNumericOperator=UnaryNumericOperator firstValue=Value | unaryBooleanOperator=UnaryBooleanOperator firstValue=Value
		public Alternatives getAlternatives() { return cAlternatives; }

		//firstValue=Value (binaryNumericOperator=BinaryNumericOperator secondValue=Value)?
		public Group getGroup_0() { return cGroup_0; }

		//firstValue=Value
		public Assignment getFirstValueAssignment_0_0() { return cFirstValueAssignment_0_0; }

		//Value
		public RuleCall getFirstValueValueParserRuleCall_0_0_0() { return cFirstValueValueParserRuleCall_0_0_0; }

		//(binaryNumericOperator=BinaryNumericOperator secondValue=Value)?
		public Group getGroup_0_1() { return cGroup_0_1; }

		//binaryNumericOperator=BinaryNumericOperator
		public Assignment getBinaryNumericOperatorAssignment_0_1_0() { return cBinaryNumericOperatorAssignment_0_1_0; }

		//BinaryNumericOperator
		public RuleCall getBinaryNumericOperatorBinaryNumericOperatorEnumRuleCall_0_1_0_0() { return cBinaryNumericOperatorBinaryNumericOperatorEnumRuleCall_0_1_0_0; }

		//secondValue=Value
		public Assignment getSecondValueAssignment_0_1_1() { return cSecondValueAssignment_0_1_1; }

		//Value
		public RuleCall getSecondValueValueParserRuleCall_0_1_1_0() { return cSecondValueValueParserRuleCall_0_1_1_0; }

		//unaryNumericOperator=UnaryNumericOperator firstValue=Value
		public Group getGroup_1() { return cGroup_1; }

		//unaryNumericOperator=UnaryNumericOperator
		public Assignment getUnaryNumericOperatorAssignment_1_0() { return cUnaryNumericOperatorAssignment_1_0; }

		//UnaryNumericOperator
		public RuleCall getUnaryNumericOperatorUnaryNumericOperatorEnumRuleCall_1_0_0() { return cUnaryNumericOperatorUnaryNumericOperatorEnumRuleCall_1_0_0; }

		//firstValue=Value
		public Assignment getFirstValueAssignment_1_1() { return cFirstValueAssignment_1_1; }

		//Value
		public RuleCall getFirstValueValueParserRuleCall_1_1_0() { return cFirstValueValueParserRuleCall_1_1_0; }

		//unaryBooleanOperator=UnaryBooleanOperator firstValue=Value
		public Group getGroup_2() { return cGroup_2; }

		//unaryBooleanOperator=UnaryBooleanOperator
		public Assignment getUnaryBooleanOperatorAssignment_2_0() { return cUnaryBooleanOperatorAssignment_2_0; }

		//UnaryBooleanOperator
		public RuleCall getUnaryBooleanOperatorUnaryBooleanOperatorEnumRuleCall_2_0_0() { return cUnaryBooleanOperatorUnaryBooleanOperatorEnumRuleCall_2_0_0; }

		//firstValue=Value
		public Assignment getFirstValueAssignment_2_1() { return cFirstValueAssignment_2_1; }

		//Value
		public RuleCall getFirstValueValueParserRuleCall_2_1_0() { return cFirstValueValueParserRuleCall_2_1_0; }
	}

	public class ValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "Value");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cValueVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cValueExpressionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//// value ::= value_variable
		//// | value_constant
		//// | ( value_expression )
		//Value returns ba::Value:
		//	ValueConstant | => ValueVariable | "(" ValueExpression ")";
		@Override public ParserRule getRule() { return rule; }

		//ValueConstant | => ValueVariable | "(" ValueExpression ")"
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValueConstant
		public RuleCall getValueConstantParserRuleCall_0() { return cValueConstantParserRuleCall_0; }

		//=> ValueVariable
		public RuleCall getValueVariableParserRuleCall_1() { return cValueVariableParserRuleCall_1; }

		//=> "(" ValueExpression ")"
		public Group getGroup_2() { return cGroup_2; }

		//=> "("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }

		//ValueExpression
		public RuleCall getValueExpressionParserRuleCall_2_1() { return cValueExpressionParserRuleCall_2_1; }

		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}

	public class ValueVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueVariable");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cPortDequeueValueParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPortCountValueParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cPortFreshValueParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cValueVariableReferenceParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// value_variable ::=
		////   incoming_port_name
		//// | incoming_port_name ?
		//// | incoming_subprogram_parameter
		//// | incoming_port_prototype_name
		//// | data_component_reference
		//// | port_name ’ count
		//// | port_name ’ fresh
		//ValueVariable returns ba::ValueVariable:
		//	PortDequeueValue | => PortCountValue | => PortFreshValue | => ValueVariableReference;
		@Override public ParserRule getRule() { return rule; }

		//PortDequeueValue | => PortCountValue | => PortFreshValue | => ValueVariableReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//PortDequeueValue
		public RuleCall getPortDequeueValueParserRuleCall_0() { return cPortDequeueValueParserRuleCall_0; }

		//=> PortCountValue
		public RuleCall getPortCountValueParserRuleCall_1() { return cPortCountValueParserRuleCall_1; }

		//=> PortFreshValue
		public RuleCall getPortFreshValueParserRuleCall_2() { return cPortFreshValueParserRuleCall_2; }

		//=> ValueVariableReference
		public RuleCall getValueVariableReferenceParserRuleCall_3() { return cValueVariableReferenceParserRuleCall_3; }
	}

	public class ValueVariableReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueVariableReference");
		private final RuleCall cReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//ValueVariableReference returns declarative::Reference:
		//	Reference;
		@Override public ParserRule getRule() { return rule; }

		//Reference
		public RuleCall getReferenceParserRuleCall() { return cReferenceParserRuleCall; }
	}

	public class PortDequeueValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortDequeueValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cQuestionMarkKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PortDequeueValue returns declarative::Reference:
		//	Reference "?";
		@Override public ParserRule getRule() { return rule; }

		//Reference "?"
		public Group getGroup() { return cGroup; }

		//Reference
		public RuleCall getReferenceParserRuleCall_0() { return cReferenceParserRuleCall_0; }

		//"?"
		public Keyword getQuestionMarkKeyword_1() { return cQuestionMarkKeyword_1; }
	}

	public class PortCountValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortCountValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cCountKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PortCountValue returns declarative::Reference:
		//	Reference "\'count";
		@Override public ParserRule getRule() { return rule; }

		//Reference "\'count"
		public Group getGroup() { return cGroup; }

		//Reference
		public RuleCall getReferenceParserRuleCall_0() { return cReferenceParserRuleCall_0; }

		//"\'count"
		public Keyword getCountKeyword_1() { return cCountKeyword_1; }
	}

	public class PortFreshValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PortFreshValue");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cReferenceParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Keyword cFreshKeyword_1 = (Keyword)cGroup.eContents().get(1);
		
		//PortFreshValue returns declarative::Reference:
		//	Reference "\'fresh";
		@Override public ParserRule getRule() { return rule; }

		//Reference "\'fresh"
		public Group getGroup() { return cGroup; }

		//Reference
		public RuleCall getReferenceParserRuleCall_0() { return cReferenceParserRuleCall_0; }

		//"\'fresh"
		public Keyword getFreshKeyword_1() { return cFreshKeyword_1; }
	}

	public class ValueConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ValueConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBehaviorNumericLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cBehaviorBooleanLiteralParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cBehaviorStringLiteralParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//// value_constant ::= 
		////   boolean_literal
		//// | numeric_literal 
		//// | string_literal
		//// | property_constant
		//// | property_reference
		//ValueConstant returns ba::ValueConstant: // Ambiguity between qualified or unqualified  property constant and
		//// qualified or unqualified property reference with only one property name and
		//// no property field. so property constants are parsed as property references
		//// (see property reference). 
		//	BehaviorNumericLiteral | PropertyReference | BehaviorBooleanLiteral | BehaviorStringLiteral;
		@Override public ParserRule getRule() { return rule; }

		//// Ambiguity between qualified or unqualified  property constant and
		//// qualified or unqualified property reference with only one property name and
		//// no property field. so property constants are parsed as property references
		//// (see property reference). 
		//BehaviorNumericLiteral | PropertyReference | BehaviorBooleanLiteral | BehaviorStringLiteral
		public Alternatives getAlternatives() { return cAlternatives; }

		//// Ambiguity between qualified or unqualified  property constant and
		//// qualified or unqualified property reference with only one property name and
		//// no property field. so property constants are parsed as property references
		//// (see property reference). 
		//BehaviorNumericLiteral
		public RuleCall getBehaviorNumericLiteralParserRuleCall_0() { return cBehaviorNumericLiteralParserRuleCall_0; }

		//PropertyReference
		public RuleCall getPropertyReferenceParserRuleCall_1() { return cPropertyReferenceParserRuleCall_1; }

		//BehaviorBooleanLiteral
		public RuleCall getBehaviorBooleanLiteralParserRuleCall_2() { return cBehaviorBooleanLiteralParserRuleCall_2; }

		//BehaviorStringLiteral
		public RuleCall getBehaviorStringLiteralParserRuleCall_3() { return cBehaviorStringLiteralParserRuleCall_3; }
	}

	public class BehaviorStringLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorStringLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueNoQuoteStringParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BehaviorStringLiteral returns ba::BehaviorStringLiteral:
		//	value=NoQuoteString;
		@Override public ParserRule getRule() { return rule; }

		//value=NoQuoteString
		public Assignment getValueAssignment() { return cValueAssignment; }

		//NoQuoteString
		public RuleCall getValueNoQuoteStringParserRuleCall_0() { return cValueNoQuoteStringParserRuleCall_0; }
	}

	public class BehaviorNumericLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorNumericLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBehaviorIntegerLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Assignment cValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cValueSignedIntParserRuleCall_1_0 = (RuleCall)cValueAssignment_1.eContents().get(0);
		
		//// numeric_literal ::= <refer to [AS5506A 15.4]>
		//// numeric literal without optional sign and unit
		//BehaviorNumericLiteral returns ba::BehaviorIntegerLiteral:
		//	{ba::BehaviorIntegerLiteral} value=SignedInt;
		@Override public ParserRule getRule() { return rule; }

		//{ba::BehaviorIntegerLiteral} value=SignedInt
		public Group getGroup() { return cGroup; }

		//{ba::BehaviorIntegerLiteral}
		public Action getBehaviorIntegerLiteralAction_0() { return cBehaviorIntegerLiteralAction_0; }

		//value=SignedInt
		public Assignment getValueAssignment_1() { return cValueAssignment_1; }

		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_1_0() { return cValueSignedIntParserRuleCall_1_0; }
	}

	public class BehaviorBooleanLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorBooleanLiteral");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cBehaviorBooleanLiteralAction_0 = (Action)cGroup.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Assignment cValueAssignment_1_0 = (Assignment)cAlternatives_1.eContents().get(0);
		private final Keyword cValueTrueKeyword_1_0_0 = (Keyword)cValueAssignment_1_0.eContents().get(0);
		private final Keyword cFalseKeyword_1_1 = (Keyword)cAlternatives_1.eContents().get(1);
		
		//BehaviorBooleanLiteral returns ba::BehaviorBooleanLiteral:
		//	{ba::BehaviorBooleanLiteral} (value?="true" | "false");
		@Override public ParserRule getRule() { return rule; }

		//{ba::BehaviorBooleanLiteral} (value?="true" | "false")
		public Group getGroup() { return cGroup; }

		//{ba::BehaviorBooleanLiteral}
		public Action getBehaviorBooleanLiteralAction_0() { return cBehaviorBooleanLiteralAction_0; }

		//value?="true" | "false"
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//value?="true"
		public Assignment getValueAssignment_1_0() { return cValueAssignment_1_0; }

		//"true"
		public Keyword getValueTrueKeyword_1_0_0() { return cValueTrueKeyword_1_0_0; }

		//"false"
		public Keyword getFalseKeyword_1_1() { return cFalseKeyword_1_1; }
	}

	public class PropertyReferenceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyReference");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Group cGroup_0_0 = (Group)cAlternatives_0.eContents().get(0);
		private final Assignment cPropertySetAssignment_0_0_0 = (Assignment)cGroup_0_0.eContents().get(0);
		private final Keyword cPropertySetNumberSignKeyword_0_0_0_0 = (Keyword)cPropertySetAssignment_0_0_0.eContents().get(0);
		private final RuleCall cIDTerminalRuleCall_0_0_1 = (RuleCall)cGroup_0_0.eContents().get(1);
		private final Group cGroup_0_1 = (Group)cAlternatives_0.eContents().get(1);
		private final Alternatives cAlternatives_0_1_0 = (Alternatives)cGroup_0_1.eContents().get(0);
		private final Assignment cQualifiedNameAssignment_0_1_0_0 = (Assignment)cAlternatives_0_1_0.eContents().get(0);
		private final RuleCall cQualifiedNameQualifiedNamedElementParserRuleCall_0_1_0_0_0 = (RuleCall)cQualifiedNameAssignment_0_1_0_0.eContents().get(0);
		private final Assignment cReferenceAssignment_0_1_0_1 = (Assignment)cAlternatives_0_1_0.eContents().get(1);
		private final RuleCall cReferenceReferenceParserRuleCall_0_1_0_1_0 = (RuleCall)cReferenceAssignment_0_1_0_1.eContents().get(0);
		private final Keyword cNumberSignKeyword_0_1_1 = (Keyword)cGroup_0_1.eContents().get(1);
		private final Assignment cPropertyNamesAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPropertyNamesPropertyNameParserRuleCall_1_0 = (RuleCall)cPropertyNamesAssignment_1.eContents().get(0);
		private final Group cGroup_2 = (Group)cGroup.eContents().get(2);
		private final Keyword cFullStopKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final Assignment cPropertyNamesAssignment_2_1 = (Assignment)cGroup_2.eContents().get(1);
		private final RuleCall cPropertyNamesPropertyNameParserRuleCall_2_1_0 = (RuleCall)cPropertyNamesAssignment_2_1.eContents().get(0);
		
		//// property_constant ::=
		////   # [ property_set_identifier :: ] property_constant_identifier
		//// property_reference ::=
		////   # [ property_set_identifier :: ] property_value_name { . field_record_property_name }*
		//// | own_component_element_reference # property_name { . field_record_property_name }*
		//// | unique_component_classifier_reference # property_name { . field_record_property_name }*
		//// component_element_reference ::=
		////   subcomponent_name
		//// | local_variable_name
		//// | binded_prototype_name
		//// | feature_name
		//// Ambiguity between qualified or unqualified  property constant and
		//// qualified or unqualified property reference with only one property name and
		//// no property field. so property constants are parsed as property references
		//// (see property reference).
		//// Ambiguity between a unique component classifier reference without namespace
		//// and a component element reference.
		//// Ambiguity between a property literal and a property name without field.
		//PropertyReference returns declarative::DeclarativePropertyReference:
		//	(propertySet?="#" ID? | (qualifiedName=QualifiedNamedElement | reference=Reference) "#") propertyNames+=PropertyName
		//	("." propertyNames+=PropertyName)*;
		@Override public ParserRule getRule() { return rule; }

		//(propertySet?="#" ID? | (qualifiedName=QualifiedNamedElement | reference=Reference) "#") propertyNames+=PropertyName
		//("." propertyNames+=PropertyName)*
		public Group getGroup() { return cGroup; }

		//propertySet?="#" ID? | (qualifiedName=QualifiedNamedElement | reference=Reference) "#"
		public Alternatives getAlternatives_0() { return cAlternatives_0; }

		//propertySet?="#" ID?
		public Group getGroup_0_0() { return cGroup_0_0; }

		//propertySet?="#"
		public Assignment getPropertySetAssignment_0_0_0() { return cPropertySetAssignment_0_0_0; }

		//"#"
		public Keyword getPropertySetNumberSignKeyword_0_0_0_0() { return cPropertySetNumberSignKeyword_0_0_0_0; }

		//ID?
		public RuleCall getIDTerminalRuleCall_0_0_1() { return cIDTerminalRuleCall_0_0_1; }

		//(qualifiedName=QualifiedNamedElement | reference=Reference) "#"
		public Group getGroup_0_1() { return cGroup_0_1; }

		//qualifiedName=QualifiedNamedElement | reference=Reference
		public Alternatives getAlternatives_0_1_0() { return cAlternatives_0_1_0; }

		//qualifiedName=QualifiedNamedElement
		public Assignment getQualifiedNameAssignment_0_1_0_0() { return cQualifiedNameAssignment_0_1_0_0; }

		//QualifiedNamedElement
		public RuleCall getQualifiedNameQualifiedNamedElementParserRuleCall_0_1_0_0_0() { return cQualifiedNameQualifiedNamedElementParserRuleCall_0_1_0_0_0; }

		//reference=Reference
		public Assignment getReferenceAssignment_0_1_0_1() { return cReferenceAssignment_0_1_0_1; }

		//Reference
		public RuleCall getReferenceReferenceParserRuleCall_0_1_0_1_0() { return cReferenceReferenceParserRuleCall_0_1_0_1_0; }

		//"#"
		public Keyword getNumberSignKeyword_0_1_1() { return cNumberSignKeyword_0_1_1; }

		//propertyNames+=PropertyName
		public Assignment getPropertyNamesAssignment_1() { return cPropertyNamesAssignment_1; }

		//PropertyName
		public RuleCall getPropertyNamesPropertyNameParserRuleCall_1_0() { return cPropertyNamesPropertyNameParserRuleCall_1_0; }

		//("." propertyNames+=PropertyName)*
		public Group getGroup_2() { return cGroup_2; }

		//"."
		public Keyword getFullStopKeyword_2_0() { return cFullStopKeyword_2_0; }

		//propertyNames+=PropertyName
		public Assignment getPropertyNamesAssignment_2_1() { return cPropertyNamesAssignment_2_1; }

		//PropertyName
		public RuleCall getPropertyNamesPropertyNameParserRuleCall_2_1_0() { return cPropertyNamesPropertyNameParserRuleCall_2_1_0; }
	}

	public class PropertyNameElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "PropertyName");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPropertyNameAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPropertyNameIdentifierParserRuleCall_0_0 = (RuleCall)cPropertyNameAssignment_0.eContents().get(0);
		private final Alternatives cAlternatives_1 = (Alternatives)cGroup.eContents().get(1);
		private final Group cGroup_1_0 = (Group)cAlternatives_1.eContents().get(0);
		private final Keyword cLeftSquareBracketKeyword_1_0_0 = (Keyword)cGroup_1_0.eContents().get(0);
		private final Assignment cIndexesAssignment_1_0_1 = (Assignment)cGroup_1_0.eContents().get(1);
		private final RuleCall cIndexesIntegerValueParserRuleCall_1_0_1_0 = (RuleCall)cIndexesAssignment_1_0_1.eContents().get(0);
		private final Keyword cRightSquareBracketKeyword_1_0_2 = (Keyword)cGroup_1_0.eContents().get(2);
		private final Group cGroup_1_1 = (Group)cAlternatives_1.eContents().get(1);
		private final Keyword cFullStopKeyword_1_1_0 = (Keyword)cGroup_1_1.eContents().get(0);
		private final Alternatives cAlternatives_1_1_1 = (Alternatives)cGroup_1_1.eContents().get(1);
		private final Keyword cUpper_boundKeyword_1_1_1_0 = (Keyword)cAlternatives_1_1_1.eContents().get(0);
		private final Keyword cLower_boundKeyword_1_1_1_1 = (Keyword)cAlternatives_1_1_1.eContents().get(1);
		
		//// property_name ::=
		////   property_identifier [ property_field ]
		//// property_field ::=
		////   [ integer_value ]* (enumeration and list properties supported only)
		//// | . item_list_identifier (enumeration and list properties supported only)
		//// | . upper_bound (range properties supported only)
		//// | . lower_bound (range properties supported only)
		//// Ambiguity between a property literal and a property name without field.
		//PropertyName returns declarative::DeclarativePropertyName:
		//	propertyName=Identifier (("[" indexes+=IntegerValue "]")+ | "." ("upper_bound" | "lower_bound"))?;
		@Override public ParserRule getRule() { return rule; }

		//propertyName=Identifier (("[" indexes+=IntegerValue "]")+ | "." ("upper_bound" | "lower_bound"))?
		public Group getGroup() { return cGroup; }

		//propertyName=Identifier
		public Assignment getPropertyNameAssignment_0() { return cPropertyNameAssignment_0; }

		//Identifier
		public RuleCall getPropertyNameIdentifierParserRuleCall_0_0() { return cPropertyNameIdentifierParserRuleCall_0_0; }

		//(("[" indexes+=IntegerValue "]")+ | "." ("upper_bound" | "lower_bound"))?
		public Alternatives getAlternatives_1() { return cAlternatives_1; }

		//("[" indexes+=IntegerValue "]")+
		public Group getGroup_1_0() { return cGroup_1_0; }

		//"["
		public Keyword getLeftSquareBracketKeyword_1_0_0() { return cLeftSquareBracketKeyword_1_0_0; }

		//indexes+=IntegerValue
		public Assignment getIndexesAssignment_1_0_1() { return cIndexesAssignment_1_0_1; }

		//IntegerValue
		public RuleCall getIndexesIntegerValueParserRuleCall_1_0_1_0() { return cIndexesIntegerValueParserRuleCall_1_0_1_0; }

		//"]"
		public Keyword getRightSquareBracketKeyword_1_0_2() { return cRightSquareBracketKeyword_1_0_2; }

		//"." ("upper_bound" | "lower_bound")
		public Group getGroup_1_1() { return cGroup_1_1; }

		//"."
		public Keyword getFullStopKeyword_1_1_0() { return cFullStopKeyword_1_1_0; }

		//"upper_bound" | "lower_bound"
		public Alternatives getAlternatives_1_1_1() { return cAlternatives_1_1_1; }

		//"upper_bound"
		public Keyword getUpper_boundKeyword_1_1_1_0() { return cUpper_boundKeyword_1_1_1_0; }

		//"lower_bound"
		public Keyword getLower_boundKeyword_1_1_1_1() { return cLower_boundKeyword_1_1_1_1; }
	}

	public class IntegerRangeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerRange");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLowerIntegerValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLowerIntegerValueIntegerValueParserRuleCall_0_0 = (RuleCall)cLowerIntegerValueAssignment_0.eContents().get(0);
		private final Keyword cFullStopFullStopKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cUpperIntegerValueAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cUpperIntegerValueIntegerValueParserRuleCall_2_0 = (RuleCall)cUpperIntegerValueAssignment_2.eContents().get(0);
		
		//// integer_range ::= integer_value .. integer_value
		//IntegerRange returns ba::IntegerRange:
		//	lowerIntegerValue=IntegerValue ".." upperIntegerValue=IntegerValue;
		@Override public ParserRule getRule() { return rule; }

		//lowerIntegerValue=IntegerValue ".." upperIntegerValue=IntegerValue
		public Group getGroup() { return cGroup; }

		//lowerIntegerValue=IntegerValue
		public Assignment getLowerIntegerValueAssignment_0() { return cLowerIntegerValueAssignment_0; }

		//IntegerValue
		public RuleCall getLowerIntegerValueIntegerValueParserRuleCall_0_0() { return cLowerIntegerValueIntegerValueParserRuleCall_0_0; }

		//".."
		public Keyword getFullStopFullStopKeyword_1() { return cFullStopFullStopKeyword_1; }

		//upperIntegerValue=IntegerValue
		public Assignment getUpperIntegerValueAssignment_2() { return cUpperIntegerValueAssignment_2; }

		//IntegerValue
		public RuleCall getUpperIntegerValueIntegerValueParserRuleCall_2_0() { return cUpperIntegerValueIntegerValueParserRuleCall_2_0; }
	}

	public class IntegerValueElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValue");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntegerValueConstantParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntegerValueVariableParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//// integer_value ::=
		////   integer_value_variable
		//// | integer_value_constant
		//IntegerValue returns ba::IntegerValue:
		//	IntegerValueConstant | IntegerValueVariable;
		@Override public ParserRule getRule() { return rule; }

		//IntegerValueConstant | IntegerValueVariable
		public Alternatives getAlternatives() { return cAlternatives; }

		//IntegerValueConstant
		public RuleCall getIntegerValueConstantParserRuleCall_0() { return cIntegerValueConstantParserRuleCall_0; }

		//IntegerValueVariable
		public RuleCall getIntegerValueVariableParserRuleCall_1() { return cIntegerValueVariableParserRuleCall_1; }
	}

	public class IntegerValueConstantElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValueConstant");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cBehaviorIntegerLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cPropertyReferenceParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//IntegerValueConstant returns ba::IntegerValueConstant:
		//	BehaviorIntegerLiteral | PropertyReference;
		@Override public ParserRule getRule() { return rule; }

		//BehaviorIntegerLiteral | PropertyReference
		public Alternatives getAlternatives() { return cAlternatives; }

		//BehaviorIntegerLiteral
		public RuleCall getBehaviorIntegerLiteralParserRuleCall_0() { return cBehaviorIntegerLiteralParserRuleCall_0; }

		//PropertyReference
		public RuleCall getPropertyReferenceParserRuleCall_1() { return cPropertyReferenceParserRuleCall_1; }
	}

	public class IntegerValueVariableElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "IntegerValueVariable");
		private final RuleCall cValueVariableReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//IntegerValueVariable returns ba::IntegerValueVariable:
		//	ValueVariableReference;
		@Override public ParserRule getRule() { return rule; }

		//ValueVariableReference
		public RuleCall getValueVariableReferenceParserRuleCall() { return cValueVariableReferenceParserRuleCall; }
	}

	public class BehaviorIntegerLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorIntegerLiteral");
		private final Assignment cValueAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValueSignedIntParserRuleCall_0 = (RuleCall)cValueAssignment.eContents().get(0);
		
		//BehaviorIntegerLiteral returns ba::BehaviorIntegerLiteral:
		//	value=SignedInt;
		@Override public ParserRule getRule() { return rule; }

		//value=SignedInt
		public Assignment getValueAssignment() { return cValueAssignment; }

		//SignedInt
		public RuleCall getValueSignedIntParserRuleCall_0() { return cValueSignedIntParserRuleCall_0; }
	}

	public class BehaviorTimeElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorTime");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cIntegerValueAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cIntegerValueIntegerValueParserRuleCall_0_0 = (RuleCall)cIntegerValueAssignment_0.eContents().get(0);
		private final Assignment cUnitAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cUnitUnitLiteralCrossReference_1_0 = (CrossReference)cUnitAssignment_1.eContents().get(0);
		private final RuleCall cUnitUnitLiteralQCREFParserRuleCall_1_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_1_0.eContents().get(1);
		
		//BehaviorTime returns ba::BehaviorTime:
		//	integerValue=IntegerValue unit=[aadl2::UnitLiteral|QCREF];
		@Override public ParserRule getRule() { return rule; }

		//integerValue=IntegerValue unit=[aadl2::UnitLiteral|QCREF]
		public Group getGroup() { return cGroup; }

		//integerValue=IntegerValue
		public Assignment getIntegerValueAssignment_0() { return cIntegerValueAssignment_0; }

		//IntegerValue
		public RuleCall getIntegerValueIntegerValueParserRuleCall_0_0() { return cIntegerValueIntegerValueParserRuleCall_0_0; }

		//unit=[aadl2::UnitLiteral|QCREF]
		public Assignment getUnitAssignment_1() { return cUnitAssignment_1; }

		//[aadl2::UnitLiteral|QCREF]
		public CrossReference getUnitUnitLiteralCrossReference_1_0() { return cUnitUnitLiteralCrossReference_1_0; }

		//QCREF
		public RuleCall getUnitUnitLiteralQCREFParserRuleCall_1_0_1() { return cUnitUnitLiteralQCREFParserRuleCall_1_0_1; }
	}

	public class BehaviorConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "BehaviorCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cDispatchConditionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cExecuteConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cExternalConditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cInternalConditionParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//BehaviorCondition returns ba::BehaviorCondition:
		//	DispatchCondition | ExecuteCondition | ExternalCondition | InternalCondition;
		@Override public ParserRule getRule() { return rule; }

		//DispatchCondition | ExecuteCondition | ExternalCondition | InternalCondition
		public Alternatives getAlternatives() { return cAlternatives; }

		//DispatchCondition
		public RuleCall getDispatchConditionParserRuleCall_0() { return cDispatchConditionParserRuleCall_0; }

		//ExecuteCondition
		public RuleCall getExecuteConditionParserRuleCall_1() { return cExecuteConditionParserRuleCall_1; }

		//ExternalCondition
		public RuleCall getExternalConditionParserRuleCall_2() { return cExternalConditionParserRuleCall_2; }

		//InternalCondition
		public RuleCall getInternalConditionParserRuleCall_3() { return cInternalConditionParserRuleCall_3; }
	}

	public class ExternalConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExternalCondition");
		private final Keyword cTBD_ExternalConditionKeyword = (Keyword)rule.eContents().get(1);
		
		//ExternalCondition:
		//	"TBD_ExternalCondition";
		@Override public ParserRule getRule() { return rule; }

		//"TBD_ExternalCondition"
		public Keyword getTBD_ExternalConditionKeyword() { return cTBD_ExternalConditionKeyword; }
	}

	public class InternalConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "InternalCondition");
		private final Keyword cTBD_InternalConditionKeyword = (Keyword)rule.eContents().get(1);
		
		//InternalCondition:
		//	"TBD_InternalCondition";
		@Override public ParserRule getRule() { return rule; }

		//"TBD_InternalCondition"
		public Keyword getTBD_InternalConditionKeyword() { return cTBD_InternalConditionKeyword; }
	}

	public class ExecuteConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "ExecuteCondition");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cValueExpressionParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTimeoutExecuteConditionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cOthewiseConditionParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		
		//ExecuteCondition returns ba::ExecuteCondition:
		//	(ValueExpression | TimeoutExecuteCondition | OthewiseCondition)?;
		@Override public ParserRule getRule() { return rule; }

		//(ValueExpression | TimeoutExecuteCondition | OthewiseCondition)?
		public Alternatives getAlternatives() { return cAlternatives; }

		//ValueExpression
		public RuleCall getValueExpressionParserRuleCall_0() { return cValueExpressionParserRuleCall_0; }

		//TimeoutExecuteCondition
		public RuleCall getTimeoutExecuteConditionParserRuleCall_1() { return cTimeoutExecuteConditionParserRuleCall_1; }

		//OthewiseCondition
		public RuleCall getOthewiseConditionParserRuleCall_2() { return cOthewiseConditionParserRuleCall_2; }
	}

	public class TimeoutExecuteConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeoutExecuteCondition");
		private final Keyword cTBD_TimeoutExecuteConditionKeyword = (Keyword)rule.eContents().get(1);
		
		//TimeoutExecuteCondition:
		//	"TBD_TimeoutExecuteCondition";
		@Override public ParserRule getRule() { return rule; }

		//"TBD_TimeoutExecuteCondition"
		public Keyword getTBD_TimeoutExecuteConditionKeyword() { return cTBD_TimeoutExecuteConditionKeyword; }
	}

	public class OthewiseConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "OthewiseCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cOtherwiseKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cOtherwiseAction_1 = (Action)cGroup.eContents().get(1);
		
		//OthewiseCondition returns ba::Otherwise:
		//	"otherwise" {ba::Otherwise};
		@Override public ParserRule getRule() { return rule; }

		//"otherwise" {ba::Otherwise}
		public Group getGroup() { return cGroup; }

		//"otherwise"
		public Keyword getOtherwiseKeyword_0() { return cOtherwiseKeyword_0; }

		//{ba::Otherwise}
		public Action getOtherwiseAction_1() { return cOtherwiseAction_1; }
	}

	public class DispatchConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DispatchCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Action cDispatchConditionAction_0 = (Action)cGroup.eContents().get(0);
		private final Keyword cOnKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cDispatchKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Alternatives cAlternatives_3 = (Alternatives)cGroup.eContents().get(3);
		private final Assignment cDispatchTriggerConditionAssignment_3_0 = (Assignment)cAlternatives_3.eContents().get(0);
		private final RuleCall cDispatchTriggerConditionDispatchTriggerConditionParserRuleCall_3_0_0 = (RuleCall)cDispatchTriggerConditionAssignment_3_0.eContents().get(0);
		private final Assignment cDispatchTriggerConditionAssignment_3_1 = (Assignment)cAlternatives_3.eContents().get(1);
		private final RuleCall cDispatchTriggerConditionStopDispatchTriggerConditionParserRuleCall_3_1_0 = (RuleCall)cDispatchTriggerConditionAssignment_3_1.eContents().get(0);
		private final Assignment cDispatchTriggerConditionAssignment_3_2 = (Assignment)cAlternatives_3.eContents().get(2);
		private final RuleCall cDispatchTriggerConditionCompletionRelativeTimeoutCatchParserRuleCall_3_2_0 = (RuleCall)cDispatchTriggerConditionAssignment_3_2.eContents().get(0);
		private final Assignment cDispatchTriggerConditionAssignment_3_3 = (Assignment)cAlternatives_3.eContents().get(3);
		private final RuleCall cDispatchTriggerConditionDispatchRelativeTimeoutCatchParserRuleCall_3_3_0 = (RuleCall)cDispatchTriggerConditionAssignment_3_3.eContents().get(0);
		private final Group cGroup_4 = (Group)cGroup.eContents().get(4);
		private final Keyword cFrozenKeyword_4_0 = (Keyword)cGroup_4.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_4_1 = (Keyword)cGroup_4.eContents().get(1);
		private final Assignment cFrozenPortsAssignment_4_2 = (Assignment)cGroup_4.eContents().get(2);
		private final RuleCall cFrozenPortsFrozenPortsParserRuleCall_4_2_0 = (RuleCall)cFrozenPortsAssignment_4_2.eContents().get(0);
		private final Group cGroup_4_3 = (Group)cGroup_4.eContents().get(3);
		private final Keyword cCommaKeyword_4_3_0 = (Keyword)cGroup_4_3.eContents().get(0);
		private final Assignment cFrozenPortsAssignment_4_3_1 = (Assignment)cGroup_4_3.eContents().get(1);
		private final RuleCall cFrozenPortsFrozenPortsParserRuleCall_4_3_1_0 = (RuleCall)cFrozenPortsAssignment_4_3_1.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4_4 = (Keyword)cGroup_4.eContents().get(4);
		
		//DispatchCondition returns ba::DispatchCondition:
		//	{ba::DispatchCondition} "on" "dispatch" (dispatchTriggerCondition=DispatchTriggerCondition |
		//	dispatchTriggerCondition=StopDispatchTriggerCondition | dispatchTriggerCondition=CompletionRelativeTimeoutCatch |
		//	dispatchTriggerCondition=DispatchRelativeTimeoutCatch)? ("frozen" "(" frozenPorts+=FrozenPorts (","
		//	frozenPorts+=FrozenPorts)* ")")?;
		@Override public ParserRule getRule() { return rule; }

		//{ba::DispatchCondition} "on" "dispatch" (dispatchTriggerCondition=DispatchTriggerCondition |
		//dispatchTriggerCondition=StopDispatchTriggerCondition | dispatchTriggerCondition=CompletionRelativeTimeoutCatch |
		//dispatchTriggerCondition=DispatchRelativeTimeoutCatch)? ("frozen" "(" frozenPorts+=FrozenPorts (","
		//frozenPorts+=FrozenPorts)* ")")?
		public Group getGroup() { return cGroup; }

		//{ba::DispatchCondition}
		public Action getDispatchConditionAction_0() { return cDispatchConditionAction_0; }

		//"on"
		public Keyword getOnKeyword_1() { return cOnKeyword_1; }

		//"dispatch"
		public Keyword getDispatchKeyword_2() { return cDispatchKeyword_2; }

		//(dispatchTriggerCondition=DispatchTriggerCondition | dispatchTriggerCondition=StopDispatchTriggerCondition |
		//dispatchTriggerCondition=CompletionRelativeTimeoutCatch | dispatchTriggerCondition=DispatchRelativeTimeoutCatch)?
		public Alternatives getAlternatives_3() { return cAlternatives_3; }

		//dispatchTriggerCondition=DispatchTriggerCondition
		public Assignment getDispatchTriggerConditionAssignment_3_0() { return cDispatchTriggerConditionAssignment_3_0; }

		//DispatchTriggerCondition
		public RuleCall getDispatchTriggerConditionDispatchTriggerConditionParserRuleCall_3_0_0() { return cDispatchTriggerConditionDispatchTriggerConditionParserRuleCall_3_0_0; }

		//dispatchTriggerCondition=StopDispatchTriggerCondition
		public Assignment getDispatchTriggerConditionAssignment_3_1() { return cDispatchTriggerConditionAssignment_3_1; }

		//StopDispatchTriggerCondition
		public RuleCall getDispatchTriggerConditionStopDispatchTriggerConditionParserRuleCall_3_1_0() { return cDispatchTriggerConditionStopDispatchTriggerConditionParserRuleCall_3_1_0; }

		//dispatchTriggerCondition=CompletionRelativeTimeoutCatch
		public Assignment getDispatchTriggerConditionAssignment_3_2() { return cDispatchTriggerConditionAssignment_3_2; }

		//CompletionRelativeTimeoutCatch
		public RuleCall getDispatchTriggerConditionCompletionRelativeTimeoutCatchParserRuleCall_3_2_0() { return cDispatchTriggerConditionCompletionRelativeTimeoutCatchParserRuleCall_3_2_0; }

		//dispatchTriggerCondition=DispatchRelativeTimeoutCatch
		public Assignment getDispatchTriggerConditionAssignment_3_3() { return cDispatchTriggerConditionAssignment_3_3; }

		//DispatchRelativeTimeoutCatch
		public RuleCall getDispatchTriggerConditionDispatchRelativeTimeoutCatchParserRuleCall_3_3_0() { return cDispatchTriggerConditionDispatchRelativeTimeoutCatchParserRuleCall_3_3_0; }

		//("frozen" "(" frozenPorts+=FrozenPorts ("," frozenPorts+=FrozenPorts)* ")")?
		public Group getGroup_4() { return cGroup_4; }

		//"frozen"
		public Keyword getFrozenKeyword_4_0() { return cFrozenKeyword_4_0; }

		//"("
		public Keyword getLeftParenthesisKeyword_4_1() { return cLeftParenthesisKeyword_4_1; }

		//frozenPorts+=FrozenPorts
		public Assignment getFrozenPortsAssignment_4_2() { return cFrozenPortsAssignment_4_2; }

		//FrozenPorts
		public RuleCall getFrozenPortsFrozenPortsParserRuleCall_4_2_0() { return cFrozenPortsFrozenPortsParserRuleCall_4_2_0; }

		//("," frozenPorts+=FrozenPorts)*
		public Group getGroup_4_3() { return cGroup_4_3; }

		//","
		public Keyword getCommaKeyword_4_3_0() { return cCommaKeyword_4_3_0; }

		//frozenPorts+=FrozenPorts
		public Assignment getFrozenPortsAssignment_4_3_1() { return cFrozenPortsAssignment_4_3_1; }

		//FrozenPorts
		public RuleCall getFrozenPortsFrozenPortsParserRuleCall_4_3_1_0() { return cFrozenPortsFrozenPortsParserRuleCall_4_3_1_0; }

		//")"
		public Keyword getRightParenthesisKeyword_4_4() { return cRightParenthesisKeyword_4_4; }
	}

	public class DispatchRelativeTimeoutCatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DispatchRelativeTimeoutCatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cDispatchRelativeTimeoutAction_1 = (Action)cGroup.eContents().get(1);
		
		//DispatchRelativeTimeoutCatch returns ba::DispatchRelativeTimeout:
		//	"timeout" {ba::DispatchRelativeTimeout};
		@Override public ParserRule getRule() { return rule; }

		//"timeout" {ba::DispatchRelativeTimeout}
		public Group getGroup() { return cGroup; }

		//"timeout"
		public Keyword getTimeoutKeyword_0() { return cTimeoutKeyword_0; }

		//{ba::DispatchRelativeTimeout}
		public Action getDispatchRelativeTimeoutAction_1() { return cDispatchRelativeTimeoutAction_1; }
	}

	public class TimeoutResetPortElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "TimeoutResetPort");
		private final Keyword cTBD_TimeoutKeyword = (Keyword)rule.eContents().get(1);
		
		//TimeoutResetPort returns ba::PortHolder: // TODO: holder mechanism
		//	"TBD_Timeout";
		@Override public ParserRule getRule() { return rule; }

		//// TODO: holder mechanism
		//"TBD_Timeout"
		public Keyword getTBD_TimeoutKeyword() { return cTBD_TimeoutKeyword; }
	}

	public class CompletionRelativeTimeoutCatchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "CompletionRelativeTimeoutCatch");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTimeoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cIntegerValueAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cIntegerValueIntegerValueParserRuleCall_1_0 = (RuleCall)cIntegerValueAssignment_1.eContents().get(0);
		private final Assignment cUnitAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final CrossReference cUnitUnitLiteralCrossReference_2_0 = (CrossReference)cUnitAssignment_2.eContents().get(0);
		private final RuleCall cUnitUnitLiteralIDTerminalRuleCall_2_0_1 = (RuleCall)cUnitUnitLiteralCrossReference_2_0.eContents().get(1);
		
		//CompletionRelativeTimeoutCatch returns ba::CompletionRelativeTimeout: // TODO: add timeout ports ( ( TimeoutResetPort ( 'or' TimeoutResetPort )* ) )?
		//	"timeout" integerValue=IntegerValue unit=[aadl2::UnitLiteral];
		@Override public ParserRule getRule() { return rule; }

		//// TODO: add timeout ports ( ( TimeoutResetPort ( 'or' TimeoutResetPort )* ) )?
		//"timeout" integerValue=IntegerValue unit=[aadl2::UnitLiteral]
		public Group getGroup() { return cGroup; }

		//// TODO: add timeout ports ( ( TimeoutResetPort ( 'or' TimeoutResetPort )* ) )?
		//"timeout"
		public Keyword getTimeoutKeyword_0() { return cTimeoutKeyword_0; }

		//integerValue=IntegerValue
		public Assignment getIntegerValueAssignment_1() { return cIntegerValueAssignment_1; }

		//IntegerValue
		public RuleCall getIntegerValueIntegerValueParserRuleCall_1_0() { return cIntegerValueIntegerValueParserRuleCall_1_0; }

		//unit=[aadl2::UnitLiteral]
		public Assignment getUnitAssignment_2() { return cUnitAssignment_2; }

		//[aadl2::UnitLiteral]
		public CrossReference getUnitUnitLiteralCrossReference_2_0() { return cUnitUnitLiteralCrossReference_2_0; }

		//ID
		public RuleCall getUnitUnitLiteralIDTerminalRuleCall_2_0_1() { return cUnitUnitLiteralIDTerminalRuleCall_2_0_1; }
	}

	public class FrozenPortsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "FrozenPorts");
		private final Assignment cElementAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cElementPortCrossReference_0 = (CrossReference)cElementAssignment.eContents().get(0);
		private final RuleCall cElementPortIDTerminalRuleCall_0_1 = (RuleCall)cElementPortCrossReference_0.eContents().get(1);
		
		//FrozenPorts returns ba::ActualPortHolder:
		//	element=[aadl2::Port];
		@Override public ParserRule getRule() { return rule; }

		//element=[aadl2::Port]
		public Assignment getElementAssignment() { return cElementAssignment; }

		//[aadl2::Port]
		public CrossReference getElementPortCrossReference_0() { return cElementPortCrossReference_0; }

		//ID
		public RuleCall getElementPortIDTerminalRuleCall_0_1() { return cElementPortIDTerminalRuleCall_0_1; }
	}

	public class DispatchTriggerLogicalExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DispatchTriggerLogicalExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDispatchConjunctionsAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDispatchConjunctionsDispatchConjunctionParserRuleCall_0_0 = (RuleCall)cDispatchConjunctionsAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cOrKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDispatchConjunctionsAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDispatchConjunctionsDispatchConjunctionParserRuleCall_1_1_0 = (RuleCall)cDispatchConjunctionsAssignment_1_1.eContents().get(0);
		
		//DispatchTriggerLogicalExpression returns ba::DispatchTriggerLogicalExpression:
		//	dispatchConjunctions+=DispatchConjunction ("or" dispatchConjunctions+=DispatchConjunction)*;
		@Override public ParserRule getRule() { return rule; }

		//dispatchConjunctions+=DispatchConjunction ("or" dispatchConjunctions+=DispatchConjunction)*
		public Group getGroup() { return cGroup; }

		//dispatchConjunctions+=DispatchConjunction
		public Assignment getDispatchConjunctionsAssignment_0() { return cDispatchConjunctionsAssignment_0; }

		//DispatchConjunction
		public RuleCall getDispatchConjunctionsDispatchConjunctionParserRuleCall_0_0() { return cDispatchConjunctionsDispatchConjunctionParserRuleCall_0_0; }

		//("or" dispatchConjunctions+=DispatchConjunction)*
		public Group getGroup_1() { return cGroup_1; }

		//"or"
		public Keyword getOrKeyword_1_0() { return cOrKeyword_1_0; }

		//dispatchConjunctions+=DispatchConjunction
		public Assignment getDispatchConjunctionsAssignment_1_1() { return cDispatchConjunctionsAssignment_1_1; }

		//DispatchConjunction
		public RuleCall getDispatchConjunctionsDispatchConjunctionParserRuleCall_1_1_0() { return cDispatchConjunctionsDispatchConjunctionParserRuleCall_1_1_0; }
	}

	public class DispatchConjunctionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DispatchConjunction");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cDispatchTriggersAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cDispatchTriggersDispatchTriggerParserRuleCall_0_0 = (RuleCall)cDispatchTriggersAssignment_0.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Keyword cAndKeyword_1_0 = (Keyword)cGroup_1.eContents().get(0);
		private final Assignment cDispatchTriggersAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final RuleCall cDispatchTriggersDispatchTriggerParserRuleCall_1_1_0 = (RuleCall)cDispatchTriggersAssignment_1_1.eContents().get(0);
		
		//DispatchConjunction returns ba::DispatchConjunction:
		//	dispatchTriggers+=DispatchTrigger ("and" dispatchTriggers+=DispatchTrigger)*;
		@Override public ParserRule getRule() { return rule; }

		//dispatchTriggers+=DispatchTrigger ("and" dispatchTriggers+=DispatchTrigger)*
		public Group getGroup() { return cGroup; }

		//dispatchTriggers+=DispatchTrigger
		public Assignment getDispatchTriggersAssignment_0() { return cDispatchTriggersAssignment_0; }

		//DispatchTrigger
		public RuleCall getDispatchTriggersDispatchTriggerParserRuleCall_0_0() { return cDispatchTriggersDispatchTriggerParserRuleCall_0_0; }

		//("and" dispatchTriggers+=DispatchTrigger)*
		public Group getGroup_1() { return cGroup_1; }

		//"and"
		public Keyword getAndKeyword_1_0() { return cAndKeyword_1_0; }

		//dispatchTriggers+=DispatchTrigger
		public Assignment getDispatchTriggersAssignment_1_1() { return cDispatchTriggersAssignment_1_1; }

		//DispatchTrigger
		public RuleCall getDispatchTriggersDispatchTriggerParserRuleCall_1_1_0() { return cDispatchTriggersDispatchTriggerParserRuleCall_1_1_0; }
	}

	public class DispatchTriggerConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DispatchTriggerCondition");
		private final RuleCall cDispatchTriggerLogicalExpressionParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DispatchTriggerCondition returns ba::DispatchTriggerCondition:
		//	DispatchTriggerLogicalExpression;
		@Override public ParserRule getRule() { return rule; }

		//DispatchTriggerLogicalExpression
		public RuleCall getDispatchTriggerLogicalExpressionParserRuleCall() { return cDispatchTriggerLogicalExpressionParserRuleCall; }
	}

	public class DispatchTriggerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "DispatchTrigger");
		private final RuleCall cReferenceParserRuleCall = (RuleCall)rule.eContents().get(1);
		
		//DispatchTrigger returns declarative::Reference:
		//	Reference;
		@Override public ParserRule getRule() { return rule; }

		//Reference
		public RuleCall getReferenceParserRuleCall() { return cReferenceParserRuleCall; }
	}

	public class StopDispatchTriggerConditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "StopDispatchTriggerCondition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cStopKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Action cDispatchTriggerConditionStopAction_1 = (Action)cGroup.eContents().get(1);
		
		//StopDispatchTriggerCondition returns ba::DispatchTriggerConditionStop:
		//	"stop" {ba::DispatchTriggerConditionStop};
		@Override public ParserRule getRule() { return rule; }

		//"stop" {ba::DispatchTriggerConditionStop}
		public Group getGroup() { return cGroup; }

		//"stop"
		public Keyword getStopKeyword_0() { return cStopKeyword_0; }

		//{ba::DispatchTriggerConditionStop}
		public Action getDispatchTriggerConditionStopAction_1() { return cDispatchTriggerConditionStopAction_1; }
	}
	
	
	public class BinaryNumericOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryNumericOperator");
		private final EnumLiteralDeclaration cMultiplyMultiplyEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMultiplyMultiplyAsteriskAsteriskKeyword_0 = (Keyword)cMultiplyMultiplyEnumLiteralDeclaration.eContents().get(0);
		
		//// binary_numeric_operator ::= **
		//enum BinaryNumericOperator returns ba::BinaryNumericOperator:
		//	MultiplyMultiply="**";
		public EnumRule getRule() { return rule; }

		//MultiplyMultiply="**"
		public EnumLiteralDeclaration getMultiplyMultiplyEnumLiteralDeclaration() { return cMultiplyMultiplyEnumLiteralDeclaration; }

		//"**"
		public Keyword getMultiplyMultiplyAsteriskAsteriskKeyword_0() { return cMultiplyMultiplyAsteriskAsteriskKeyword_0; }
	}

	public class UnaryNumericOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryNumericOperator");
		private final EnumLiteralDeclaration cAbsEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cAbsAbsKeyword_0 = (Keyword)cAbsEnumLiteralDeclaration.eContents().get(0);
		
		//// unary_numeric_operator ::= abs
		//enum UnaryNumericOperator returns ba::UnaryNumericOperator:
		//	Abs="abs";
		public EnumRule getRule() { return rule; }

		//Abs="abs"
		public EnumLiteralDeclaration getAbsEnumLiteralDeclaration() { return cAbsEnumLiteralDeclaration; }

		//"abs"
		public Keyword getAbsAbsKeyword_0() { return cAbsAbsKeyword_0; }
	}

	public class UnaryBooleanOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryBooleanOperator");
		private final EnumLiteralDeclaration cNotEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cNotNotKeyword_0 = (Keyword)cNotEnumLiteralDeclaration.eContents().get(0);
		
		//// unary_boolean_operator ::= not
		//enum UnaryBooleanOperator returns ba::UnaryBooleanOperator:
		//	Not="not";
		public EnumRule getRule() { return rule; }

		//Not="not"
		public EnumLiteralDeclaration getNotEnumLiteralDeclaration() { return cNotEnumLiteralDeclaration; }

		//"not"
		public Keyword getNotNotKeyword_0() { return cNotNotKeyword_0; }
	}

	public class MultiplyingOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "MultiplyingOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cMultiplyEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cMultiplyAsteriskKeyword_0_0 = (Keyword)cMultiplyEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDivideEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDivideSolidusKeyword_1_0 = (Keyword)cDivideEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cModEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cModModKeyword_2_0 = (Keyword)cModEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cRemEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cRemRemKeyword_3_0 = (Keyword)cRemEnumLiteralDeclaration_3.eContents().get(0);
		
		//enum MultiplyingOperator returns ba::MultiplyingOperator:
		//	Multiply="*" | Divide="/" | Mod="mod" | Rem="rem";
		public EnumRule getRule() { return rule; }

		//Multiply="*" | Divide="/" | Mod="mod" | Rem="rem"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Multiply="*"
		public EnumLiteralDeclaration getMultiplyEnumLiteralDeclaration_0() { return cMultiplyEnumLiteralDeclaration_0; }

		//"*"
		public Keyword getMultiplyAsteriskKeyword_0_0() { return cMultiplyAsteriskKeyword_0_0; }

		//Divide="/"
		public EnumLiteralDeclaration getDivideEnumLiteralDeclaration_1() { return cDivideEnumLiteralDeclaration_1; }

		//"/"
		public Keyword getDivideSolidusKeyword_1_0() { return cDivideSolidusKeyword_1_0; }

		//Mod="mod"
		public EnumLiteralDeclaration getModEnumLiteralDeclaration_2() { return cModEnumLiteralDeclaration_2; }

		//"mod"
		public Keyword getModModKeyword_2_0() { return cModModKeyword_2_0; }

		//Rem="rem"
		public EnumLiteralDeclaration getRemEnumLiteralDeclaration_3() { return cRemEnumLiteralDeclaration_3; }

		//"rem"
		public Keyword getRemRemKeyword_3_0() { return cRemRemKeyword_3_0; }
	}

	public class BinaryAddingOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "BinaryAddingOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPlusEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPlusPlusSignKeyword_0_0 = (Keyword)cPlusEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_1_0 = (Keyword)cMinusEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum BinaryAddingOperator returns ba::BinaryAddingOperator:
		//	Plus="+" | Minus="-";
		public EnumRule getRule() { return rule; }

		//Plus="+" | Minus="-"
		public Alternatives getAlternatives() { return cAlternatives; }

		//Plus="+"
		public EnumLiteralDeclaration getPlusEnumLiteralDeclaration_0() { return cPlusEnumLiteralDeclaration_0; }

		//"+"
		public Keyword getPlusPlusSignKeyword_0_0() { return cPlusPlusSignKeyword_0_0; }

		//Minus="-"
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration_1() { return cMinusEnumLiteralDeclaration_1; }

		//"-"
		public Keyword getMinusHyphenMinusKeyword_1_0() { return cMinusHyphenMinusKeyword_1_0; }
	}

	public class UnaryAddingOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "UnaryAddingOperator");
		private final EnumLiteralDeclaration cMinusEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cMinusHyphenMinusKeyword_0 = (Keyword)cMinusEnumLiteralDeclaration.eContents().get(0);
		
		//enum UnaryAddingOperator returns ba::UnaryAddingOperator:
		//	Minus="-";
		public EnumRule getRule() { return rule; }

		//Minus="-"
		public EnumLiteralDeclaration getMinusEnumLiteralDeclaration() { return cMinusEnumLiteralDeclaration; }

		//"-"
		public Keyword getMinusHyphenMinusKeyword_0() { return cMinusHyphenMinusKeyword_0; }
	}

	public class LogicalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "LogicalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cAndEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cAndAndKeyword_0_0 = (Keyword)cAndEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOrEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOrOrKeyword_1_0 = (Keyword)cOrEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cXorEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cXorXorKeyword_2_0 = (Keyword)cXorEnumLiteralDeclaration_2.eContents().get(0);
		
		//// logical_operator ::= and | or | xor
		//enum LogicalOperator returns ba::LogicalOperator:
		//	And="and" | Or="or" | Xor="xor";
		public EnumRule getRule() { return rule; }

		//And="and" | Or="or" | Xor="xor"
		public Alternatives getAlternatives() { return cAlternatives; }

		//And="and"
		public EnumLiteralDeclaration getAndEnumLiteralDeclaration_0() { return cAndEnumLiteralDeclaration_0; }

		//"and"
		public Keyword getAndAndKeyword_0_0() { return cAndAndKeyword_0_0; }

		//Or="or"
		public EnumLiteralDeclaration getOrEnumLiteralDeclaration_1() { return cOrEnumLiteralDeclaration_1; }

		//"or"
		public Keyword getOrOrKeyword_1_0() { return cOrOrKeyword_1_0; }

		//Xor="xor"
		public EnumLiteralDeclaration getXorEnumLiteralDeclaration_2() { return cXorEnumLiteralDeclaration_2; }

		//"xor"
		public Keyword getXorXorKeyword_2_0() { return cXorXorKeyword_2_0; }
	}

	public class RelationalOperatorElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "RelationalOperator");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cEqualEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cEqualEqualsSignKeyword_0_0 = (Keyword)cEqualEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cNotEqualEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cNotEqualExclamationMarkEqualsSignKeyword_1_0 = (Keyword)cNotEqualEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cLessThanEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cLessThanLessThanSignKeyword_2_0 = (Keyword)cLessThanEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cLessOrEqualThanEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cLessOrEqualThanLessThanSignEqualsSignKeyword_3_0 = (Keyword)cLessOrEqualThanEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterThanEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cGreaterThanGreaterThanSignKeyword_4_0 = (Keyword)cGreaterThanEnumLiteralDeclaration_4.eContents().get(0);
		private final EnumLiteralDeclaration cGreaterOrEqualThanEnumLiteralDeclaration_5 = (EnumLiteralDeclaration)cAlternatives.eContents().get(5);
		private final Keyword cGreaterOrEqualThanGreaterThanSignEqualsSignKeyword_5_0 = (Keyword)cGreaterOrEqualThanEnumLiteralDeclaration_5.eContents().get(0);
		
		//// relational_operator ::= = | != | < | <= | > | >=
		//enum RelationalOperator returns ba::RelationalOperator:
		//	Equal="=" | NotEqual="!=" | LessThan="<" | LessOrEqualThan="<=" | GreaterThan=">" | GreaterOrEqualThan=">=";
		public EnumRule getRule() { return rule; }

		//Equal="=" | NotEqual="!=" | LessThan="<" | LessOrEqualThan="<=" | GreaterThan=">" | GreaterOrEqualThan=">="
		public Alternatives getAlternatives() { return cAlternatives; }

		//Equal="="
		public EnumLiteralDeclaration getEqualEnumLiteralDeclaration_0() { return cEqualEnumLiteralDeclaration_0; }

		//"="
		public Keyword getEqualEqualsSignKeyword_0_0() { return cEqualEqualsSignKeyword_0_0; }

		//NotEqual="!="
		public EnumLiteralDeclaration getNotEqualEnumLiteralDeclaration_1() { return cNotEqualEnumLiteralDeclaration_1; }

		//"!="
		public Keyword getNotEqualExclamationMarkEqualsSignKeyword_1_0() { return cNotEqualExclamationMarkEqualsSignKeyword_1_0; }

		//LessThan="<"
		public EnumLiteralDeclaration getLessThanEnumLiteralDeclaration_2() { return cLessThanEnumLiteralDeclaration_2; }

		//"<"
		public Keyword getLessThanLessThanSignKeyword_2_0() { return cLessThanLessThanSignKeyword_2_0; }

		//LessOrEqualThan="<="
		public EnumLiteralDeclaration getLessOrEqualThanEnumLiteralDeclaration_3() { return cLessOrEqualThanEnumLiteralDeclaration_3; }

		//"<="
		public Keyword getLessOrEqualThanLessThanSignEqualsSignKeyword_3_0() { return cLessOrEqualThanLessThanSignEqualsSignKeyword_3_0; }

		//GreaterThan=">"
		public EnumLiteralDeclaration getGreaterThanEnumLiteralDeclaration_4() { return cGreaterThanEnumLiteralDeclaration_4; }

		//">"
		public Keyword getGreaterThanGreaterThanSignKeyword_4_0() { return cGreaterThanGreaterThanSignKeyword_4_0; }

		//GreaterOrEqualThan=">="
		public EnumLiteralDeclaration getGreaterOrEqualThanEnumLiteralDeclaration_5() { return cGreaterOrEqualThanEnumLiteralDeclaration_5; }

		//">="
		public Keyword getGreaterOrEqualThanGreaterThanSignEqualsSignKeyword_5_0() { return cGreaterOrEqualThanGreaterThanSignEqualsSignKeyword_5_0; }
	}
	
	private final AnnexSubclauseElements pAnnexSubclause;
	private final BehaviorAnnexSubclauseElements pBehaviorAnnexSubclause;
	private final BehaviorVariableSetElements pBehaviorVariableSet;
	private final BehaviorVariableElements pBehaviorVariable;
	private final BehaviorStateSetElements pBehaviorStateSet;
	private final BehaviorStateElements pBehaviorState;
	private final BehaviorTransitionElements pBehaviorTransition;
	private final BehaviorActionBlockElements pBehaviorActionBlock;
	private final BehaviorActionsElements pBehaviorActions;
	private final BehaviorActionSequenceElements pBehaviorActionSequence;
	private final BehaviorActionSetElements pBehaviorActionSet;
	private final BehaviorActionElements pBehaviorAction;
	private final BasicActionElements pBasicAction;
	private final AssignmentActionElements pAssignmentAction;
	private final AnyElements pAny;
	private final TargetElements pTarget;
	private final CommunicationActionElements pCommunicationAction;
	private final QualifiedNamedElementElements pQualifiedNamedElement;
	private final QualifiedIndentifierElements pQualifiedIndentifier;
	private final IdentifierElements pIdentifier;
	private final NameSpaceElements pNameSpace;
	private final QualifiedNameElements pQualifiedName;
	private final ReferenceElements pReference;
	private final ArrayIdentifierElements pArrayIdentifier;
	private final ParameterLabelElements pParameterLabel;
	private final TimedActionElements pTimedAction;
	private final IfStatementElements pIfStatement;
	private final ElseIfStatementElements pElseIfStatement;
	private final ElseStatementElements pElseStatement;
	private final ForOrForAllStatementElements pForOrForAllStatement;
	private final IterativeVariableElements pIterativeVariable;
	private final ElementValuesElements pElementValues;
	private final WhileOrDoUntilStatementElements pWhileOrDoUntilStatement;
	private final ValueExpressionElements pValueExpression;
	private final RelationElements pRelation;
	private final SimpleExpressionElements pSimpleExpression;
	private final TermElements pTerm;
	private final FactorElements pFactor;
	private final ValueElements pValue;
	private final ValueVariableElements pValueVariable;
	private final ValueVariableReferenceElements pValueVariableReference;
	private final PortDequeueValueElements pPortDequeueValue;
	private final PortCountValueElements pPortCountValue;
	private final PortFreshValueElements pPortFreshValue;
	private final ValueConstantElements pValueConstant;
	private final BehaviorStringLiteralElements pBehaviorStringLiteral;
	private final BehaviorNumericLiteralElements pBehaviorNumericLiteral;
	private final BehaviorBooleanLiteralElements pBehaviorBooleanLiteral;
	private final PropertyReferenceElements pPropertyReference;
	private final PropertyNameElements pPropertyName;
	private final BinaryNumericOperatorElements unknownRuleBinaryNumericOperator;
	private final UnaryNumericOperatorElements unknownRuleUnaryNumericOperator;
	private final UnaryBooleanOperatorElements unknownRuleUnaryBooleanOperator;
	private final MultiplyingOperatorElements unknownRuleMultiplyingOperator;
	private final BinaryAddingOperatorElements unknownRuleBinaryAddingOperator;
	private final UnaryAddingOperatorElements unknownRuleUnaryAddingOperator;
	private final LogicalOperatorElements unknownRuleLogicalOperator;
	private final RelationalOperatorElements unknownRuleRelationalOperator;
	private final IntegerRangeElements pIntegerRange;
	private final IntegerValueElements pIntegerValue;
	private final IntegerValueConstantElements pIntegerValueConstant;
	private final IntegerValueVariableElements pIntegerValueVariable;
	private final BehaviorIntegerLiteralElements pBehaviorIntegerLiteral;
	private final BehaviorTimeElements pBehaviorTime;
	private final BehaviorConditionElements pBehaviorCondition;
	private final ExternalConditionElements pExternalCondition;
	private final InternalConditionElements pInternalCondition;
	private final ExecuteConditionElements pExecuteCondition;
	private final TimeoutExecuteConditionElements pTimeoutExecuteCondition;
	private final OthewiseConditionElements pOthewiseCondition;
	private final DispatchConditionElements pDispatchCondition;
	private final DispatchRelativeTimeoutCatchElements pDispatchRelativeTimeoutCatch;
	private final TimeoutResetPortElements pTimeoutResetPort;
	private final CompletionRelativeTimeoutCatchElements pCompletionRelativeTimeoutCatch;
	private final FrozenPortsElements pFrozenPorts;
	private final DispatchTriggerLogicalExpressionElements pDispatchTriggerLogicalExpression;
	private final DispatchConjunctionElements pDispatchConjunction;
	private final DispatchTriggerConditionElements pDispatchTriggerCondition;
	private final DispatchTriggerElements pDispatchTrigger;
	private final StopDispatchTriggerConditionElements pStopDispatchTriggerCondition;
	
	private final Grammar grammar;

	private final PropertiesGrammarAccess gaProperties;

	@Inject
	public BaGrammarAccess(GrammarProvider grammarProvider,
		PropertiesGrammarAccess gaProperties) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaProperties = gaProperties;
		this.pAnnexSubclause = new AnnexSubclauseElements();
		this.pBehaviorAnnexSubclause = new BehaviorAnnexSubclauseElements();
		this.pBehaviorVariableSet = new BehaviorVariableSetElements();
		this.pBehaviorVariable = new BehaviorVariableElements();
		this.pBehaviorStateSet = new BehaviorStateSetElements();
		this.pBehaviorState = new BehaviorStateElements();
		this.pBehaviorTransition = new BehaviorTransitionElements();
		this.pBehaviorActionBlock = new BehaviorActionBlockElements();
		this.pBehaviorActions = new BehaviorActionsElements();
		this.pBehaviorActionSequence = new BehaviorActionSequenceElements();
		this.pBehaviorActionSet = new BehaviorActionSetElements();
		this.pBehaviorAction = new BehaviorActionElements();
		this.pBasicAction = new BasicActionElements();
		this.pAssignmentAction = new AssignmentActionElements();
		this.pAny = new AnyElements();
		this.pTarget = new TargetElements();
		this.pCommunicationAction = new CommunicationActionElements();
		this.pQualifiedNamedElement = new QualifiedNamedElementElements();
		this.pQualifiedIndentifier = new QualifiedIndentifierElements();
		this.pIdentifier = new IdentifierElements();
		this.pNameSpace = new NameSpaceElements();
		this.pQualifiedName = new QualifiedNameElements();
		this.pReference = new ReferenceElements();
		this.pArrayIdentifier = new ArrayIdentifierElements();
		this.pParameterLabel = new ParameterLabelElements();
		this.pTimedAction = new TimedActionElements();
		this.pIfStatement = new IfStatementElements();
		this.pElseIfStatement = new ElseIfStatementElements();
		this.pElseStatement = new ElseStatementElements();
		this.pForOrForAllStatement = new ForOrForAllStatementElements();
		this.pIterativeVariable = new IterativeVariableElements();
		this.pElementValues = new ElementValuesElements();
		this.pWhileOrDoUntilStatement = new WhileOrDoUntilStatementElements();
		this.pValueExpression = new ValueExpressionElements();
		this.pRelation = new RelationElements();
		this.pSimpleExpression = new SimpleExpressionElements();
		this.pTerm = new TermElements();
		this.pFactor = new FactorElements();
		this.pValue = new ValueElements();
		this.pValueVariable = new ValueVariableElements();
		this.pValueVariableReference = new ValueVariableReferenceElements();
		this.pPortDequeueValue = new PortDequeueValueElements();
		this.pPortCountValue = new PortCountValueElements();
		this.pPortFreshValue = new PortFreshValueElements();
		this.pValueConstant = new ValueConstantElements();
		this.pBehaviorStringLiteral = new BehaviorStringLiteralElements();
		this.pBehaviorNumericLiteral = new BehaviorNumericLiteralElements();
		this.pBehaviorBooleanLiteral = new BehaviorBooleanLiteralElements();
		this.pPropertyReference = new PropertyReferenceElements();
		this.pPropertyName = new PropertyNameElements();
		this.unknownRuleBinaryNumericOperator = new BinaryNumericOperatorElements();
		this.unknownRuleUnaryNumericOperator = new UnaryNumericOperatorElements();
		this.unknownRuleUnaryBooleanOperator = new UnaryBooleanOperatorElements();
		this.unknownRuleMultiplyingOperator = new MultiplyingOperatorElements();
		this.unknownRuleBinaryAddingOperator = new BinaryAddingOperatorElements();
		this.unknownRuleUnaryAddingOperator = new UnaryAddingOperatorElements();
		this.unknownRuleLogicalOperator = new LogicalOperatorElements();
		this.unknownRuleRelationalOperator = new RelationalOperatorElements();
		this.pIntegerRange = new IntegerRangeElements();
		this.pIntegerValue = new IntegerValueElements();
		this.pIntegerValueConstant = new IntegerValueConstantElements();
		this.pIntegerValueVariable = new IntegerValueVariableElements();
		this.pBehaviorIntegerLiteral = new BehaviorIntegerLiteralElements();
		this.pBehaviorTime = new BehaviorTimeElements();
		this.pBehaviorCondition = new BehaviorConditionElements();
		this.pExternalCondition = new ExternalConditionElements();
		this.pInternalCondition = new InternalConditionElements();
		this.pExecuteCondition = new ExecuteConditionElements();
		this.pTimeoutExecuteCondition = new TimeoutExecuteConditionElements();
		this.pOthewiseCondition = new OthewiseConditionElements();
		this.pDispatchCondition = new DispatchConditionElements();
		this.pDispatchRelativeTimeoutCatch = new DispatchRelativeTimeoutCatchElements();
		this.pTimeoutResetPort = new TimeoutResetPortElements();
		this.pCompletionRelativeTimeoutCatch = new CompletionRelativeTimeoutCatchElements();
		this.pFrozenPorts = new FrozenPortsElements();
		this.pDispatchTriggerLogicalExpression = new DispatchTriggerLogicalExpressionElements();
		this.pDispatchConjunction = new DispatchConjunctionElements();
		this.pDispatchTriggerCondition = new DispatchTriggerConditionElements();
		this.pDispatchTrigger = new DispatchTriggerElements();
		this.pStopDispatchTriggerCondition = new StopDispatchTriggerConditionElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("org.osate.xtext.Ba".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	

	public PropertiesGrammarAccess getPropertiesGrammarAccess() {
		return gaProperties;
	}

	
	////import "http://www.eclipse.org/emf/2002/Ecore" as ecore
	//AnnexSubclause returns ba::BehaviorAnnex:
	//	BehaviorAnnexSubclause;
	public AnnexSubclauseElements getAnnexSubclauseAccess() {
		return pAnnexSubclause;
	}
	
	public ParserRule getAnnexSubclauseRule() {
		return getAnnexSubclauseAccess().getRule();
	}

	//// behavior_annex ::=
	////   [ variables { behavior_variable }+ ]
	////   [ states { behavior_state }+ ]
	////   [ transitions { behavior_transition }+ ]
	//BehaviorAnnexSubclause returns ba::BehaviorAnnex: //'{**'
	//	{ba::BehaviorAnnex} ("variables" (variables+=BehaviorVariableSet ("," variables+=BehaviorVariableSet)*)+)? "states"
	//	(states+=BehaviorStateSet ("," states+=BehaviorStateSet)*)+ "transitions" (transitions+=BehaviorTransition (","
	//	transitions+=BehaviorTransition)*)+;
	public BehaviorAnnexSubclauseElements getBehaviorAnnexSubclauseAccess() {
		return pBehaviorAnnexSubclause;
	}
	
	public ParserRule getBehaviorAnnexSubclauseRule() {
		return getBehaviorAnnexSubclauseAccess().getRule();
	}

	//// behavior_variable ::= 
	////   local_variable_declarator { , local_variable_declarator }* 
	////   : data_unique_component_classifier_reference;
	//BehaviorVariableSet returns declarative::DeclarativeBehaviorVariableSet:
	//	variables+=BehaviorVariable ("," variables+=BehaviorVariable)* ":" dataClassifier=[aadl2::DataClassifier] ("{" // TODO: property association reference does not work
	//	//			  (ownedPropertyAssociation+=PropertyAssociation)+
	//	"}")? ";";
	public BehaviorVariableSetElements getBehaviorVariableSetAccess() {
		return pBehaviorVariableSet;
	}
	
	public ParserRule getBehaviorVariableSetRule() {
		return getBehaviorVariableSetAccess().getRule();
	}

	//BehaviorVariable returns ba::BehaviorVariable:
	//	name=ID;
	public BehaviorVariableElements getBehaviorVariableAccess() {
		return pBehaviorVariable;
	}
	
	public ParserRule getBehaviorVariableRule() {
		return getBehaviorVariableAccess().getRule();
	}

	//BehaviorStateSet returns declarative::DeclarativeBehaviorStateSet:
	//	states+=BehaviorState ("," states+=BehaviorState)* ":" initial?="initial"? complete?="complete"? final?="final"?
	//	"state" ";";
	public BehaviorStateSetElements getBehaviorStateSetAccess() {
		return pBehaviorStateSet;
	}
	
	public ParserRule getBehaviorStateSetRule() {
		return getBehaviorStateSetAccess().getRule();
	}

	//BehaviorState returns ba::BehaviorState:
	//	name=ID;
	public BehaviorStateElements getBehaviorStateAccess() {
		return pBehaviorState;
	}
	
	public ParserRule getBehaviorStateRule() {
		return getBehaviorStateAccess().getRule();
	}

	//// behavior_transition ::=
	////   [ transition_identifier [ [ behavior_transition_priority ] ] : ]
	////   source_state_identifier { , source_state_identifier }*
	////    -[ behavior_condition ]->
	////   destination_state_identifier [ behavior_action_block ] ;
	//BehaviorTransition returns declarative::DeclarativeBehaviorTransition:
	//	(name=ID ("[" priority=INTVALUE "]")? ":")? srcStates+=[ba::BehaviorState] ("," srcStates+=[ba::BehaviorState])* "-["
	//	condition=BehaviorCondition "]->" destinationState=[ba::BehaviorState] actionBlock=BehaviorActionBlock? ";";
	public BehaviorTransitionElements getBehaviorTransitionAccess() {
		return pBehaviorTransition;
	}
	
	public ParserRule getBehaviorTransitionRule() {
		return getBehaviorTransitionAccess().getRule();
	}

	//BehaviorActionBlock returns ba::BehaviorActionBlock:
	//	"{" content=BehaviorActions "}" ("timeout" timeout=BehaviorTime)?;
	public BehaviorActionBlockElements getBehaviorActionBlockAccess() {
		return pBehaviorActionBlock;
	}
	
	public ParserRule getBehaviorActionBlockRule() {
		return getBehaviorActionBlockAccess().getRule();
	}

	//BehaviorActions returns ba::BehaviorActions:
	//	BehaviorActionSequence | => BehaviorActionSet | => BehaviorAction;
	public BehaviorActionsElements getBehaviorActionsAccess() {
		return pBehaviorActions;
	}
	
	public ParserRule getBehaviorActionsRule() {
		return getBehaviorActionsAccess().getRule();
	}

	//BehaviorActionSequence returns ba::BehaviorActionSequence:
	//	(actions+=BehaviorAction ";")+ actions+=BehaviorAction;
	public BehaviorActionSequenceElements getBehaviorActionSequenceAccess() {
		return pBehaviorActionSequence;
	}
	
	public ParserRule getBehaviorActionSequenceRule() {
		return getBehaviorActionSequenceAccess().getRule();
	}

	//BehaviorActionSet returns ba::BehaviorActionSet:
	//	(actions+=BehaviorAction ",")+ actions+=BehaviorAction;
	public BehaviorActionSetElements getBehaviorActionSetAccess() {
		return pBehaviorActionSet;
	}
	
	public ParserRule getBehaviorActionSetRule() {
		return getBehaviorActionSetAccess().getRule();
	}

	//BehaviorAction returns ba::BehaviorAction:
	//	BasicAction | IfStatement | ForOrForAllStatement | WhileOrDoUntilStatement;
	public BehaviorActionElements getBehaviorActionAccess() {
		return pBehaviorAction;
	}
	
	public ParserRule getBehaviorActionRule() {
		return getBehaviorActionAccess().getRule();
	}

	//// basic_action ::=
	////   assignment_action
	//// | communication_action
	//// | timed_action
	//BasicAction returns ba::BasicAction:
	//	AssignmentAction | CommunicationAction | TimedAction;
	public BasicActionElements getBasicActionAccess() {
		return pBasicAction;
	}
	
	public ParserRule getBasicActionRule() {
		return getBasicActionAccess().getRule();
	}

	//// assignment_action ::=
	////   target := ( value_expression | any )
	//AssignmentAction returns ba::AssignmentAction:
	//	target=Target ":=" (valueExpression=ValueExpression | valueExpression=Any);
	public AssignmentActionElements getAssignmentActionAccess() {
		return pAssignmentAction;
	}
	
	public ParserRule getAssignmentActionRule() {
		return getAssignmentActionAccess().getRule();
	}

	//Any returns ba::Any:
	//	{ba::Any} "any";
	public AnyElements getAnyAccess() {
		return pAny;
	}
	
	public ParserRule getAnyRule() {
		return getAnyAccess().getRule();
	}

	//// target ::=
	//// | outgoing_port_name
	//// | outgoing_subprogram_parameter
	//// | data_component_reference
	//// | outgoing_port_prototype_name
	//Target returns ba::Target:
	//	Reference;
	public TargetElements getTargetAccess() {
		return pTarget;
	}
	
	public ParserRule getTargetRule() {
		return getTargetAccess().getRule();
	}

	//// communication_action ::=
	////   subprogram_prototype_name ! [ ( subprogram_parameter_list ) ]
	//// | required_subprogram_access_name ! [ ( subprogram_parameter_list ) ]
	//// | subprogram_classifier_name ! [ ( subprogram_parameter_list ) ]
	//// | output_port_name ! [ ( value_expression ) ]
	//// | input_port_name >>
	//// | input_port_name ? [ ( target ) ]
	//// | required_data_access_name !<
	//// | required_data_access_name !>
	//// | *!<
	//// | *!>
	//// | required_data_access_name . provided_subprogram_access_name ! [ ( subprogram_parameter_list ) ]
	//// | data_subcomponent_name . provided_subprogram_access_name ! [ ( subprogram_parameter_list ) ]
	//// | local_variable_name . provided_subprogram_access_name ! [ ( subprogram_parameter_list ) ]
	////    |
	////      qualifiedName=QualifiedNamedElement '!' ('(' parameters+=ParameterLabel (',' parameters+=ParameterLabel)* ')')?
	//CommunicationAction returns declarative::CommAction:
	//	qualifiedName=QualifiedNamedElement "!" ("(" parameters+=ParameterLabel ("," parameters+=ParameterLabel)* ")")? |
	//	reference=Reference ("?" ("(" target=Target ")")? | ">>" | "!<" | "!>" | "!" ("(" parameters+=ParameterLabel (","
	//	parameters+=ParameterLabel)* ")")? | "?" ("(" target=Target ")")? | "!" ("(" parameters+=ParameterLabel (","
	//	parameters+=ParameterLabel)* ")")?) | ("*!<" | "*!>");
	public CommunicationActionElements getCommunicationActionAccess() {
		return pCommunicationAction;
	}
	
	public ParserRule getCommunicationActionRule() {
		return getCommunicationActionAccess().getRule();
	}

	//QualifiedNamedElement returns declarative::QualifiedNamedElement:
	//	baNamespace=QualifiedIndentifier baName=Identifier;
	public QualifiedNamedElementElements getQualifiedNamedElementAccess() {
		return pQualifiedNamedElement;
	}
	
	public ParserRule getQualifiedNamedElementRule() {
		return getQualifiedNamedElementAccess().getRule();
	}

	//QualifiedIndentifier returns declarative::Identifier:
	//	id=NameSpace;
	public QualifiedIndentifierElements getQualifiedIndentifierAccess() {
		return pQualifiedIndentifier;
	}
	
	public ParserRule getQualifiedIndentifierRule() {
		return getQualifiedIndentifierAccess().getRule();
	}

	//Identifier returns declarative::Identifier:
	//	id=QualifiedName;
	public IdentifierElements getIdentifierAccess() {
		return pIdentifier;
	}
	
	public ParserRule getIdentifierRule() {
		return getIdentifierAccess().getRule();
	}

	//NameSpace:
	//	(ID "::")+;
	public NameSpaceElements getNameSpaceAccess() {
		return pNameSpace;
	}
	
	public ParserRule getNameSpaceRule() {
		return getNameSpaceAccess().getRule();
	}

	//QualifiedName:
	//	ID ("." ID)*;
	public QualifiedNameElements getQualifiedNameAccess() {
		return pQualifiedName;
	}
	
	public ParserRule getQualifiedNameRule() {
		return getQualifiedNameAccess().getRule();
	}

	//Reference returns declarative::Reference:
	//	ids+=ArrayIdentifier ("." ids+=ArrayIdentifier)*;
	public ReferenceElements getReferenceAccess() {
		return pReference;
	}
	
	public ParserRule getReferenceRule() {
		return getReferenceAccess().getRule();
	}

	//// array_identifier ::=
	////   identifier { integer_value }*
	//ArrayIdentifier returns declarative::ArrayableIdentifier:
	//	id=ID ("[" arrayIndexes+=IntegerValue "]")*;
	public ArrayIdentifierElements getArrayIdentifierAccess() {
		return pArrayIdentifier;
	}
	
	public ParserRule getArrayIdentifierRule() {
		return getArrayIdentifierAccess().getRule();
	}

	//ParameterLabel returns ba::ParameterLabel:
	//	ValueExpression;
	public ParameterLabelElements getParameterLabelAccess() {
		return pParameterLabel;
	}
	
	public ParserRule getParameterLabelRule() {
		return getParameterLabelAccess().getRule();
	}

	//// timed_action ::= 
	////   computation ( behavior_time [ .. behavior_time ] ) [ in_binding ]
	//TimedAction returns ba::TimedAction:
	//	"computation" "(" lowerTime=BehaviorTime (".." upperTime=BehaviorTime)? ")" ("in" "binding"
	//	processorClassifier+=[aadl2::ProcessorClassifier] ("," processorClassifier+=[aadl2::ProcessorClassifier])*)?;
	public TimedActionElements getTimedActionAccess() {
		return pTimedAction;
	}
	
	public ParserRule getTimedActionRule() {
		return getTimedActionAccess().getRule();
	}

	//IfStatement returns ba::IfStatement:
	//	"if" "(" logicalValueExpression=ValueExpression ")" behaviorActions=BehaviorActions (elseStatement=ElseStatement |
	//	elseStatement=ElseIfStatement)? "endif";
	public IfStatementElements getIfStatementAccess() {
		return pIfStatement;
	}
	
	public ParserRule getIfStatementRule() {
		return getIfStatementAccess().getRule();
	}

	//ElseIfStatement returns ba::IfStatement:
	//	elif?="elsif" "(" logicalValueExpression=ValueExpression ")" behaviorActions=BehaviorActions;
	public ElseIfStatementElements getElseIfStatementAccess() {
		return pElseIfStatement;
	}
	
	public ParserRule getElseIfStatementRule() {
		return getElseIfStatementAccess().getRule();
	}

	//ElseStatement returns ba::ElseStatement:
	//	"else" behaviorActions=BehaviorActions;
	public ElseStatementElements getElseStatementAccess() {
		return pElseStatement;
	}
	
	public ParserRule getElseStatementRule() {
		return getElseStatementAccess().getRule();
	}

	//ForOrForAllStatement returns ba::ForOrForAllStatement:
	//	("for" | forAll?="forall") "(" iterativeVariable=IterativeVariable "in" iteratedValues=ElementValues ")" "{"
	//	behaviorActions=BehaviorActions "}";
	public ForOrForAllStatementElements getForOrForAllStatementAccess() {
		return pForOrForAllStatement;
	}
	
	public ParserRule getForOrForAllStatementRule() {
		return getForOrForAllStatementAccess().getRule();
	}

	//IterativeVariable returns ba::IterativeVariable:
	//	name=ID ":" dataClassifier=[aadl2::DataClassifier];
	public IterativeVariableElements getIterativeVariableAccess() {
		return pIterativeVariable;
	}
	
	public ParserRule getIterativeVariableRule() {
		return getIterativeVariableAccess().getRule();
	}

	//// element_values ::=
	////   integer_range
	//// | event_data_port_name
	//// | array_data_component_reference
	//ElementValues returns ba::ElementValues:
	//	IntegerRange | Reference;
	public ElementValuesElements getElementValuesAccess() {
		return pElementValues;
	}
	
	public ParserRule getElementValuesRule() {
		return getElementValuesAccess().getRule();
	}

	//WhileOrDoUntilStatement returns ba::WhileOrDoUntilStatement:
	//	"while" "(" logicalValueExpression=ValueExpression ")" "{" behaviorActions=BehaviorActions "}" | doUntil?="do"
	//	behaviorActions=BehaviorActions "until" "(" logicalValueExpression=ValueExpression ")";
	public WhileOrDoUntilStatementElements getWhileOrDoUntilStatementAccess() {
		return pWhileOrDoUntilStatement;
	}
	
	public ParserRule getWhileOrDoUntilStatementRule() {
		return getWhileOrDoUntilStatementAccess().getRule();
	}

	//// value_expression ::=
	////   relation { logical_operator relation }*
	//ValueExpression returns ba::ValueExpression:
	//	relations+=Relation (logicalOperators+=LogicalOperator relations+=Relation)?;
	public ValueExpressionElements getValueExpressionAccess() {
		return pValueExpression;
	}
	
	public ParserRule getValueExpressionRule() {
		return getValueExpressionAccess().getRule();
	}

	//// relation ::=
	////   simple_expression [ relational_operator simple_expression ]
	//Relation returns ba::Relation:
	//	firstExpression=SimpleExpression (relationalOperator=RelationalOperator secondExpression=SimpleExpression)?;
	public RelationElements getRelationAccess() {
		return pRelation;
	}
	
	public ParserRule getRelationRule() {
		return getRelationAccess().getRule();
	}

	//// simple_expression ::=
	////   [ unary_adding_operator ] term { binary_adding_operator term }*
	//SimpleExpression returns ba::SimpleExpression:
	//	unaryAddingOperator=UnaryAddingOperator? terms+=Term (binaryAddingOperators+=BinaryAddingOperator terms+=Term)*;
	public SimpleExpressionElements getSimpleExpressionAccess() {
		return pSimpleExpression;
	}
	
	public ParserRule getSimpleExpressionRule() {
		return getSimpleExpressionAccess().getRule();
	}

	//// term ::=
	////   factor { multiplying_operator factor }*
	//Term returns ba::Term:
	//	factors+=Factor (multiplyingOperators+=MultiplyingOperator factors+=Factor)*;
	public TermElements getTermAccess() {
		return pTerm;
	}
	
	public ParserRule getTermRule() {
		return getTermAccess().getRule();
	}

	//// factor ::=
	////   value [ binary_numeric_operator value ]
	//// | unary_numeric_operator value
	//// | unary_boolean_operator value
	//Factor returns ba::Factor:
	//	firstValue=Value (binaryNumericOperator=BinaryNumericOperator secondValue=Value)? |
	//	unaryNumericOperator=UnaryNumericOperator firstValue=Value | unaryBooleanOperator=UnaryBooleanOperator
	//	firstValue=Value;
	public FactorElements getFactorAccess() {
		return pFactor;
	}
	
	public ParserRule getFactorRule() {
		return getFactorAccess().getRule();
	}

	//// value ::= value_variable
	//// | value_constant
	//// | ( value_expression )
	//Value returns ba::Value:
	//	ValueConstant | => ValueVariable | "(" ValueExpression ")";
	public ValueElements getValueAccess() {
		return pValue;
	}
	
	public ParserRule getValueRule() {
		return getValueAccess().getRule();
	}

	//// value_variable ::=
	////   incoming_port_name
	//// | incoming_port_name ?
	//// | incoming_subprogram_parameter
	//// | incoming_port_prototype_name
	//// | data_component_reference
	//// | port_name ’ count
	//// | port_name ’ fresh
	//ValueVariable returns ba::ValueVariable:
	//	PortDequeueValue | => PortCountValue | => PortFreshValue | => ValueVariableReference;
	public ValueVariableElements getValueVariableAccess() {
		return pValueVariable;
	}
	
	public ParserRule getValueVariableRule() {
		return getValueVariableAccess().getRule();
	}

	//ValueVariableReference returns declarative::Reference:
	//	Reference;
	public ValueVariableReferenceElements getValueVariableReferenceAccess() {
		return pValueVariableReference;
	}
	
	public ParserRule getValueVariableReferenceRule() {
		return getValueVariableReferenceAccess().getRule();
	}

	//PortDequeueValue returns declarative::Reference:
	//	Reference "?";
	public PortDequeueValueElements getPortDequeueValueAccess() {
		return pPortDequeueValue;
	}
	
	public ParserRule getPortDequeueValueRule() {
		return getPortDequeueValueAccess().getRule();
	}

	//PortCountValue returns declarative::Reference:
	//	Reference "\'count";
	public PortCountValueElements getPortCountValueAccess() {
		return pPortCountValue;
	}
	
	public ParserRule getPortCountValueRule() {
		return getPortCountValueAccess().getRule();
	}

	//PortFreshValue returns declarative::Reference:
	//	Reference "\'fresh";
	public PortFreshValueElements getPortFreshValueAccess() {
		return pPortFreshValue;
	}
	
	public ParserRule getPortFreshValueRule() {
		return getPortFreshValueAccess().getRule();
	}

	//// value_constant ::= 
	////   boolean_literal
	//// | numeric_literal 
	//// | string_literal
	//// | property_constant
	//// | property_reference
	//ValueConstant returns ba::ValueConstant: // Ambiguity between qualified or unqualified  property constant and
	//// qualified or unqualified property reference with only one property name and
	//// no property field. so property constants are parsed as property references
	//// (see property reference). 
	//	BehaviorNumericLiteral | PropertyReference | BehaviorBooleanLiteral | BehaviorStringLiteral;
	public ValueConstantElements getValueConstantAccess() {
		return pValueConstant;
	}
	
	public ParserRule getValueConstantRule() {
		return getValueConstantAccess().getRule();
	}

	//BehaviorStringLiteral returns ba::BehaviorStringLiteral:
	//	value=NoQuoteString;
	public BehaviorStringLiteralElements getBehaviorStringLiteralAccess() {
		return pBehaviorStringLiteral;
	}
	
	public ParserRule getBehaviorStringLiteralRule() {
		return getBehaviorStringLiteralAccess().getRule();
	}

	//// numeric_literal ::= <refer to [AS5506A 15.4]>
	//// numeric literal without optional sign and unit
	//BehaviorNumericLiteral returns ba::BehaviorIntegerLiteral:
	//	{ba::BehaviorIntegerLiteral} value=SignedInt;
	public BehaviorNumericLiteralElements getBehaviorNumericLiteralAccess() {
		return pBehaviorNumericLiteral;
	}
	
	public ParserRule getBehaviorNumericLiteralRule() {
		return getBehaviorNumericLiteralAccess().getRule();
	}

	//BehaviorBooleanLiteral returns ba::BehaviorBooleanLiteral:
	//	{ba::BehaviorBooleanLiteral} (value?="true" | "false");
	public BehaviorBooleanLiteralElements getBehaviorBooleanLiteralAccess() {
		return pBehaviorBooleanLiteral;
	}
	
	public ParserRule getBehaviorBooleanLiteralRule() {
		return getBehaviorBooleanLiteralAccess().getRule();
	}

	//// property_constant ::=
	////   # [ property_set_identifier :: ] property_constant_identifier
	//// property_reference ::=
	////   # [ property_set_identifier :: ] property_value_name { . field_record_property_name }*
	//// | own_component_element_reference # property_name { . field_record_property_name }*
	//// | unique_component_classifier_reference # property_name { . field_record_property_name }*
	//// component_element_reference ::=
	////   subcomponent_name
	//// | local_variable_name
	//// | binded_prototype_name
	//// | feature_name
	//// Ambiguity between qualified or unqualified  property constant and
	//// qualified or unqualified property reference with only one property name and
	//// no property field. so property constants are parsed as property references
	//// (see property reference).
	//// Ambiguity between a unique component classifier reference without namespace
	//// and a component element reference.
	//// Ambiguity between a property literal and a property name without field.
	//PropertyReference returns declarative::DeclarativePropertyReference:
	//	(propertySet?="#" ID? | (qualifiedName=QualifiedNamedElement | reference=Reference) "#") propertyNames+=PropertyName
	//	("." propertyNames+=PropertyName)*;
	public PropertyReferenceElements getPropertyReferenceAccess() {
		return pPropertyReference;
	}
	
	public ParserRule getPropertyReferenceRule() {
		return getPropertyReferenceAccess().getRule();
	}

	//// property_name ::=
	////   property_identifier [ property_field ]
	//// property_field ::=
	////   [ integer_value ]* (enumeration and list properties supported only)
	//// | . item_list_identifier (enumeration and list properties supported only)
	//// | . upper_bound (range properties supported only)
	//// | . lower_bound (range properties supported only)
	//// Ambiguity between a property literal and a property name without field.
	//PropertyName returns declarative::DeclarativePropertyName:
	//	propertyName=Identifier (("[" indexes+=IntegerValue "]")+ | "." ("upper_bound" | "lower_bound"))?;
	public PropertyNameElements getPropertyNameAccess() {
		return pPropertyName;
	}
	
	public ParserRule getPropertyNameRule() {
		return getPropertyNameAccess().getRule();
	}

	//// binary_numeric_operator ::= **
	//enum BinaryNumericOperator returns ba::BinaryNumericOperator:
	//	MultiplyMultiply="**";
	public BinaryNumericOperatorElements getBinaryNumericOperatorAccess() {
		return unknownRuleBinaryNumericOperator;
	}
	
	public EnumRule getBinaryNumericOperatorRule() {
		return getBinaryNumericOperatorAccess().getRule();
	}

	//// unary_numeric_operator ::= abs
	//enum UnaryNumericOperator returns ba::UnaryNumericOperator:
	//	Abs="abs";
	public UnaryNumericOperatorElements getUnaryNumericOperatorAccess() {
		return unknownRuleUnaryNumericOperator;
	}
	
	public EnumRule getUnaryNumericOperatorRule() {
		return getUnaryNumericOperatorAccess().getRule();
	}

	//// unary_boolean_operator ::= not
	//enum UnaryBooleanOperator returns ba::UnaryBooleanOperator:
	//	Not="not";
	public UnaryBooleanOperatorElements getUnaryBooleanOperatorAccess() {
		return unknownRuleUnaryBooleanOperator;
	}
	
	public EnumRule getUnaryBooleanOperatorRule() {
		return getUnaryBooleanOperatorAccess().getRule();
	}

	//enum MultiplyingOperator returns ba::MultiplyingOperator:
	//	Multiply="*" | Divide="/" | Mod="mod" | Rem="rem";
	public MultiplyingOperatorElements getMultiplyingOperatorAccess() {
		return unknownRuleMultiplyingOperator;
	}
	
	public EnumRule getMultiplyingOperatorRule() {
		return getMultiplyingOperatorAccess().getRule();
	}

	//enum BinaryAddingOperator returns ba::BinaryAddingOperator:
	//	Plus="+" | Minus="-";
	public BinaryAddingOperatorElements getBinaryAddingOperatorAccess() {
		return unknownRuleBinaryAddingOperator;
	}
	
	public EnumRule getBinaryAddingOperatorRule() {
		return getBinaryAddingOperatorAccess().getRule();
	}

	//enum UnaryAddingOperator returns ba::UnaryAddingOperator:
	//	Minus="-";
	public UnaryAddingOperatorElements getUnaryAddingOperatorAccess() {
		return unknownRuleUnaryAddingOperator;
	}
	
	public EnumRule getUnaryAddingOperatorRule() {
		return getUnaryAddingOperatorAccess().getRule();
	}

	//// logical_operator ::= and | or | xor
	//enum LogicalOperator returns ba::LogicalOperator:
	//	And="and" | Or="or" | Xor="xor";
	public LogicalOperatorElements getLogicalOperatorAccess() {
		return unknownRuleLogicalOperator;
	}
	
	public EnumRule getLogicalOperatorRule() {
		return getLogicalOperatorAccess().getRule();
	}

	//// relational_operator ::= = | != | < | <= | > | >=
	//enum RelationalOperator returns ba::RelationalOperator:
	//	Equal="=" | NotEqual="!=" | LessThan="<" | LessOrEqualThan="<=" | GreaterThan=">" | GreaterOrEqualThan=">=";
	public RelationalOperatorElements getRelationalOperatorAccess() {
		return unknownRuleRelationalOperator;
	}
	
	public EnumRule getRelationalOperatorRule() {
		return getRelationalOperatorAccess().getRule();
	}

	//// integer_range ::= integer_value .. integer_value
	//IntegerRange returns ba::IntegerRange:
	//	lowerIntegerValue=IntegerValue ".." upperIntegerValue=IntegerValue;
	public IntegerRangeElements getIntegerRangeAccess() {
		return pIntegerRange;
	}
	
	public ParserRule getIntegerRangeRule() {
		return getIntegerRangeAccess().getRule();
	}

	//// integer_value ::=
	////   integer_value_variable
	//// | integer_value_constant
	//IntegerValue returns ba::IntegerValue:
	//	IntegerValueConstant | IntegerValueVariable;
	public IntegerValueElements getIntegerValueAccess() {
		return pIntegerValue;
	}
	
	public ParserRule getIntegerValueRule() {
		return getIntegerValueAccess().getRule();
	}

	//IntegerValueConstant returns ba::IntegerValueConstant:
	//	BehaviorIntegerLiteral | PropertyReference;
	public IntegerValueConstantElements getIntegerValueConstantAccess() {
		return pIntegerValueConstant;
	}
	
	public ParserRule getIntegerValueConstantRule() {
		return getIntegerValueConstantAccess().getRule();
	}

	//IntegerValueVariable returns ba::IntegerValueVariable:
	//	ValueVariableReference;
	public IntegerValueVariableElements getIntegerValueVariableAccess() {
		return pIntegerValueVariable;
	}
	
	public ParserRule getIntegerValueVariableRule() {
		return getIntegerValueVariableAccess().getRule();
	}

	//BehaviorIntegerLiteral returns ba::BehaviorIntegerLiteral:
	//	value=SignedInt;
	public BehaviorIntegerLiteralElements getBehaviorIntegerLiteralAccess() {
		return pBehaviorIntegerLiteral;
	}
	
	public ParserRule getBehaviorIntegerLiteralRule() {
		return getBehaviorIntegerLiteralAccess().getRule();
	}

	//BehaviorTime returns ba::BehaviorTime:
	//	integerValue=IntegerValue unit=[aadl2::UnitLiteral|QCREF];
	public BehaviorTimeElements getBehaviorTimeAccess() {
		return pBehaviorTime;
	}
	
	public ParserRule getBehaviorTimeRule() {
		return getBehaviorTimeAccess().getRule();
	}

	//BehaviorCondition returns ba::BehaviorCondition:
	//	DispatchCondition | ExecuteCondition | ExternalCondition | InternalCondition;
	public BehaviorConditionElements getBehaviorConditionAccess() {
		return pBehaviorCondition;
	}
	
	public ParserRule getBehaviorConditionRule() {
		return getBehaviorConditionAccess().getRule();
	}

	//ExternalCondition:
	//	"TBD_ExternalCondition";
	public ExternalConditionElements getExternalConditionAccess() {
		return pExternalCondition;
	}
	
	public ParserRule getExternalConditionRule() {
		return getExternalConditionAccess().getRule();
	}

	//InternalCondition:
	//	"TBD_InternalCondition";
	public InternalConditionElements getInternalConditionAccess() {
		return pInternalCondition;
	}
	
	public ParserRule getInternalConditionRule() {
		return getInternalConditionAccess().getRule();
	}

	//ExecuteCondition returns ba::ExecuteCondition:
	//	(ValueExpression | TimeoutExecuteCondition | OthewiseCondition)?;
	public ExecuteConditionElements getExecuteConditionAccess() {
		return pExecuteCondition;
	}
	
	public ParserRule getExecuteConditionRule() {
		return getExecuteConditionAccess().getRule();
	}

	//TimeoutExecuteCondition:
	//	"TBD_TimeoutExecuteCondition";
	public TimeoutExecuteConditionElements getTimeoutExecuteConditionAccess() {
		return pTimeoutExecuteCondition;
	}
	
	public ParserRule getTimeoutExecuteConditionRule() {
		return getTimeoutExecuteConditionAccess().getRule();
	}

	//OthewiseCondition returns ba::Otherwise:
	//	"otherwise" {ba::Otherwise};
	public OthewiseConditionElements getOthewiseConditionAccess() {
		return pOthewiseCondition;
	}
	
	public ParserRule getOthewiseConditionRule() {
		return getOthewiseConditionAccess().getRule();
	}

	//DispatchCondition returns ba::DispatchCondition:
	//	{ba::DispatchCondition} "on" "dispatch" (dispatchTriggerCondition=DispatchTriggerCondition |
	//	dispatchTriggerCondition=StopDispatchTriggerCondition | dispatchTriggerCondition=CompletionRelativeTimeoutCatch |
	//	dispatchTriggerCondition=DispatchRelativeTimeoutCatch)? ("frozen" "(" frozenPorts+=FrozenPorts (","
	//	frozenPorts+=FrozenPorts)* ")")?;
	public DispatchConditionElements getDispatchConditionAccess() {
		return pDispatchCondition;
	}
	
	public ParserRule getDispatchConditionRule() {
		return getDispatchConditionAccess().getRule();
	}

	//DispatchRelativeTimeoutCatch returns ba::DispatchRelativeTimeout:
	//	"timeout" {ba::DispatchRelativeTimeout};
	public DispatchRelativeTimeoutCatchElements getDispatchRelativeTimeoutCatchAccess() {
		return pDispatchRelativeTimeoutCatch;
	}
	
	public ParserRule getDispatchRelativeTimeoutCatchRule() {
		return getDispatchRelativeTimeoutCatchAccess().getRule();
	}

	//TimeoutResetPort returns ba::PortHolder: // TODO: holder mechanism
	//	"TBD_Timeout";
	public TimeoutResetPortElements getTimeoutResetPortAccess() {
		return pTimeoutResetPort;
	}
	
	public ParserRule getTimeoutResetPortRule() {
		return getTimeoutResetPortAccess().getRule();
	}

	//CompletionRelativeTimeoutCatch returns ba::CompletionRelativeTimeout: // TODO: add timeout ports ( ( TimeoutResetPort ( 'or' TimeoutResetPort )* ) )?
	//	"timeout" integerValue=IntegerValue unit=[aadl2::UnitLiteral];
	public CompletionRelativeTimeoutCatchElements getCompletionRelativeTimeoutCatchAccess() {
		return pCompletionRelativeTimeoutCatch;
	}
	
	public ParserRule getCompletionRelativeTimeoutCatchRule() {
		return getCompletionRelativeTimeoutCatchAccess().getRule();
	}

	//FrozenPorts returns ba::ActualPortHolder:
	//	element=[aadl2::Port];
	public FrozenPortsElements getFrozenPortsAccess() {
		return pFrozenPorts;
	}
	
	public ParserRule getFrozenPortsRule() {
		return getFrozenPortsAccess().getRule();
	}

	//DispatchTriggerLogicalExpression returns ba::DispatchTriggerLogicalExpression:
	//	dispatchConjunctions+=DispatchConjunction ("or" dispatchConjunctions+=DispatchConjunction)*;
	public DispatchTriggerLogicalExpressionElements getDispatchTriggerLogicalExpressionAccess() {
		return pDispatchTriggerLogicalExpression;
	}
	
	public ParserRule getDispatchTriggerLogicalExpressionRule() {
		return getDispatchTriggerLogicalExpressionAccess().getRule();
	}

	//DispatchConjunction returns ba::DispatchConjunction:
	//	dispatchTriggers+=DispatchTrigger ("and" dispatchTriggers+=DispatchTrigger)*;
	public DispatchConjunctionElements getDispatchConjunctionAccess() {
		return pDispatchConjunction;
	}
	
	public ParserRule getDispatchConjunctionRule() {
		return getDispatchConjunctionAccess().getRule();
	}

	//DispatchTriggerCondition returns ba::DispatchTriggerCondition:
	//	DispatchTriggerLogicalExpression;
	public DispatchTriggerConditionElements getDispatchTriggerConditionAccess() {
		return pDispatchTriggerCondition;
	}
	
	public ParserRule getDispatchTriggerConditionRule() {
		return getDispatchTriggerConditionAccess().getRule();
	}

	//DispatchTrigger returns declarative::Reference:
	//	Reference;
	public DispatchTriggerElements getDispatchTriggerAccess() {
		return pDispatchTrigger;
	}
	
	public ParserRule getDispatchTriggerRule() {
		return getDispatchTriggerAccess().getRule();
	}

	//StopDispatchTriggerCondition returns ba::DispatchTriggerConditionStop:
	//	"stop" {ba::DispatchTriggerConditionStop};
	public StopDispatchTriggerConditionElements getStopDispatchTriggerConditionAccess() {
		return pStopDispatchTriggerCondition;
	}
	
	public ParserRule getStopDispatchTriggerConditionRule() {
		return getStopDispatchTriggerConditionAccess().getRule();
	}

	//PModel returns aadl2::Element: //| BasicPropertyAssociation | PropertyAssociation
	//	ContainedPropertyAssociation;
	public PropertiesGrammarAccess.PModelElements getPModelAccess() {
		return gaProperties.getPModelAccess();
	}
	
	public ParserRule getPModelRule() {
		return getPModelAccess().getRule();
	}

	//// Properties
	//ContainedPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? (ownedValue+=OptionalModalPropertyValue
	//	("," ownedValue+=OptionalModalPropertyValue)*) ("applies" "to" appliesTo+=ContainmentPath (","
	//	appliesTo+=ContainmentPath)*)? ("in" "binding" "(" inBinding+=[aadl2::Classifier|QCREF] ")")? ";";
	public PropertiesGrammarAccess.ContainedPropertyAssociationElements getContainedPropertyAssociationAccess() {
		return gaProperties.getContainedPropertyAssociationAccess();
	}
	
	public ParserRule getContainedPropertyAssociationRule() {
		return getContainedPropertyAssociationAccess().getRule();
	}

	//PropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] ("=>" | append?="+=>") constant?="constant"? (ownedValue+=OptionalModalPropertyValue
	//	("," ownedValue+=OptionalModalPropertyValue)*) ("in" "binding" "(" inBinding+=[aadl2::Classifier|QCREF] ")")? ";";
	public PropertiesGrammarAccess.PropertyAssociationElements getPropertyAssociationAccess() {
		return gaProperties.getPropertyAssociationAccess();
	}
	
	public ParserRule getPropertyAssociationRule() {
		return getPropertyAssociationAccess().getRule();
	}

	//BasicPropertyAssociation returns aadl2::PropertyAssociation:
	//	property=[aadl2::Property|QPREF] "=>" ownedValue+=PropertyValue ";";
	public PropertiesGrammarAccess.BasicPropertyAssociationElements getBasicPropertyAssociationAccess() {
		return gaProperties.getBasicPropertyAssociationAccess();
	}
	
	public ParserRule getBasicPropertyAssociationRule() {
		return getBasicPropertyAssociationAccess().getRule();
	}

	////	( 'annex' containmentPathElement+=AnnexPath )?
	//ContainmentPath returns aadl2::ContainedNamedElement:
	//	path=ContainmentPathElement;
	public PropertiesGrammarAccess.ContainmentPathElements getContainmentPathAccess() {
		return gaProperties.getContainmentPathAccess();
	}
	
	public ParserRule getContainmentPathRule() {
		return getContainmentPathAccess().getRule();
	}

	////AnnexPath returns aadl2::ContainmentPathElement:
	////	 namedElement=[aadl2::NamedElement|IDANNEXTEXT];
	//ModalPropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression "in" "modes" "(" inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])* ")";
	public PropertiesGrammarAccess.ModalPropertyValueElements getModalPropertyValueAccess() {
		return gaProperties.getModalPropertyValueAccess();
	}
	
	public ParserRule getModalPropertyValueRule() {
		return getModalPropertyValueAccess().getRule();
	}

	//OptionalModalPropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression // phf made this optional: need to check separately that only the last one is optional
	//	("in" "modes" "(" inMode+=[aadl2::Mode] ("," inMode+=[aadl2::Mode])* ")")?;
	public PropertiesGrammarAccess.OptionalModalPropertyValueElements getOptionalModalPropertyValueAccess() {
		return gaProperties.getOptionalModalPropertyValueAccess();
	}
	
	public ParserRule getOptionalModalPropertyValueRule() {
		return getOptionalModalPropertyValueAccess().getRule();
	}

	//// &&&&&&&&&& handling of in binding
	//PropertyValue returns aadl2::ModalPropertyValue:
	//	ownedValue=PropertyExpression;
	public PropertiesGrammarAccess.PropertyValueElements getPropertyValueAccess() {
		return gaProperties.getPropertyValueAccess();
	}
	
	public ParserRule getPropertyValueRule() {
		return getPropertyValueAccess().getRule();
	}

	//PropertyExpression returns aadl2::PropertyExpression: //	OldRecordTerm |
	//	RecordTerm | ReferenceTerm | ComponentClassifierTerm | ComputedTerm | StringTerm | NumericRangeTerm | RealTerm |
	//	IntegerTerm | ListTerm | BooleanLiteral | LiteralorReferenceTerm;
	public PropertiesGrammarAccess.PropertyExpressionElements getPropertyExpressionAccess() {
		return gaProperties.getPropertyExpressionAccess();
	}
	
	public ParserRule getPropertyExpressionRule() {
		return getPropertyExpressionAccess().getRule();
	}

	//LiteralorReferenceTerm returns aadl2::NamedValue:
	//	namedValue=[aadl2::AbstractNamedValue|QPREF];
	public PropertiesGrammarAccess.LiteralorReferenceTermElements getLiteralorReferenceTermAccess() {
		return gaProperties.getLiteralorReferenceTermAccess();
	}
	
	public ParserRule getLiteralorReferenceTermRule() {
		return getLiteralorReferenceTermAccess().getRule();
	}

	//BooleanLiteral returns aadl2::BooleanLiteral:
	//	{aadl2::BooleanLiteral} (value?="true" | "false");
	public PropertiesGrammarAccess.BooleanLiteralElements getBooleanLiteralAccess() {
		return gaProperties.getBooleanLiteralAccess();
	}
	
	public ParserRule getBooleanLiteralRule() {
		return getBooleanLiteralAccess().getRule();
	}

	//ConstantValue returns aadl2::NamedValue:
	//	namedValue=[aadl2::PropertyConstant|QPREF];
	public PropertiesGrammarAccess.ConstantValueElements getConstantValueAccess() {
		return gaProperties.getConstantValueAccess();
	}
	
	public ParserRule getConstantValueRule() {
		return getConstantValueAccess().getRule();
	}

	//ReferenceTerm returns aadl2::ReferenceValue:
	//	"reference" "(" path=ContainmentPathElement //	( 'annex' ID '{**' 
	//	//	containmentPathElement+=ContainmentPathElement
	//	//	( '.' containmentPathElement+=ContainmentPathElement)*
	//	//	'**}')?
	//	")";
	public PropertiesGrammarAccess.ReferenceTermElements getReferenceTermAccess() {
		return gaProperties.getReferenceTermAccess();
	}
	
	public ParserRule getReferenceTermRule() {
		return getReferenceTermAccess().getRule();
	}

	//RecordTerm returns aadl2::RecordValue:
	//	"[" ownedFieldValue+=FieldPropertyAssociation+ "]";
	public PropertiesGrammarAccess.RecordTermElements getRecordTermAccess() {
		return gaProperties.getRecordTermAccess();
	}
	
	public ParserRule getRecordTermRule() {
		return getRecordTermAccess().getRule();
	}

	//OldRecordTerm returns aadl2::RecordValue:
	//	"(" ownedFieldValue+=FieldPropertyAssociation+ ")";
	public PropertiesGrammarAccess.OldRecordTermElements getOldRecordTermAccess() {
		return gaProperties.getOldRecordTermAccess();
	}
	
	public ParserRule getOldRecordTermRule() {
		return getOldRecordTermAccess().getRule();
	}

	//ComputedTerm returns aadl2::ComputedValue:
	//	"compute" "(" function=ID ")";
	public PropertiesGrammarAccess.ComputedTermElements getComputedTermAccess() {
		return gaProperties.getComputedTermAccess();
	}
	
	public ParserRule getComputedTermRule() {
		return getComputedTermAccess().getRule();
	}

	//ComponentClassifierTerm returns aadl2::ClassifierValue:
	//	"classifier" "(" classifier=[aadl2::ComponentClassifier|QCREF] ")";
	public PropertiesGrammarAccess.ComponentClassifierTermElements getComponentClassifierTermAccess() {
		return gaProperties.getComponentClassifierTermAccess();
	}
	
	public ParserRule getComponentClassifierTermRule() {
		return getComponentClassifierTermAccess().getRule();
	}

	//ListTerm returns aadl2::ListValue:
	//	{aadl2::ListValue} "(" (ownedListElement+=PropertyExpression ("," ownedListElement+=PropertyExpression)*)? ")";
	public PropertiesGrammarAccess.ListTermElements getListTermAccess() {
		return gaProperties.getListTermAccess();
	}
	
	public ParserRule getListTermRule() {
		return getListTermAccess().getRule();
	}

	//FieldPropertyAssociation returns aadl2::BasicPropertyAssociation:
	//	property=[aadl2::BasicProperty] "=>" ownedValue=PropertyExpression ";";
	public PropertiesGrammarAccess.FieldPropertyAssociationElements getFieldPropertyAssociationAccess() {
		return gaProperties.getFieldPropertyAssociationAccess();
	}
	
	public ParserRule getFieldPropertyAssociationRule() {
		return getFieldPropertyAssociationAccess().getRule();
	}

	//// from AADL2
	//// need to add annex path element
	////	 | 	 'annex' namedElement=[aadl2::NamedElement|ID]
	//ContainmentPathElement returns aadl2::ContainmentPathElement:
	//	(namedElement=[aadl2::NamedElement] arrayRange+=ArrayRange*) ("." path=ContainmentPathElement)?;
	public PropertiesGrammarAccess.ContainmentPathElementElements getContainmentPathElementAccess() {
		return gaProperties.getContainmentPathElementAccess();
	}
	
	public ParserRule getContainmentPathElementRule() {
		return getContainmentPathElementAccess().getRule();
	}

	//ANNEXREF: // check what values are ok inside ** **
	//	"{" STAR STAR ID STAR STAR "}";
	public PropertiesGrammarAccess.ANNEXREFElements getANNEXREFAccess() {
		return gaProperties.getANNEXREFAccess();
	}
	
	public ParserRule getANNEXREFRule() {
		return getANNEXREFAccess().getRule();
	}

	//PlusMinus returns aadl2::OperationKind:
	//	"+" | "-";
	public PropertiesGrammarAccess.PlusMinusElements getPlusMinusAccess() {
		return gaProperties.getPlusMinusAccess();
	}
	
	public ParserRule getPlusMinusRule() {
		return getPlusMinusAccess().getRule();
	}

	//StringTerm returns aadl2::StringLiteral:
	//	value=NoQuoteString;
	public PropertiesGrammarAccess.StringTermElements getStringTermAccess() {
		return gaProperties.getStringTermAccess();
	}
	
	public ParserRule getStringTermRule() {
		return getStringTermAccess().getRule();
	}

	//NoQuoteString: // remove quotes from string in ValueConverter
	//	STRING;
	public PropertiesGrammarAccess.NoQuoteStringElements getNoQuoteStringAccess() {
		return gaProperties.getNoQuoteStringAccess();
	}
	
	public ParserRule getNoQuoteStringRule() {
		return getNoQuoteStringAccess().getRule();
	}

	//ArrayRange returns aadl2::ArrayRange:
	//	{aadl2::ArrayRange} "[" lowerBound=INTVALUE (".." upperBound=INTVALUE)? "]";
	public PropertiesGrammarAccess.ArrayRangeElements getArrayRangeAccess() {
		return gaProperties.getArrayRangeAccess();
	}
	
	public ParserRule getArrayRangeRule() {
		return getArrayRangeAccess().getRule();
	}

	//SignedConstant returns aadl2::Operation:
	//	op=PlusMinus ownedPropertyExpression+=ConstantValue;
	public PropertiesGrammarAccess.SignedConstantElements getSignedConstantAccess() {
		return gaProperties.getSignedConstantAccess();
	}
	
	public ParserRule getSignedConstantRule() {
		return getSignedConstantAccess().getRule();
	}

	//IntegerTerm returns aadl2::IntegerLiteral:
	//	value=SignedInt unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.IntegerTermElements getIntegerTermAccess() {
		return gaProperties.getIntegerTermAccess();
	}
	
	public ParserRule getIntegerTermRule() {
		return getIntegerTermAccess().getRule();
	}

	//SignedInt returns aadl2::Integer:
	//	("+" | "-")? INTEGER_LIT;
	public PropertiesGrammarAccess.SignedIntElements getSignedIntAccess() {
		return gaProperties.getSignedIntAccess();
	}
	
	public ParserRule getSignedIntRule() {
		return getSignedIntAccess().getRule();
	}

	//RealTerm returns aadl2::RealLiteral:
	//	value=SignedReal unit=[aadl2::UnitLiteral]?;
	public PropertiesGrammarAccess.RealTermElements getRealTermAccess() {
		return gaProperties.getRealTermAccess();
	}
	
	public ParserRule getRealTermRule() {
		return getRealTermAccess().getRule();
	}

	//SignedReal returns aadl2::Real:
	//	("+" | "-")? REAL_LIT;
	public PropertiesGrammarAccess.SignedRealElements getSignedRealAccess() {
		return gaProperties.getSignedRealAccess();
	}
	
	public ParserRule getSignedRealRule() {
		return getSignedRealAccess().getRule();
	}

	//NumericRangeTerm returns aadl2::RangeValue:
	//	minimum= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)  
	//	NumAlt ".." maximum= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//	NumAlt ("delta" delta= //(RealTerm|IntegerTerm| SignedConstant | ConstantValue)
	//	NumAlt)?;
	public PropertiesGrammarAccess.NumericRangeTermElements getNumericRangeTermAccess() {
		return gaProperties.getNumericRangeTermAccess();
	}
	
	public ParserRule getNumericRangeTermRule() {
		return getNumericRangeTermAccess().getRule();
	}

	//NumAlt returns aadl2::PropertyExpression:
	//	RealTerm | IntegerTerm | SignedConstant | ConstantValue;
	public PropertiesGrammarAccess.NumAltElements getNumAltAccess() {
		return gaProperties.getNumAltAccess();
	}
	
	public ParserRule getNumAltRule() {
		return getNumAltAccess().getRule();
	}

	//terminal SL_COMMENT:
	//	"--" !("\n" | "\r")* ("\r"? "\n")?;
	public TerminalRule getSL_COMMENTRule() {
		return gaProperties.getSL_COMMENTRule();
	} 

	//INTVALUE returns aadl2::Integer: //NUMERAL 	
	//	INTEGER_LIT;
	public PropertiesGrammarAccess.INTVALUEElements getINTVALUEAccess() {
		return gaProperties.getINTVALUEAccess();
	}
	
	public ParserRule getINTVALUERule() {
		return getINTVALUEAccess().getRule();
	}

	////terminal NUMERAL:
	////	(DIGIT)+('_' (DIGIT)+)*
	////;
	////terminal INT returns ecore::EInt: (DIGIT)+('_' (DIGIT)+)*;
	//terminal fragment EXPONENT:
	//	("e" | "E") ("+" | "-")? DIGIT+;
	public TerminalRule getEXPONENTRule() {
		return gaProperties.getEXPONENTRule();
	} 

	//terminal fragment INT_EXPONENT:
	//	("e" | "E") "+"? DIGIT+;
	public TerminalRule getINT_EXPONENTRule() {
		return gaProperties.getINT_EXPONENTRule();
	} 

	//terminal REAL_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("." DIGIT+ ("_" DIGIT+)* EXPONENT?);
	public TerminalRule getREAL_LITRule() {
		return gaProperties.getREAL_LITRule();
	} 

	//terminal INTEGER_LIT:
	//	DIGIT+ ("_" DIGIT+)* ("#" BASED_INTEGER "#" INT_EXPONENT? | INT_EXPONENT?);
	public TerminalRule getINTEGER_LITRule() {
		return gaProperties.getINTEGER_LITRule();
	} 

	//terminal fragment DIGIT:
	//	"0".."9";
	public TerminalRule getDIGITRule() {
		return gaProperties.getDIGITRule();
	} 

	//terminal fragment EXTENDED_DIGIT:
	//	"0".."9" | "a".."f" | "A".."F";
	public TerminalRule getEXTENDED_DIGITRule() {
		return gaProperties.getEXTENDED_DIGITRule();
	} 

	//terminal fragment BASED_INTEGER:
	//	EXTENDED_DIGIT ("_"? EXTENDED_DIGIT)*;
	public TerminalRule getBASED_INTEGERRule() {
		return gaProperties.getBASED_INTEGERRule();
	} 

	//QCLREF:
	//	ID "::" ID;
	public PropertiesGrammarAccess.QCLREFElements getQCLREFAccess() {
		return gaProperties.getQCLREFAccess();
	}
	
	public ParserRule getQCLREFRule() {
		return getQCLREFAccess().getRule();
	}

	//QPREF:
	//	ID ("::" ID)?;
	public PropertiesGrammarAccess.QPREFElements getQPREFAccess() {
		return gaProperties.getQPREFAccess();
	}
	
	public ParserRule getQPREFRule() {
		return getQPREFAccess().getRule();
	}

	//QCREF:
	//	(ID "::")* ID ("." ID)?;
	public PropertiesGrammarAccess.QCREFElements getQCREFAccess() {
		return gaProperties.getQCREFAccess();
	}
	
	public ParserRule getQCREFRule() {
		return getQCREFAccess().getRule();
	}

	//STAR:
	//	"*";
	public PropertiesGrammarAccess.STARElements getSTARAccess() {
		return gaProperties.getSTARAccess();
	}
	
	public ParserRule getSTARRule() {
		return getSTARAccess().getRule();
	}

	//terminal STRING:
	//	"\"" ("\\" ("b" | "t" | "n" | "f" | "r" | "u" | "\"" | "\'" | "\\") | !("\\" | "\""))* "\"";
	public TerminalRule getSTRINGRule() {
		return gaProperties.getSTRINGRule();
	} 

	////terminal ID  		: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	//terminal ID:
	//	("a".."z" | "A".."Z") ("_"? ("a".."z" | "A".."Z" | "0".."9"))*;
	public TerminalRule getIDRule() {
		return gaProperties.getIDRule();
	} 

	//terminal WS:
	//	(" " | "\t" | "\r" | "\n")+;
	public TerminalRule getWSRule() {
		return gaProperties.getWSRule();
	} 
}
