/*
 * generated by Xtext
 */
package org.osate.xtext.serializer;

import com.google.inject.Inject;
import com.google.inject.Provider;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.serializer.acceptor.ISemanticSequenceAcceptor;
import org.eclipse.xtext.serializer.diagnostic.ISemanticSequencerDiagnosticProvider;
import org.eclipse.xtext.serializer.diagnostic.ISerializationDiagnostic.Acceptor;
import org.eclipse.xtext.serializer.sequencer.GenericSequencer;
import org.eclipse.xtext.serializer.sequencer.ISemanticSequencer;
import org.eclipse.xtext.serializer.sequencer.ITransientValueService;
import org.osate.aadl2.Aadl2Package;
import org.osate.aadl2.ArrayRange;
import org.osate.aadl2.BasicPropertyAssociation;
import org.osate.aadl2.BooleanLiteral;
import org.osate.aadl2.ClassifierValue;
import org.osate.aadl2.ComputedValue;
import org.osate.aadl2.ContainedNamedElement;
import org.osate.aadl2.ContainmentPathElement;
import org.osate.aadl2.IntegerLiteral;
import org.osate.aadl2.ListValue;
import org.osate.aadl2.ModalPropertyValue;
import org.osate.aadl2.NamedValue;
import org.osate.aadl2.Operation;
import org.osate.aadl2.PropertyAssociation;
import org.osate.aadl2.RangeValue;
import org.osate.aadl2.RealLiteral;
import org.osate.aadl2.RecordValue;
import org.osate.aadl2.ReferenceValue;
import org.osate.aadl2.StringLiteral;
import org.osate.ba.aadlba.AadlBaPackage;
import org.osate.ba.aadlba.ActualPortHolder;
import org.osate.ba.aadlba.Any;
import org.osate.ba.aadlba.AssignmentAction;
import org.osate.ba.aadlba.BehaviorActionBlock;
import org.osate.ba.aadlba.BehaviorActionSequence;
import org.osate.ba.aadlba.BehaviorActionSet;
import org.osate.ba.aadlba.BehaviorAnnex;
import org.osate.ba.aadlba.BehaviorBooleanLiteral;
import org.osate.ba.aadlba.BehaviorIntegerLiteral;
import org.osate.ba.aadlba.BehaviorState;
import org.osate.ba.aadlba.BehaviorStringLiteral;
import org.osate.ba.aadlba.BehaviorTime;
import org.osate.ba.aadlba.BehaviorVariable;
import org.osate.ba.aadlba.CompletionRelativeTimeout;
import org.osate.ba.aadlba.DispatchCondition;
import org.osate.ba.aadlba.DispatchConjunction;
import org.osate.ba.aadlba.DispatchRelativeTimeout;
import org.osate.ba.aadlba.DispatchTriggerConditionStop;
import org.osate.ba.aadlba.DispatchTriggerLogicalExpression;
import org.osate.ba.aadlba.ElseStatement;
import org.osate.ba.aadlba.Factor;
import org.osate.ba.aadlba.ForOrForAllStatement;
import org.osate.ba.aadlba.IfStatement;
import org.osate.ba.aadlba.IntegerRange;
import org.osate.ba.aadlba.IterativeVariable;
import org.osate.ba.aadlba.Otherwise;
import org.osate.ba.aadlba.Relation;
import org.osate.ba.aadlba.SimpleExpression;
import org.osate.ba.aadlba.Term;
import org.osate.ba.aadlba.TimedAction;
import org.osate.ba.aadlba.ValueExpression;
import org.osate.ba.aadlba.WhileOrDoUntilStatement;
import org.osate.ba.declarative.ArrayableIdentifier;
import org.osate.ba.declarative.CommAction;
import org.osate.ba.declarative.DeclarativeBehaviorStateSet;
import org.osate.ba.declarative.DeclarativeBehaviorTransition;
import org.osate.ba.declarative.DeclarativeBehaviorVariableSet;
import org.osate.ba.declarative.DeclarativePackage;
import org.osate.ba.declarative.DeclarativePropertyName;
import org.osate.ba.declarative.DeclarativePropertyReference;
import org.osate.ba.declarative.Identifier;
import org.osate.ba.declarative.QualifiedNamedElement;
import org.osate.ba.declarative.Reference;
import org.osate.xtext.aadl2.properties.serializer.PropertiesSemanticSequencer;
import org.osate.xtext.services.BaGrammarAccess;

@SuppressWarnings("all")
public class BaSemanticSequencer extends PropertiesSemanticSequencer {

	@Inject
	private BaGrammarAccess grammarAccess;
	
	@Override
	public void createSequence(EObject context, EObject semanticObject) {
		if(semanticObject.eClass().getEPackage() == Aadl2Package.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case Aadl2Package.ARRAY_RANGE:
				sequence_ArrayRange(context, (ArrayRange) semanticObject); 
				return; 
			case Aadl2Package.BASIC_PROPERTY_ASSOCIATION:
				sequence_FieldPropertyAssociation(context, (BasicPropertyAssociation) semanticObject); 
				return; 
			case Aadl2Package.BOOLEAN_LITERAL:
				sequence_BooleanLiteral(context, (BooleanLiteral) semanticObject); 
				return; 
			case Aadl2Package.CLASSIFIER_VALUE:
				sequence_ComponentClassifierTerm(context, (ClassifierValue) semanticObject); 
				return; 
			case Aadl2Package.COMPUTED_VALUE:
				sequence_ComputedTerm(context, (ComputedValue) semanticObject); 
				return; 
			case Aadl2Package.CONTAINED_NAMED_ELEMENT:
				sequence_ContainmentPath(context, (ContainedNamedElement) semanticObject); 
				return; 
			case Aadl2Package.CONTAINMENT_PATH_ELEMENT:
				sequence_ContainmentPathElement(context, (ContainmentPathElement) semanticObject); 
				return; 
			case Aadl2Package.INTEGER_LITERAL:
				sequence_IntegerTerm(context, (IntegerLiteral) semanticObject); 
				return; 
			case Aadl2Package.LIST_VALUE:
				sequence_ListTerm(context, (ListValue) semanticObject); 
				return; 
			case Aadl2Package.MODAL_PROPERTY_VALUE:
				if(context == grammarAccess.getModalPropertyValueRule()) {
					sequence_ModalPropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getOptionalModalPropertyValueRule()) {
					sequence_OptionalModalPropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPropertyValueRule()) {
					sequence_PropertyValue(context, (ModalPropertyValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.NAMED_VALUE:
				if(context == grammarAccess.getConstantValueRule() ||
				   context == grammarAccess.getNumAltRule()) {
					sequence_ConstantValue(context, (NamedValue) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getLiteralorReferenceTermRule() ||
				   context == grammarAccess.getPropertyExpressionRule()) {
					sequence_LiteralorReferenceTerm(context, (NamedValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.OPERATION:
				sequence_SignedConstant(context, (Operation) semanticObject); 
				return; 
			case Aadl2Package.PROPERTY_ASSOCIATION:
				if(context == grammarAccess.getBasicPropertyAssociationRule()) {
					sequence_BasicPropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getContainedPropertyAssociationRule() ||
				   context == grammarAccess.getPModelRule()) {
					sequence_ContainedPropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPropertyAssociationRule()) {
					sequence_PropertyAssociation(context, (PropertyAssociation) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.RANGE_VALUE:
				sequence_NumericRangeTerm(context, (RangeValue) semanticObject); 
				return; 
			case Aadl2Package.REAL_LITERAL:
				sequence_RealTerm(context, (RealLiteral) semanticObject); 
				return; 
			case Aadl2Package.RECORD_VALUE:
				if(context == grammarAccess.getOldRecordTermRule()) {
					sequence_OldRecordTerm(context, (RecordValue) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getPropertyExpressionRule() ||
				   context == grammarAccess.getRecordTermRule()) {
					sequence_RecordTerm(context, (RecordValue) semanticObject); 
					return; 
				}
				else break;
			case Aadl2Package.REFERENCE_VALUE:
				sequence_ReferenceTerm(context, (ReferenceValue) semanticObject); 
				return; 
			case Aadl2Package.STRING_LITERAL:
				sequence_StringTerm(context, (StringLiteral) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == AadlBaPackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case AadlBaPackage.ACTUAL_PORT_HOLDER:
				sequence_FrozenPorts(context, (ActualPortHolder) semanticObject); 
				return; 
			case AadlBaPackage.ANY:
				sequence_Any(context, (Any) semanticObject); 
				return; 
			case AadlBaPackage.ASSIGNMENT_ACTION:
				sequence_AssignmentAction(context, (AssignmentAction) semanticObject); 
				return; 
			case AadlBaPackage.BEHAVIOR_ACTION_BLOCK:
				sequence_BehaviorActionBlock(context, (BehaviorActionBlock) semanticObject); 
				return; 
			case AadlBaPackage.BEHAVIOR_ACTION_SEQUENCE:
				sequence_BehaviorActionSequence(context, (BehaviorActionSequence) semanticObject); 
				return; 
			case AadlBaPackage.BEHAVIOR_ACTION_SET:
				sequence_BehaviorActionSet(context, (BehaviorActionSet) semanticObject); 
				return; 
			case AadlBaPackage.BEHAVIOR_ANNEX:
				sequence_BehaviorAnnexSubclause(context, (BehaviorAnnex) semanticObject); 
				return; 
			case AadlBaPackage.BEHAVIOR_BOOLEAN_LITERAL:
				sequence_BehaviorBooleanLiteral(context, (BehaviorBooleanLiteral) semanticObject); 
				return; 
			case AadlBaPackage.BEHAVIOR_INTEGER_LITERAL:
				if(context == grammarAccess.getBehaviorIntegerLiteralRule() ||
				   context == grammarAccess.getIntegerValueRule() ||
				   context == grammarAccess.getIntegerValueConstantRule()) {
					sequence_BehaviorIntegerLiteral(context, (BehaviorIntegerLiteral) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getBehaviorNumericLiteralRule() ||
				   context == grammarAccess.getValueRule() ||
				   context == grammarAccess.getValueConstantRule()) {
					sequence_BehaviorNumericLiteral(context, (BehaviorIntegerLiteral) semanticObject); 
					return; 
				}
				else break;
			case AadlBaPackage.BEHAVIOR_STATE:
				sequence_BehaviorState(context, (BehaviorState) semanticObject); 
				return; 
			case AadlBaPackage.BEHAVIOR_STRING_LITERAL:
				sequence_BehaviorStringLiteral(context, (BehaviorStringLiteral) semanticObject); 
				return; 
			case AadlBaPackage.BEHAVIOR_TIME:
				sequence_BehaviorTime(context, (BehaviorTime) semanticObject); 
				return; 
			case AadlBaPackage.BEHAVIOR_VARIABLE:
				sequence_BehaviorVariable(context, (BehaviorVariable) semanticObject); 
				return; 
			case AadlBaPackage.COMPLETION_RELATIVE_TIMEOUT:
				sequence_CompletionRelativeTimeoutCatch(context, (CompletionRelativeTimeout) semanticObject); 
				return; 
			case AadlBaPackage.DISPATCH_CONDITION:
				sequence_DispatchCondition(context, (DispatchCondition) semanticObject); 
				return; 
			case AadlBaPackage.DISPATCH_CONJUNCTION:
				sequence_DispatchConjunction(context, (DispatchConjunction) semanticObject); 
				return; 
			case AadlBaPackage.DISPATCH_RELATIVE_TIMEOUT:
				sequence_DispatchRelativeTimeoutCatch(context, (DispatchRelativeTimeout) semanticObject); 
				return; 
			case AadlBaPackage.DISPATCH_TRIGGER_CONDITION_STOP:
				sequence_StopDispatchTriggerCondition(context, (DispatchTriggerConditionStop) semanticObject); 
				return; 
			case AadlBaPackage.DISPATCH_TRIGGER_LOGICAL_EXPRESSION:
				sequence_DispatchTriggerLogicalExpression(context, (DispatchTriggerLogicalExpression) semanticObject); 
				return; 
			case AadlBaPackage.ELSE_STATEMENT:
				sequence_ElseStatement(context, (ElseStatement) semanticObject); 
				return; 
			case AadlBaPackage.FACTOR:
				sequence_Factor(context, (Factor) semanticObject); 
				return; 
			case AadlBaPackage.FOR_OR_FOR_ALL_STATEMENT:
				sequence_ForOrForAllStatement(context, (ForOrForAllStatement) semanticObject); 
				return; 
			case AadlBaPackage.IF_STATEMENT:
				if(context == grammarAccess.getElseIfStatementRule()) {
					sequence_ElseIfStatement(context, (IfStatement) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getBehaviorActionRule() ||
				   context == grammarAccess.getBehaviorActionsRule() ||
				   context == grammarAccess.getIfStatementRule()) {
					sequence_IfStatement(context, (IfStatement) semanticObject); 
					return; 
				}
				else break;
			case AadlBaPackage.INTEGER_RANGE:
				sequence_IntegerRange(context, (IntegerRange) semanticObject); 
				return; 
			case AadlBaPackage.ITERATIVE_VARIABLE:
				sequence_IterativeVariable(context, (IterativeVariable) semanticObject); 
				return; 
			case AadlBaPackage.OTHERWISE:
				sequence_OthewiseCondition(context, (Otherwise) semanticObject); 
				return; 
			case AadlBaPackage.RELATION:
				sequence_Relation(context, (Relation) semanticObject); 
				return; 
			case AadlBaPackage.SIMPLE_EXPRESSION:
				sequence_SimpleExpression(context, (SimpleExpression) semanticObject); 
				return; 
			case AadlBaPackage.TERM:
				sequence_Term(context, (Term) semanticObject); 
				return; 
			case AadlBaPackage.TIMED_ACTION:
				sequence_TimedAction(context, (TimedAction) semanticObject); 
				return; 
			case AadlBaPackage.VALUE_EXPRESSION:
				sequence_ValueExpression(context, (ValueExpression) semanticObject); 
				return; 
			case AadlBaPackage.WHILE_OR_DO_UNTIL_STATEMENT:
				sequence_WhileOrDoUntilStatement(context, (WhileOrDoUntilStatement) semanticObject); 
				return; 
			}
		else if(semanticObject.eClass().getEPackage() == DeclarativePackage.eINSTANCE) switch(semanticObject.eClass().getClassifierID()) {
			case DeclarativePackage.ARRAYABLE_IDENTIFIER:
				sequence_ArrayIdentifier(context, (ArrayableIdentifier) semanticObject); 
				return; 
			case DeclarativePackage.COMM_ACTION:
				sequence_CommunicationAction(context, (CommAction) semanticObject); 
				return; 
			case DeclarativePackage.DECLARATIVE_BEHAVIOR_STATE_SET:
				sequence_BehaviorStateSet(context, (DeclarativeBehaviorStateSet) semanticObject); 
				return; 
			case DeclarativePackage.DECLARATIVE_BEHAVIOR_TRANSITION:
				sequence_BehaviorTransition(context, (DeclarativeBehaviorTransition) semanticObject); 
				return; 
			case DeclarativePackage.DECLARATIVE_BEHAVIOR_VARIABLE_SET:
				sequence_BehaviorVariableSet(context, (DeclarativeBehaviorVariableSet) semanticObject); 
				return; 
			case DeclarativePackage.DECLARATIVE_PROPERTY_NAME:
				sequence_PropertyName(context, (DeclarativePropertyName) semanticObject); 
				return; 
			case DeclarativePackage.DECLARATIVE_PROPERTY_REFERENCE:
				sequence_PropertyReference(context, (DeclarativePropertyReference) semanticObject); 
				return; 
			case DeclarativePackage.IDENTIFIER:
				if(context == grammarAccess.getIdentifierRule()) {
					sequence_Identifier(context, (Identifier) semanticObject); 
					return; 
				}
				else if(context == grammarAccess.getQualifiedIndentifierRule()) {
					sequence_QualifiedIndentifier(context, (Identifier) semanticObject); 
					return; 
				}
				else break;
			case DeclarativePackage.QUALIFIED_NAMED_ELEMENT:
				sequence_QualifiedNamedElement(context, (QualifiedNamedElement) semanticObject); 
				return; 
			case DeclarativePackage.REFERENCE:
				sequence_Reference(context, (Reference) semanticObject); 
				return; 
			}
		if (errorAcceptor != null) errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Constraint:
	 *     {Any}
	 */
	protected void sequence_Any(EObject context, Any semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (id=ID arrayIndexes+=IntegerValue*)
	 */
	protected void sequence_ArrayIdentifier(EObject context, ArrayableIdentifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (target=Target (valueExpression=ValueExpression | valueExpression=Any))
	 */
	protected void sequence_AssignmentAction(EObject context, AssignmentAction semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (content=BehaviorActions timeout=BehaviorTime?)
	 */
	protected void sequence_BehaviorActionBlock(EObject context, BehaviorActionBlock semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (actions+=BehaviorAction+ actions+=BehaviorAction)
	 */
	protected void sequence_BehaviorActionSequence(EObject context, BehaviorActionSequence semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (actions+=BehaviorAction+ actions+=BehaviorAction)
	 */
	protected void sequence_BehaviorActionSet(EObject context, BehaviorActionSet semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (variables+=BehaviorVariableSet variables+=BehaviorVariableSet*)* 
	 *         (states+=BehaviorStateSet states+=BehaviorStateSet*)+ 
	 *         (transitions+=BehaviorTransition transitions+=BehaviorTransition*)+
	 *     )
	 */
	protected void sequence_BehaviorAnnexSubclause(EObject context, BehaviorAnnex semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (value?='true'?)
	 */
	protected void sequence_BehaviorBooleanLiteral(EObject context, BehaviorBooleanLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     value=SignedInt
	 */
	protected void sequence_BehaviorIntegerLiteral(EObject context, BehaviorIntegerLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     value=SignedInt
	 */
	protected void sequence_BehaviorNumericLiteral(EObject context, BehaviorIntegerLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (states+=BehaviorState states+=BehaviorState* initial?='initial'? complete?='complete'? final?='final'?)
	 */
	protected void sequence_BehaviorStateSet(EObject context, DeclarativeBehaviorStateSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_BehaviorState(EObject context, BehaviorState semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     value=NoQuoteString
	 */
	protected void sequence_BehaviorStringLiteral(EObject context, BehaviorStringLiteral semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (integerValue=IntegerValue unit=[UnitLiteral|QCREF])
	 */
	protected void sequence_BehaviorTime(EObject context, BehaviorTime semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (name=ID priority=INTVALUE?)? 
	 *         srcStates+=[BehaviorState|ID] 
	 *         srcStates+=[BehaviorState|ID]* 
	 *         condition=BehaviorCondition 
	 *         destinationState=[BehaviorState|ID] 
	 *         actionBlock=BehaviorActionBlock?
	 *     )
	 */
	protected void sequence_BehaviorTransition(EObject context, DeclarativeBehaviorTransition semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (variables+=BehaviorVariable variables+=BehaviorVariable* dataClassifier=[DataClassifier|ID])
	 */
	protected void sequence_BehaviorVariableSet(EObject context, DeclarativeBehaviorVariableSet semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     name=ID
	 */
	protected void sequence_BehaviorVariable(EObject context, BehaviorVariable semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (qualifiedName=QualifiedNamedElement (parameters+=ParameterLabel parameters+=ParameterLabel*)?) | 
	 *         (
	 *             reference=Reference 
	 *             (
	 *                 target=Target? | 
	 *                 (parameters+=ParameterLabel parameters+=ParameterLabel*)? | 
	 *                 target=Target? | 
	 *                 (parameters+=ParameterLabel parameters+=ParameterLabel*)?
	 *             )?
	 *         )
	 *     )
	 */
	protected void sequence_CommunicationAction(EObject context, CommAction semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (integerValue=IntegerValue unit=[UnitLiteral|ID])
	 */
	protected void sequence_CompletionRelativeTimeoutCatch(EObject context, CompletionRelativeTimeout semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (
	 *             dispatchTriggerCondition=DispatchTriggerCondition | 
	 *             dispatchTriggerCondition=StopDispatchTriggerCondition | 
	 *             dispatchTriggerCondition=CompletionRelativeTimeoutCatch | 
	 *             dispatchTriggerCondition=DispatchRelativeTimeoutCatch
	 *         )? 
	 *         (frozenPorts+=FrozenPorts frozenPorts+=FrozenPorts*)?
	 *     )
	 */
	protected void sequence_DispatchCondition(EObject context, DispatchCondition semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dispatchTriggers+=DispatchTrigger dispatchTriggers+=DispatchTrigger*)
	 */
	protected void sequence_DispatchConjunction(EObject context, DispatchConjunction semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {DispatchRelativeTimeout}
	 */
	protected void sequence_DispatchRelativeTimeoutCatch(EObject context, DispatchRelativeTimeout semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (dispatchConjunctions+=DispatchConjunction dispatchConjunctions+=DispatchConjunction*)
	 */
	protected void sequence_DispatchTriggerLogicalExpression(EObject context, DispatchTriggerLogicalExpression semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (elif?='elsif' logicalValueExpression=ValueExpression behaviorActions=BehaviorActions)
	 */
	protected void sequence_ElseIfStatement(EObject context, IfStatement semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     behaviorActions=BehaviorActions
	 */
	protected void sequence_ElseStatement(EObject context, ElseStatement semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (firstValue=Value (binaryNumericOperator=BinaryNumericOperator secondValue=Value)?) | 
	 *         (unaryNumericOperator=UnaryNumericOperator firstValue=Value) | 
	 *         (unaryBooleanOperator=UnaryBooleanOperator firstValue=Value)
	 *     )
	 */
	protected void sequence_Factor(EObject context, Factor semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (forAll?='forall'? iterativeVariable=IterativeVariable iteratedValues=ElementValues behaviorActions=BehaviorActions)
	 */
	protected void sequence_ForOrForAllStatement(EObject context, ForOrForAllStatement semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     element=[Port|ID]
	 */
	protected void sequence_FrozenPorts(EObject context, ActualPortHolder semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     id=QualifiedName
	 */
	protected void sequence_Identifier(EObject context, Identifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (logicalValueExpression=ValueExpression behaviorActions=BehaviorActions (elseStatement=ElseStatement | elseStatement=ElseIfStatement)?)
	 */
	protected void sequence_IfStatement(EObject context, IfStatement semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lowerIntegerValue=IntegerValue upperIntegerValue=IntegerValue)
	 */
	protected void sequence_IntegerRange(EObject context, IntegerRange semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (name=ID dataClassifier=[DataClassifier|ID])
	 */
	protected void sequence_IterativeVariable(EObject context, IterativeVariable semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {Otherwise}
	 */
	protected void sequence_OthewiseCondition(EObject context, Otherwise semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (propertyName=Identifier indexes+=IntegerValue*)
	 */
	protected void sequence_PropertyName(EObject context, DeclarativePropertyName semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     ((propertySet?='#' | qualifiedName=QualifiedNamedElement | reference=Reference) propertyNames+=PropertyName propertyNames+=PropertyName*)
	 */
	protected void sequence_PropertyReference(EObject context, DeclarativePropertyReference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     id=NameSpace
	 */
	protected void sequence_QualifiedIndentifier(EObject context, Identifier semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (baNamespace=QualifiedIndentifier baName=Identifier)
	 */
	protected void sequence_QualifiedNamedElement(EObject context, QualifiedNamedElement semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (ids+=ArrayIdentifier ids+=ArrayIdentifier*)
	 */
	protected void sequence_Reference(EObject context, Reference semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (firstExpression=SimpleExpression (relationalOperator=RelationalOperator secondExpression=SimpleExpression)?)
	 */
	protected void sequence_Relation(EObject context, Relation semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (unaryAddingOperator=UnaryAddingOperator? terms+=Term (binaryAddingOperators+=BinaryAddingOperator terms+=Term)*)
	 */
	protected void sequence_SimpleExpression(EObject context, SimpleExpression semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     {DispatchTriggerConditionStop}
	 */
	protected void sequence_StopDispatchTriggerCondition(EObject context, DispatchTriggerConditionStop semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (factors+=Factor (multiplyingOperators+=MultiplyingOperator factors+=Factor)*)
	 */
	protected void sequence_Term(EObject context, Term semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (lowerTime=BehaviorTime upperTime=BehaviorTime? (processorClassifier+=[ProcessorClassifier|ID] processorClassifier+=[ProcessorClassifier|ID]*)?)
	 */
	protected void sequence_TimedAction(EObject context, TimedAction semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (relations+=Relation (logicalOperators+=LogicalOperator relations+=Relation)?)
	 */
	protected void sequence_ValueExpression(EObject context, ValueExpression semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
	
	
	/**
	 * Constraint:
	 *     (
	 *         (logicalValueExpression=ValueExpression behaviorActions=BehaviorActions) | 
	 *         (doUntil?='do' behaviorActions=BehaviorActions logicalValueExpression=ValueExpression)
	 *     )
	 */
	protected void sequence_WhileOrDoUntilStatement(EObject context, WhileOrDoUntilStatement semanticObject) {
		genericSequencer.createSequence(context, (EObject)semanticObject);
	}
}
