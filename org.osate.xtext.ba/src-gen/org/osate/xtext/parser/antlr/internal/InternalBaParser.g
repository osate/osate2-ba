/*
 * generated by Xtext
 */
parser grammar InternalBaParser;

options {
	tokenVocab=InternalBaLexer;
	superClass=AbstractInternalAntlrParser;
	backtrack=true;
	
}

@header {
package org.osate.xtext.parser.antlr.internal; 

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import org.osate.xtext.services.BaGrammarAccess;

}

@members {

/*
  This grammar contains a lot of empty actions to work around a bug in ANTLR.
  Otherwise the ANTLR tool will create synpreds that cannot be compiled in some rare cases.
*/
 

	private BaGrammarAccess grammarAccess;
	 	
	public InternalBaParser(TokenStream input, BaGrammarAccess grammarAccess) {
		this(input);
		this.grammarAccess = grammarAccess;
		registerRules(grammarAccess.getGrammar());
	}
	
	@Override
	protected String getFirstRuleName() {
		return "AnnexSubclause";	
	} 
	   	   	
	@Override
	protected BaGrammarAccess getGrammarAccess() {
		return grammarAccess;
	}
}

@rulecatch { 
	catch (RecognitionException re) { 
	    recover(input,re); 
	    appendSkippedTokens();
	}
}




// Entry rule entryRuleAnnexSubclause
entryRuleAnnexSubclause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAnnexSubclauseRule()); }
	 iv_ruleAnnexSubclause=ruleAnnexSubclause 
	 { $current=$iv_ruleAnnexSubclause.current; } 
	 EOF 
;

// Rule AnnexSubclause
ruleAnnexSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getAnnexSubclauseAccess().getBehaviorAnnexSubclauseParserRuleCall()); 
    }
    this_BehaviorAnnexSubclause_0=ruleBehaviorAnnexSubclause
    {
        $current = $this_BehaviorAnnexSubclause_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBehaviorAnnexSubclause
entryRuleBehaviorAnnexSubclause returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorAnnexSubclauseRule()); }
	 iv_ruleBehaviorAnnexSubclause=ruleBehaviorAnnexSubclause 
	 { $current=$iv_ruleBehaviorAnnexSubclause.current; } 
	 EOF 
;

// Rule BehaviorAnnexSubclause
ruleBehaviorAnnexSubclause returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBehaviorAnnexSubclauseAccess().getBehaviorAnnexAction_0(),
            $current);
    }
)(
	otherlv_1=Variables
    {
    	newLeafNode(otherlv_1, grammarAccess.getBehaviorAnnexSubclauseAccess().getVariablesKeyword_1_0());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAnnexSubclauseAccess().getVariablesBehaviorVariableSetParserRuleCall_1_1_0_0()); 
	    }
		lv_variables_2_0=ruleBehaviorVariableSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"BehaviorVariableSet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getBehaviorAnnexSubclauseAccess().getCommaKeyword_1_1_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAnnexSubclauseAccess().getVariablesBehaviorVariableSetParserRuleCall_1_1_1_1_0()); 
	    }
		lv_variables_4_0=ruleBehaviorVariableSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_4_0, 
        		"BehaviorVariableSet");
	        afterParserOrEnumRuleCall();
	    }

)
))*)+)?
	otherlv_5=States
    {
    	newLeafNode(otherlv_5, grammarAccess.getBehaviorAnnexSubclauseAccess().getStatesKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAnnexSubclauseAccess().getStatesBehaviorStateSetParserRuleCall_3_0_0()); 
	    }
		lv_states_6_0=ruleBehaviorStateSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_6_0, 
        		"BehaviorStateSet");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_7=Comma
    {
    	newLeafNode(otherlv_7, grammarAccess.getBehaviorAnnexSubclauseAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAnnexSubclauseAccess().getStatesBehaviorStateSetParserRuleCall_3_1_1_0()); 
	    }
		lv_states_8_0=ruleBehaviorStateSet		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_8_0, 
        		"BehaviorStateSet");
	        afterParserOrEnumRuleCall();
	    }

)
))*)+
	otherlv_9=Transitions
    {
    	newLeafNode(otherlv_9, grammarAccess.getBehaviorAnnexSubclauseAccess().getTransitionsKeyword_4());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAnnexSubclauseAccess().getTransitionsBehaviorTransitionParserRuleCall_5_0_0()); 
	    }
		lv_transitions_10_0=ruleBehaviorTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_10_0, 
        		"BehaviorTransition");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_11=Comma
    {
    	newLeafNode(otherlv_11, grammarAccess.getBehaviorAnnexSubclauseAccess().getCommaKeyword_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorAnnexSubclauseAccess().getTransitionsBehaviorTransitionParserRuleCall_5_1_1_0()); 
	    }
		lv_transitions_12_0=ruleBehaviorTransition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorAnnexSubclauseRule());
	        }
       		add(
       			$current, 
       			"transitions",
        		lv_transitions_12_0, 
        		"BehaviorTransition");
	        afterParserOrEnumRuleCall();
	    }

)
))*)+)
;





// Entry rule entryRuleBehaviorVariableSet
entryRuleBehaviorVariableSet returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorVariableSetRule()); }
	 iv_ruleBehaviorVariableSet=ruleBehaviorVariableSet 
	 { $current=$iv_ruleBehaviorVariableSet.current; } 
	 EOF 
;

// Rule BehaviorVariableSet
ruleBehaviorVariableSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorVariableSetAccess().getVariablesBehaviorVariableParserRuleCall_0_0()); 
	    }
		lv_variables_0_0=ruleBehaviorVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorVariableSetRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_0_0, 
        		"BehaviorVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=Comma
    {
    	newLeafNode(otherlv_1, grammarAccess.getBehaviorVariableSetAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorVariableSetAccess().getVariablesBehaviorVariableParserRuleCall_1_1_0()); 
	    }
		lv_variables_2_0=ruleBehaviorVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorVariableSetRule());
	        }
       		add(
       			$current, 
       			"variables",
        		lv_variables_2_0, 
        		"BehaviorVariable");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_3=Colon
    {
    	newLeafNode(otherlv_3, grammarAccess.getBehaviorVariableSetAccess().getColonKeyword_2());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorVariableSetRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getBehaviorVariableSetAccess().getDataClassifierDataClassifierCrossReference_3_0()); 
	}

)
)(
	otherlv_5=LeftCurlyBracket
    {
    	newLeafNode(otherlv_5, grammarAccess.getBehaviorVariableSetAccess().getLeftCurlyBracketKeyword_4_0());
    }

	otherlv_6=RightCurlyBracket
    {
    	newLeafNode(otherlv_6, grammarAccess.getBehaviorVariableSetAccess().getRightCurlyBracketKeyword_4_1());
    }
)?
	otherlv_7=Semicolon
    {
    	newLeafNode(otherlv_7, grammarAccess.getBehaviorVariableSetAccess().getSemicolonKeyword_5());
    }
)
;





// Entry rule entryRuleBehaviorVariable
entryRuleBehaviorVariable returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorVariableRule()); }
	 iv_ruleBehaviorVariable=ruleBehaviorVariable 
	 { $current=$iv_ruleBehaviorVariable.current; } 
	 EOF 
;

// Rule BehaviorVariable
ruleBehaviorVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBehaviorVariableAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleBehaviorStateSet
entryRuleBehaviorStateSet returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorStateSetRule()); }
	 iv_ruleBehaviorStateSet=ruleBehaviorStateSet 
	 { $current=$iv_ruleBehaviorStateSet.current; } 
	 EOF 
;

// Rule BehaviorStateSet
ruleBehaviorStateSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorStateSetAccess().getStatesBehaviorStateParserRuleCall_0_0()); 
	    }
		lv_states_0_0=ruleBehaviorState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorStateSetRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_0_0, 
        		"BehaviorState");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=Comma
    {
    	newLeafNode(otherlv_1, grammarAccess.getBehaviorStateSetAccess().getCommaKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorStateSetAccess().getStatesBehaviorStateParserRuleCall_1_1_0()); 
	    }
		lv_states_2_0=ruleBehaviorState		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorStateSetRule());
	        }
       		add(
       			$current, 
       			"states",
        		lv_states_2_0, 
        		"BehaviorState");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_3=Colon
    {
    	newLeafNode(otherlv_3, grammarAccess.getBehaviorStateSetAccess().getColonKeyword_2());
    }
(
(
		lv_initial_4_0=
	Initial
    {
        newLeafNode(lv_initial_4_0, grammarAccess.getBehaviorStateSetAccess().getInitialInitialKeyword_3_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorStateSetRule());
	        }
       		setWithLastConsumed($current, "initial", true, "initial");
	    }

)
)?(
(
		lv_complete_5_0=
	Complete
    {
        newLeafNode(lv_complete_5_0, grammarAccess.getBehaviorStateSetAccess().getCompleteCompleteKeyword_4_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorStateSetRule());
	        }
       		setWithLastConsumed($current, "complete", true, "complete");
	    }

)
)?(
(
		lv_final_6_0=
	Final
    {
        newLeafNode(lv_final_6_0, grammarAccess.getBehaviorStateSetAccess().getFinalFinalKeyword_5_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorStateSetRule());
	        }
       		setWithLastConsumed($current, "final", true, "final");
	    }

)
)?
	otherlv_7=State
    {
    	newLeafNode(otherlv_7, grammarAccess.getBehaviorStateSetAccess().getStateKeyword_6());
    }

	otherlv_8=Semicolon
    {
    	newLeafNode(otherlv_8, grammarAccess.getBehaviorStateSetAccess().getSemicolonKeyword_7());
    }
)
;





// Entry rule entryRuleBehaviorState
entryRuleBehaviorState returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorStateRule()); }
	 iv_ruleBehaviorState=ruleBehaviorState 
	 { $current=$iv_ruleBehaviorState.current; } 
	 EOF 
;

// Rule BehaviorState
ruleBehaviorState returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBehaviorStateAccess().getNameIDTerminalRuleCall_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorStateRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
;





// Entry rule entryRuleBehaviorTransition
entryRuleBehaviorTransition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorTransitionRule()); }
	 iv_ruleBehaviorTransition=ruleBehaviorTransition 
	 { $current=$iv_ruleBehaviorTransition.current; } 
	 EOF 
;

// Rule BehaviorTransition
ruleBehaviorTransition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getBehaviorTransitionAccess().getNameIDTerminalRuleCall_0_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorTransitionRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)(
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getBehaviorTransitionAccess().getLeftSquareBracketKeyword_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorTransitionAccess().getPriorityINTVALUEParserRuleCall_0_1_1_0()); 
	    }
		lv_priority_2_0=ruleINTVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorTransitionRule());
	        }
       		set(
       			$current, 
       			"priority",
        		lv_priority_2_0, 
        		"INTVALUE");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightSquareBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getBehaviorTransitionAccess().getRightSquareBracketKeyword_0_1_2());
    }
)?
	otherlv_4=Colon
    {
    	newLeafNode(otherlv_4, grammarAccess.getBehaviorTransitionAccess().getColonKeyword_0_2());
    }
)?(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorTransitionRule());
	        }
        }
	otherlv_5=RULE_ID
	{
		newLeafNode(otherlv_5, grammarAccess.getBehaviorTransitionAccess().getSrcStatesBehaviorStateCrossReference_1_0()); 
	}

)
)(
	otherlv_6=Comma
    {
    	newLeafNode(otherlv_6, grammarAccess.getBehaviorTransitionAccess().getCommaKeyword_2_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorTransitionRule());
	        }
        }
	otherlv_7=RULE_ID
	{
		newLeafNode(otherlv_7, grammarAccess.getBehaviorTransitionAccess().getSrcStatesBehaviorStateCrossReference_2_1_0()); 
	}

)
))*
	otherlv_8=HyphenMinusLeftSquareBracket
    {
    	newLeafNode(otherlv_8, grammarAccess.getBehaviorTransitionAccess().getHyphenMinusLeftSquareBracketKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorTransitionAccess().getConditionBehaviorConditionParserRuleCall_4_0()); 
	    }
		lv_condition_9_0=ruleBehaviorCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorTransitionRule());
	        }
       		set(
       			$current, 
       			"condition",
        		lv_condition_9_0, 
        		"BehaviorCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_10=RightSquareBracketHyphenMinusGreaterThanSign
    {
    	newLeafNode(otherlv_10, grammarAccess.getBehaviorTransitionAccess().getRightSquareBracketHyphenMinusGreaterThanSignKeyword_5());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorTransitionRule());
	        }
        }
	otherlv_11=RULE_ID
	{
		newLeafNode(otherlv_11, grammarAccess.getBehaviorTransitionAccess().getDestinationStateBehaviorStateCrossReference_6_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorTransitionAccess().getActionBlockBehaviorActionBlockParserRuleCall_7_0()); 
	    }
		lv_actionBlock_12_0=ruleBehaviorActionBlock		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorTransitionRule());
	        }
       		set(
       			$current, 
       			"actionBlock",
        		lv_actionBlock_12_0, 
        		"BehaviorActionBlock");
	        afterParserOrEnumRuleCall();
	    }

)
)?
	otherlv_13=Semicolon
    {
    	newLeafNode(otherlv_13, grammarAccess.getBehaviorTransitionAccess().getSemicolonKeyword_8());
    }
)
;





// Entry rule entryRuleBehaviorActionBlock
entryRuleBehaviorActionBlock returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorActionBlockRule()); }
	 iv_ruleBehaviorActionBlock=ruleBehaviorActionBlock 
	 { $current=$iv_ruleBehaviorActionBlock.current; } 
	 EOF 
;

// Rule BehaviorActionBlock
ruleBehaviorActionBlock returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftCurlyBracket
    {
    	newLeafNode(otherlv_0, grammarAccess.getBehaviorActionBlockAccess().getLeftCurlyBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorActionBlockAccess().getContentBehaviorActionsParserRuleCall_1_0()); 
	    }
		lv_content_1_0=ruleBehaviorActions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorActionBlockRule());
	        }
       		set(
       			$current, 
       			"content",
        		lv_content_1_0, 
        		"BehaviorActions");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_2=RightCurlyBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getBehaviorActionBlockAccess().getRightCurlyBracketKeyword_2());
    }
(
	otherlv_3=Timeout
    {
    	newLeafNode(otherlv_3, grammarAccess.getBehaviorActionBlockAccess().getTimeoutKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorActionBlockAccess().getTimeoutBehaviorTimeParserRuleCall_3_1_0()); 
	    }
		lv_timeout_4_0=ruleBehaviorTime		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorActionBlockRule());
	        }
       		set(
       			$current, 
       			"timeout",
        		lv_timeout_4_0, 
        		"BehaviorTime");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleBehaviorActions
entryRuleBehaviorActions returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorActionsRule()); }
	 iv_ruleBehaviorActions=ruleBehaviorActions 
	 { $current=$iv_ruleBehaviorActions.current; } 
	 EOF 
;

// Rule BehaviorActions
ruleBehaviorActions returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBehaviorActionsAccess().getBehaviorActionSequenceParserRuleCall_0()); 
    }
    this_BehaviorActionSequence_0=ruleBehaviorActionSequence
    {
        $current = $this_BehaviorActionSequence_0.current;
        afterParserOrEnumRuleCall();
    }

    |((ruleBehaviorActionSet)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBehaviorActionsAccess().getBehaviorActionSetParserRuleCall_1()); 
    }
    this_BehaviorActionSet_1=ruleBehaviorActionSet
    {
        $current = $this_BehaviorActionSet_1.current;
        afterParserOrEnumRuleCall();
    }
)
    |((ruleBehaviorAction)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBehaviorActionsAccess().getBehaviorActionParserRuleCall_2()); 
    }
    this_BehaviorAction_2=ruleBehaviorAction
    {
        $current = $this_BehaviorAction_2.current;
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleBehaviorActionSequence
entryRuleBehaviorActionSequence returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorActionSequenceRule()); }
	 iv_ruleBehaviorActionSequence=ruleBehaviorActionSequence 
	 { $current=$iv_ruleBehaviorActionSequence.current; } 
	 EOF 
;

// Rule BehaviorActionSequence
ruleBehaviorActionSequence returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorActionSequenceAccess().getActionsBehaviorActionParserRuleCall_0_0_0()); 
	    }
		lv_actions_0_0=ruleBehaviorAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorActionSequenceRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_0_0, 
        		"BehaviorAction");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Semicolon
    {
    	newLeafNode(otherlv_1, grammarAccess.getBehaviorActionSequenceAccess().getSemicolonKeyword_0_1());
    }
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorActionSequenceAccess().getActionsBehaviorActionParserRuleCall_1_0()); 
	    }
		lv_actions_2_0=ruleBehaviorAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorActionSequenceRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_2_0, 
        		"BehaviorAction");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBehaviorActionSet
entryRuleBehaviorActionSet returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorActionSetRule()); }
	 iv_ruleBehaviorActionSet=ruleBehaviorActionSet 
	 { $current=$iv_ruleBehaviorActionSet.current; } 
	 EOF 
;

// Rule BehaviorActionSet
ruleBehaviorActionSet returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorActionSetAccess().getActionsBehaviorActionParserRuleCall_0_0_0()); 
	    }
		lv_actions_0_0=ruleBehaviorAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorActionSetRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_0_0, 
        		"BehaviorAction");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=Comma
    {
    	newLeafNode(otherlv_1, grammarAccess.getBehaviorActionSetAccess().getCommaKeyword_0_1());
    }
)+(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorActionSetAccess().getActionsBehaviorActionParserRuleCall_1_0()); 
	    }
		lv_actions_2_0=ruleBehaviorAction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorActionSetRule());
	        }
       		add(
       			$current, 
       			"actions",
        		lv_actions_2_0, 
        		"BehaviorAction");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBehaviorAction
entryRuleBehaviorAction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorActionRule()); }
	 iv_ruleBehaviorAction=ruleBehaviorAction 
	 { $current=$iv_ruleBehaviorAction.current; } 
	 EOF 
;

// Rule BehaviorAction
ruleBehaviorAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBehaviorActionAccess().getBasicActionParserRuleCall_0()); 
    }
    this_BasicAction_0=ruleBasicAction
    {
        $current = $this_BasicAction_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBehaviorActionAccess().getIfStatementParserRuleCall_1()); 
    }
    this_IfStatement_1=ruleIfStatement
    {
        $current = $this_IfStatement_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBehaviorActionAccess().getForOrForAllStatementParserRuleCall_2()); 
    }
    this_ForOrForAllStatement_2=ruleForOrForAllStatement
    {
        $current = $this_ForOrForAllStatement_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBehaviorActionAccess().getWhileOrDoUntilStatementParserRuleCall_3()); 
    }
    this_WhileOrDoUntilStatement_3=ruleWhileOrDoUntilStatement
    {
        $current = $this_WhileOrDoUntilStatement_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBasicAction
entryRuleBasicAction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBasicActionRule()); }
	 iv_ruleBasicAction=ruleBasicAction 
	 { $current=$iv_ruleBasicAction.current; } 
	 EOF 
;

// Rule BasicAction
ruleBasicAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicActionAccess().getAssignmentActionParserRuleCall_0()); 
    }
    this_AssignmentAction_0=ruleAssignmentAction
    {
        $current = $this_AssignmentAction_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicActionAccess().getCommunicationActionParserRuleCall_1()); 
    }
    this_CommunicationAction_1=ruleCommunicationAction
    {
        $current = $this_CommunicationAction_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBasicActionAccess().getTimedActionParserRuleCall_2()); 
    }
    this_TimedAction_2=ruleTimedAction
    {
        $current = $this_TimedAction_2.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleAssignmentAction
entryRuleAssignmentAction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAssignmentActionRule()); }
	 iv_ruleAssignmentAction=ruleAssignmentAction 
	 { $current=$iv_ruleAssignmentAction.current; } 
	 EOF 
;

// Rule AssignmentAction
ruleAssignmentAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentActionAccess().getTargetTargetParserRuleCall_0_0()); 
	    }
		lv_target_0_0=ruleTarget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentActionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_0_0, 
        		"Target");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=ColonEqualsSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getAssignmentActionAccess().getColonEqualsSignKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentActionAccess().getValueExpressionValueExpressionParserRuleCall_2_0_0()); 
	    }
		lv_valueExpression_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentActionRule());
	        }
       		set(
       			$current, 
       			"valueExpression",
        		lv_valueExpression_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getAssignmentActionAccess().getValueExpressionAnyParserRuleCall_2_1_0()); 
	    }
		lv_valueExpression_3_0=ruleAny		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getAssignmentActionRule());
	        }
       		set(
       			$current, 
       			"valueExpression",
        		lv_valueExpression_3_0, 
        		"Any");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleAny
entryRuleAny returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getAnyRule()); }
	 iv_ruleAny=ruleAny 
	 { $current=$iv_ruleAny.current; } 
	 EOF 
;

// Rule Any
ruleAny returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getAnyAccess().getAnyAction_0(),
            $current);
    }
)
	otherlv_1=Any
    {
    	newLeafNode(otherlv_1, grammarAccess.getAnyAccess().getAnyKeyword_1());
    }
)
;





// Entry rule entryRuleTarget
entryRuleTarget returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTargetRule()); }
	 iv_ruleTarget=ruleTarget 
	 { $current=$iv_ruleTarget.current; } 
	 EOF 
;

// Rule Target
ruleTarget returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getTargetAccess().getReferenceParserRuleCall()); 
    }
    this_Reference_0=ruleReference
    {
        $current = $this_Reference_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleCommunicationAction
entryRuleCommunicationAction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCommunicationActionRule()); }
	 iv_ruleCommunicationAction=ruleCommunicationAction 
	 { $current=$iv_ruleCommunicationAction.current; } 
	 EOF 
;

// Rule CommunicationAction
ruleCommunicationAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getCommunicationActionAccess().getQualifiedNameQualifiedNamedElementParserRuleCall_0_0_0()); 
	    }
		lv_qualifiedName_0_0=ruleQualifiedNamedElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
	        }
       		set(
       			$current, 
       			"qualifiedName",
        		lv_qualifiedName_0_0, 
        		"QualifiedNamedElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=ExclamationMark
    {
    	newLeafNode(otherlv_1, grammarAccess.getCommunicationActionAccess().getExclamationMarkKeyword_0_1());
    }
(
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getCommunicationActionAccess().getLeftParenthesisKeyword_0_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommunicationActionAccess().getParametersParameterLabelParserRuleCall_0_2_1_0()); 
	    }
		lv_parameters_3_0=ruleParameterLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_3_0, 
        		"ParameterLabel");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_4=Comma
    {
    	newLeafNode(otherlv_4, grammarAccess.getCommunicationActionAccess().getCommaKeyword_0_2_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommunicationActionAccess().getParametersParameterLabelParserRuleCall_0_2_2_1_0()); 
	    }
		lv_parameters_5_0=ruleParameterLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_5_0, 
        		"ParameterLabel");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getCommunicationActionAccess().getRightParenthesisKeyword_0_2_3());
    }
)?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getCommunicationActionAccess().getReferenceReferenceParserRuleCall_1_0_0()); 
	    }
		lv_reference_7_0=ruleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
	        }
       		set(
       			$current, 
       			"reference",
        		lv_reference_7_0, 
        		"Reference");
	        afterParserOrEnumRuleCall();
	    }

)
)((
	otherlv_8=QuestionMark
    {
    	newLeafNode(otherlv_8, grammarAccess.getCommunicationActionAccess().getQuestionMarkKeyword_1_1_0_0());
    }
(
	otherlv_9=LeftParenthesis
    {
    	newLeafNode(otherlv_9, grammarAccess.getCommunicationActionAccess().getLeftParenthesisKeyword_1_1_0_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommunicationActionAccess().getTargetTargetParserRuleCall_1_1_0_1_1_0()); 
	    }
		lv_target_10_0=ruleTarget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_10_0, 
        		"Target");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_11=RightParenthesis
    {
    	newLeafNode(otherlv_11, grammarAccess.getCommunicationActionAccess().getRightParenthesisKeyword_1_1_0_1_2());
    }
)?)
    |
	otherlv_12=GreaterThanSignGreaterThanSign
    {
    	newLeafNode(otherlv_12, grammarAccess.getCommunicationActionAccess().getGreaterThanSignGreaterThanSignKeyword_1_1_1());
    }

    |
	otherlv_13=ExclamationMarkLessThanSign
    {
    	newLeafNode(otherlv_13, grammarAccess.getCommunicationActionAccess().getExclamationMarkLessThanSignKeyword_1_1_2());
    }

    |
	otherlv_14=ExclamationMarkGreaterThanSign
    {
    	newLeafNode(otherlv_14, grammarAccess.getCommunicationActionAccess().getExclamationMarkGreaterThanSignKeyword_1_1_3());
    }

    |(
	otherlv_15=ExclamationMark
    {
    	newLeafNode(otherlv_15, grammarAccess.getCommunicationActionAccess().getExclamationMarkKeyword_1_1_4_0());
    }
(
	otherlv_16=LeftParenthesis
    {
    	newLeafNode(otherlv_16, grammarAccess.getCommunicationActionAccess().getLeftParenthesisKeyword_1_1_4_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommunicationActionAccess().getParametersParameterLabelParserRuleCall_1_1_4_1_1_0()); 
	    }
		lv_parameters_17_0=ruleParameterLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_17_0, 
        		"ParameterLabel");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_18=Comma
    {
    	newLeafNode(otherlv_18, grammarAccess.getCommunicationActionAccess().getCommaKeyword_1_1_4_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommunicationActionAccess().getParametersParameterLabelParserRuleCall_1_1_4_1_2_1_0()); 
	    }
		lv_parameters_19_0=ruleParameterLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_19_0, 
        		"ParameterLabel");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_20=RightParenthesis
    {
    	newLeafNode(otherlv_20, grammarAccess.getCommunicationActionAccess().getRightParenthesisKeyword_1_1_4_1_3());
    }
)?)
    |(
	otherlv_21=QuestionMark
    {
    	newLeafNode(otherlv_21, grammarAccess.getCommunicationActionAccess().getQuestionMarkKeyword_1_1_5_0());
    }
(
	otherlv_22=LeftParenthesis
    {
    	newLeafNode(otherlv_22, grammarAccess.getCommunicationActionAccess().getLeftParenthesisKeyword_1_1_5_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommunicationActionAccess().getTargetTargetParserRuleCall_1_1_5_1_1_0()); 
	    }
		lv_target_23_0=ruleTarget		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
	        }
       		set(
       			$current, 
       			"target",
        		lv_target_23_0, 
        		"Target");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_24=RightParenthesis
    {
    	newLeafNode(otherlv_24, grammarAccess.getCommunicationActionAccess().getRightParenthesisKeyword_1_1_5_1_2());
    }
)?)
    |(
	otherlv_25=ExclamationMark
    {
    	newLeafNode(otherlv_25, grammarAccess.getCommunicationActionAccess().getExclamationMarkKeyword_1_1_6_0());
    }
(
	otherlv_26=LeftParenthesis
    {
    	newLeafNode(otherlv_26, grammarAccess.getCommunicationActionAccess().getLeftParenthesisKeyword_1_1_6_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommunicationActionAccess().getParametersParameterLabelParserRuleCall_1_1_6_1_1_0()); 
	    }
		lv_parameters_27_0=ruleParameterLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_27_0, 
        		"ParameterLabel");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_28=Comma
    {
    	newLeafNode(otherlv_28, grammarAccess.getCommunicationActionAccess().getCommaKeyword_1_1_6_1_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCommunicationActionAccess().getParametersParameterLabelParserRuleCall_1_1_6_1_2_1_0()); 
	    }
		lv_parameters_29_0=ruleParameterLabel		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCommunicationActionRule());
	        }
       		add(
       			$current, 
       			"parameters",
        		lv_parameters_29_0, 
        		"ParameterLabel");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_30=RightParenthesis
    {
    	newLeafNode(otherlv_30, grammarAccess.getCommunicationActionAccess().getRightParenthesisKeyword_1_1_6_1_3());
    }
)?)))
    |(
	otherlv_31=AsteriskExclamationMarkLessThanSign
    {
    	newLeafNode(otherlv_31, grammarAccess.getCommunicationActionAccess().getAsteriskExclamationMarkLessThanSignKeyword_2_0());
    }

    |
	otherlv_32=AsteriskExclamationMarkGreaterThanSign
    {
    	newLeafNode(otherlv_32, grammarAccess.getCommunicationActionAccess().getAsteriskExclamationMarkGreaterThanSignKeyword_2_1());
    }
))
;





// Entry rule entryRuleQualifiedNamedElement
entryRuleQualifiedNamedElement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getQualifiedNamedElementRule()); }
	 iv_ruleQualifiedNamedElement=ruleQualifiedNamedElement 
	 { $current=$iv_ruleQualifiedNamedElement.current; } 
	 EOF 
;

// Rule QualifiedNamedElement
ruleQualifiedNamedElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNamedElementAccess().getBaNamespaceQualifiedIndentifierParserRuleCall_0_0()); 
	    }
		lv_baNamespace_0_0=ruleQualifiedIndentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNamedElementRule());
	        }
       		set(
       			$current, 
       			"baNamespace",
        		lv_baNamespace_0_0, 
        		"QualifiedIndentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedNamedElementAccess().getBaNameIdentifierParserRuleCall_1_0()); 
	    }
		lv_baName_1_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedNamedElementRule());
	        }
       		set(
       			$current, 
       			"baName",
        		lv_baName_1_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleQualifiedIndentifier
entryRuleQualifiedIndentifier returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getQualifiedIndentifierRule()); }
	 iv_ruleQualifiedIndentifier=ruleQualifiedIndentifier 
	 { $current=$iv_ruleQualifiedIndentifier.current; } 
	 EOF 
;

// Rule QualifiedIndentifier
ruleQualifiedIndentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getQualifiedIndentifierAccess().getIdNameSpaceParserRuleCall_0()); 
	    }
		lv_id_0_0=ruleNameSpace		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getQualifiedIndentifierRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"NameSpace");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleIdentifier
entryRuleIdentifier returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIdentifierRule()); }
	 iv_ruleIdentifier=ruleIdentifier 
	 { $current=$iv_ruleIdentifier.current; } 
	 EOF 
;

// Rule Identifier
ruleIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getIdentifierAccess().getIdQualifiedNameParserRuleCall_0()); 
	    }
		lv_id_0_0=ruleQualifiedName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIdentifierRule());
	        }
       		set(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"QualifiedName");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNameSpace
entryRuleNameSpace returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNameSpaceRule()); } 
	 iv_ruleNameSpace=ruleNameSpace 
	 { $current=$iv_ruleNameSpace.current.getText(); }  
	 EOF 
;

// Rule NameSpace
ruleNameSpace returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getNameSpaceAccess().getIDTerminalRuleCall_0()); 
    }

	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getNameSpaceAccess().getColonColonKeyword_1()); 
    }
)+
    ;





// Entry rule entryRuleQualifiedName
entryRuleQualifiedName returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQualifiedNameRule()); } 
	 iv_ruleQualifiedName=ruleQualifiedName 
	 { $current=$iv_ruleQualifiedName.current.getText(); }  
	 EOF 
;

// Rule QualifiedName
ruleQualifiedName returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQualifiedNameAccess().getFullStopKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQualifiedNameAccess().getIDTerminalRuleCall_1_1()); 
    }
)*)
    ;





// Entry rule entryRuleReference
entryRuleReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReferenceRule()); }
	 iv_ruleReference=ruleReference 
	 { $current=$iv_ruleReference.current; } 
	 EOF 
;

// Rule Reference
ruleReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceAccess().getIdsArrayIdentifierParserRuleCall_0_0()); 
	    }
		lv_ids_0_0=ruleArrayIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceRule());
	        }
       		add(
       			$current, 
       			"ids",
        		lv_ids_0_0, 
        		"ArrayIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=FullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceAccess().getIdsArrayIdentifierParserRuleCall_1_1_0()); 
	    }
		lv_ids_2_0=ruleArrayIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceRule());
	        }
       		add(
       			$current, 
       			"ids",
        		lv_ids_2_0, 
        		"ArrayIdentifier");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleArrayIdentifier
entryRuleArrayIdentifier returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrayIdentifierRule()); }
	 iv_ruleArrayIdentifier=ruleArrayIdentifier 
	 { $current=$iv_ruleArrayIdentifier.current; } 
	 EOF 
;

// Rule ArrayIdentifier
ruleArrayIdentifier returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_id_0_0=RULE_ID
		{
			newLeafNode(lv_id_0_0, grammarAccess.getArrayIdentifierAccess().getIdIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getArrayIdentifierRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"id",
        		lv_id_0_0, 
        		"ID");
	    }

)
)(
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayIdentifierAccess().getLeftSquareBracketKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayIdentifierAccess().getArrayIndexesIntegerValueParserRuleCall_1_1_0()); 
	    }
		lv_arrayIndexes_2_0=ruleIntegerValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayIdentifierRule());
	        }
       		add(
       			$current, 
       			"arrayIndexes",
        		lv_arrayIndexes_2_0, 
        		"IntegerValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightSquareBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayIdentifierAccess().getRightSquareBracketKeyword_1_2());
    }
)*)
;





// Entry rule entryRuleParameterLabel
entryRuleParameterLabel returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getParameterLabelRule()); }
	 iv_ruleParameterLabel=ruleParameterLabel 
	 { $current=$iv_ruleParameterLabel.current; } 
	 EOF 
;

// Rule ParameterLabel
ruleParameterLabel returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getParameterLabelAccess().getValueExpressionParserRuleCall()); 
    }
    this_ValueExpression_0=ruleValueExpression
    {
        $current = $this_ValueExpression_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleTimedAction
entryRuleTimedAction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTimedActionRule()); }
	 iv_ruleTimedAction=ruleTimedAction 
	 { $current=$iv_ruleTimedAction.current; } 
	 EOF 
;

// Rule TimedAction
ruleTimedAction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Computation
    {
    	newLeafNode(otherlv_0, grammarAccess.getTimedActionAccess().getComputationKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getTimedActionAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTimedActionAccess().getLowerTimeBehaviorTimeParserRuleCall_2_0()); 
	    }
		lv_lowerTime_2_0=ruleBehaviorTime		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimedActionRule());
	        }
       		set(
       			$current, 
       			"lowerTime",
        		lv_lowerTime_2_0, 
        		"BehaviorTime");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=FullStopFullStop
    {
    	newLeafNode(otherlv_3, grammarAccess.getTimedActionAccess().getFullStopFullStopKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getTimedActionAccess().getUpperTimeBehaviorTimeParserRuleCall_3_1_0()); 
	    }
		lv_upperTime_4_0=ruleBehaviorTime		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTimedActionRule());
	        }
       		set(
       			$current, 
       			"upperTime",
        		lv_upperTime_4_0, 
        		"BehaviorTime");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getTimedActionAccess().getRightParenthesisKeyword_4());
    }
(
	otherlv_6=In
    {
    	newLeafNode(otherlv_6, grammarAccess.getTimedActionAccess().getInKeyword_5_0());
    }

	otherlv_7=Binding
    {
    	newLeafNode(otherlv_7, grammarAccess.getTimedActionAccess().getBindingKeyword_5_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimedActionRule());
	        }
        }
	otherlv_8=RULE_ID
	{
		newLeafNode(otherlv_8, grammarAccess.getTimedActionAccess().getProcessorClassifierProcessorClassifierCrossReference_5_2_0()); 
	}

)
)(
	otherlv_9=Comma
    {
    	newLeafNode(otherlv_9, grammarAccess.getTimedActionAccess().getCommaKeyword_5_3_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getTimedActionRule());
	        }
        }
	otherlv_10=RULE_ID
	{
		newLeafNode(otherlv_10, grammarAccess.getTimedActionAccess().getProcessorClassifierProcessorClassifierCrossReference_5_3_1_0()); 
	}

)
))*)?)
;





// Entry rule entryRuleIfStatement
entryRuleIfStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIfStatementRule()); }
	 iv_ruleIfStatement=ruleIfStatement 
	 { $current=$iv_ruleIfStatement.current; } 
	 EOF 
;

// Rule IfStatement
ruleIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=If
    {
    	newLeafNode(otherlv_0, grammarAccess.getIfStatementAccess().getIfKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getLogicalValueExpressionValueExpressionParserRuleCall_2_0()); 
	    }
		lv_logicalValueExpression_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"logicalValueExpression",
        		lv_logicalValueExpression_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getBehaviorActionsBehaviorActionsParserRuleCall_4_0()); 
	    }
		lv_behaviorActions_4_0=ruleBehaviorActions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"behaviorActions",
        		lv_behaviorActions_4_0, 
        		"BehaviorActions");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementElseStatementParserRuleCall_5_0_0()); 
	    }
		lv_elseStatement_5_0=ruleElseStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_5_0, 
        		"ElseStatement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getIfStatementAccess().getElseStatementElseIfStatementParserRuleCall_5_1_0()); 
	    }
		lv_elseStatement_6_0=ruleElseIfStatement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIfStatementRule());
	        }
       		set(
       			$current, 
       			"elseStatement",
        		lv_elseStatement_6_0, 
        		"ElseIfStatement");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_7=Endif
    {
    	newLeafNode(otherlv_7, grammarAccess.getIfStatementAccess().getEndifKeyword_6());
    }
)
;





// Entry rule entryRuleElseIfStatement
entryRuleElseIfStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getElseIfStatementRule()); }
	 iv_ruleElseIfStatement=ruleElseIfStatement 
	 { $current=$iv_ruleElseIfStatement.current; } 
	 EOF 
;

// Rule ElseIfStatement
ruleElseIfStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_elif_0_0=
	Elsif
    {
        newLeafNode(lv_elif_0_0, grammarAccess.getElseIfStatementAccess().getElifElsifKeyword_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getElseIfStatementRule());
	        }
       		setWithLastConsumed($current, "elif", true, "elsif");
	    }

)
)
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getElseIfStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseIfStatementAccess().getLogicalValueExpressionValueExpressionParserRuleCall_2_0()); 
	    }
		lv_logicalValueExpression_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseIfStatementRule());
	        }
       		set(
       			$current, 
       			"logicalValueExpression",
        		lv_logicalValueExpression_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getElseIfStatementAccess().getRightParenthesisKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseIfStatementAccess().getBehaviorActionsBehaviorActionsParserRuleCall_4_0()); 
	    }
		lv_behaviorActions_4_0=ruleBehaviorActions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseIfStatementRule());
	        }
       		set(
       			$current, 
       			"behaviorActions",
        		lv_behaviorActions_4_0, 
        		"BehaviorActions");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleElseStatement
entryRuleElseStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getElseStatementRule()); }
	 iv_ruleElseStatement=ruleElseStatement 
	 { $current=$iv_ruleElseStatement.current; } 
	 EOF 
;

// Rule ElseStatement
ruleElseStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Else
    {
    	newLeafNode(otherlv_0, grammarAccess.getElseStatementAccess().getElseKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getElseStatementAccess().getBehaviorActionsBehaviorActionsParserRuleCall_1_0()); 
	    }
		lv_behaviorActions_1_0=ruleBehaviorActions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getElseStatementRule());
	        }
       		set(
       			$current, 
       			"behaviorActions",
        		lv_behaviorActions_1_0, 
        		"BehaviorActions");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleForOrForAllStatement
entryRuleForOrForAllStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getForOrForAllStatementRule()); }
	 iv_ruleForOrForAllStatement=ruleForOrForAllStatement 
	 { $current=$iv_ruleForOrForAllStatement.current; } 
	 EOF 
;

// Rule ForOrForAllStatement
ruleForOrForAllStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=For
    {
    	newLeafNode(otherlv_0, grammarAccess.getForOrForAllStatementAccess().getForKeyword_0_0());
    }

    |(
(
		lv_forAll_1_0=
	Forall
    {
        newLeafNode(lv_forAll_1_0, grammarAccess.getForOrForAllStatementAccess().getForAllForallKeyword_0_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getForOrForAllStatementRule());
	        }
       		setWithLastConsumed($current, "forAll", true, "forall");
	    }

)
))
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getForOrForAllStatementAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForOrForAllStatementAccess().getIterativeVariableIterativeVariableParserRuleCall_2_0()); 
	    }
		lv_iterativeVariable_3_0=ruleIterativeVariable		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForOrForAllStatementRule());
	        }
       		set(
       			$current, 
       			"iterativeVariable",
        		lv_iterativeVariable_3_0, 
        		"IterativeVariable");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_4=In
    {
    	newLeafNode(otherlv_4, grammarAccess.getForOrForAllStatementAccess().getInKeyword_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForOrForAllStatementAccess().getIteratedValuesElementValuesParserRuleCall_4_0()); 
	    }
		lv_iteratedValues_5_0=ruleElementValues		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForOrForAllStatementRule());
	        }
       		set(
       			$current, 
       			"iteratedValues",
        		lv_iteratedValues_5_0, 
        		"ElementValues");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=RightParenthesis
    {
    	newLeafNode(otherlv_6, grammarAccess.getForOrForAllStatementAccess().getRightParenthesisKeyword_5());
    }

	otherlv_7=LeftCurlyBracket
    {
    	newLeafNode(otherlv_7, grammarAccess.getForOrForAllStatementAccess().getLeftCurlyBracketKeyword_6());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getForOrForAllStatementAccess().getBehaviorActionsBehaviorActionsParserRuleCall_7_0()); 
	    }
		lv_behaviorActions_8_0=ruleBehaviorActions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getForOrForAllStatementRule());
	        }
       		set(
       			$current, 
       			"behaviorActions",
        		lv_behaviorActions_8_0, 
        		"BehaviorActions");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_9=RightCurlyBracket
    {
    	newLeafNode(otherlv_9, grammarAccess.getForOrForAllStatementAccess().getRightCurlyBracketKeyword_8());
    }
)
;





// Entry rule entryRuleIterativeVariable
entryRuleIterativeVariable returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIterativeVariableRule()); }
	 iv_ruleIterativeVariable=ruleIterativeVariable 
	 { $current=$iv_ruleIterativeVariable.current; } 
	 EOF 
;

// Rule IterativeVariable
ruleIterativeVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		lv_name_0_0=RULE_ID
		{
			newLeafNode(lv_name_0_0, grammarAccess.getIterativeVariableAccess().getNameIDTerminalRuleCall_0_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getIterativeVariableRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"name",
        		lv_name_0_0, 
        		"ID");
	    }

)
)
	otherlv_1=Colon
    {
    	newLeafNode(otherlv_1, grammarAccess.getIterativeVariableAccess().getColonKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIterativeVariableRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getIterativeVariableAccess().getDataClassifierDataClassifierCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleElementValues
entryRuleElementValues returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getElementValuesRule()); }
	 iv_ruleElementValues=ruleElementValues 
	 { $current=$iv_ruleElementValues.current; } 
	 EOF 
;

// Rule ElementValues
ruleElementValues returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getElementValuesAccess().getIntegerRangeParserRuleCall_0()); 
    }
    this_IntegerRange_0=ruleIntegerRange
    {
        $current = $this_IntegerRange_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getElementValuesAccess().getReferenceParserRuleCall_1()); 
    }
    this_Reference_1=ruleReference
    {
        $current = $this_Reference_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleWhileOrDoUntilStatement
entryRuleWhileOrDoUntilStatement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getWhileOrDoUntilStatementRule()); }
	 iv_ruleWhileOrDoUntilStatement=ruleWhileOrDoUntilStatement 
	 { $current=$iv_ruleWhileOrDoUntilStatement.current; } 
	 EOF 
;

// Rule WhileOrDoUntilStatement
ruleWhileOrDoUntilStatement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	otherlv_0=While
    {
    	newLeafNode(otherlv_0, grammarAccess.getWhileOrDoUntilStatementAccess().getWhileKeyword_0_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getWhileOrDoUntilStatementAccess().getLeftParenthesisKeyword_0_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileOrDoUntilStatementAccess().getLogicalValueExpressionValueExpressionParserRuleCall_0_2_0()); 
	    }
		lv_logicalValueExpression_2_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileOrDoUntilStatementRule());
	        }
       		set(
       			$current, 
       			"logicalValueExpression",
        		lv_logicalValueExpression_2_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getWhileOrDoUntilStatementAccess().getRightParenthesisKeyword_0_3());
    }

	otherlv_4=LeftCurlyBracket
    {
    	newLeafNode(otherlv_4, grammarAccess.getWhileOrDoUntilStatementAccess().getLeftCurlyBracketKeyword_0_4());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileOrDoUntilStatementAccess().getBehaviorActionsBehaviorActionsParserRuleCall_0_5_0()); 
	    }
		lv_behaviorActions_5_0=ruleBehaviorActions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileOrDoUntilStatementRule());
	        }
       		set(
       			$current, 
       			"behaviorActions",
        		lv_behaviorActions_5_0, 
        		"BehaviorActions");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_6=RightCurlyBracket
    {
    	newLeafNode(otherlv_6, grammarAccess.getWhileOrDoUntilStatementAccess().getRightCurlyBracketKeyword_0_6());
    }
)
    |((
(
		lv_doUntil_7_0=
	Do
    {
        newLeafNode(lv_doUntil_7_0, grammarAccess.getWhileOrDoUntilStatementAccess().getDoUntilDoKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getWhileOrDoUntilStatementRule());
	        }
       		setWithLastConsumed($current, "doUntil", true, "do");
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileOrDoUntilStatementAccess().getBehaviorActionsBehaviorActionsParserRuleCall_1_1_0()); 
	    }
		lv_behaviorActions_8_0=ruleBehaviorActions		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileOrDoUntilStatementRule());
	        }
       		set(
       			$current, 
       			"behaviorActions",
        		lv_behaviorActions_8_0, 
        		"BehaviorActions");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_9=Until
    {
    	newLeafNode(otherlv_9, grammarAccess.getWhileOrDoUntilStatementAccess().getUntilKeyword_1_2());
    }

	otherlv_10=LeftParenthesis
    {
    	newLeafNode(otherlv_10, grammarAccess.getWhileOrDoUntilStatementAccess().getLeftParenthesisKeyword_1_3());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getWhileOrDoUntilStatementAccess().getLogicalValueExpressionValueExpressionParserRuleCall_1_4_0()); 
	    }
		lv_logicalValueExpression_11_0=ruleValueExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getWhileOrDoUntilStatementRule());
	        }
       		set(
       			$current, 
       			"logicalValueExpression",
        		lv_logicalValueExpression_11_0, 
        		"ValueExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_12=RightParenthesis
    {
    	newLeafNode(otherlv_12, grammarAccess.getWhileOrDoUntilStatementAccess().getRightParenthesisKeyword_1_5());
    }
))
;





// Entry rule entryRuleValueExpression
entryRuleValueExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getValueExpressionRule()); }
	 iv_ruleValueExpression=ruleValueExpression 
	 { $current=$iv_ruleValueExpression.current; } 
	 EOF 
;

// Rule ValueExpression
ruleValueExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getValueExpressionAccess().getRelationsRelationParserRuleCall_0_0()); 
	    }
		lv_relations_0_0=ruleRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueExpressionRule());
	        }
       		add(
       			$current, 
       			"relations",
        		lv_relations_0_0, 
        		"Relation");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getValueExpressionAccess().getLogicalOperatorsLogicalOperatorEnumRuleCall_1_0_0()); 
	    }
		lv_logicalOperators_1_0=ruleLogicalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueExpressionRule());
	        }
       		add(
       			$current, 
       			"logicalOperators",
        		lv_logicalOperators_1_0, 
        		"LogicalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getValueExpressionAccess().getRelationsRelationParserRuleCall_1_1_0()); 
	    }
		lv_relations_2_0=ruleRelation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getValueExpressionRule());
	        }
       		add(
       			$current, 
       			"relations",
        		lv_relations_2_0, 
        		"Relation");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleRelation
entryRuleRelation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRelationRule()); }
	 iv_ruleRelation=ruleRelation 
	 { $current=$iv_ruleRelation.current; } 
	 EOF 
;

// Rule Relation
ruleRelation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getFirstExpressionSimpleExpressionParserRuleCall_0_0()); 
	    }
		lv_firstExpression_0_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"firstExpression",
        		lv_firstExpression_0_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getRelationalOperatorRelationalOperatorEnumRuleCall_1_0_0()); 
	    }
		lv_relationalOperator_1_0=ruleRelationalOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"relationalOperator",
        		lv_relationalOperator_1_0, 
        		"RelationalOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getRelationAccess().getSecondExpressionSimpleExpressionParserRuleCall_1_1_0()); 
	    }
		lv_secondExpression_2_0=ruleSimpleExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRelationRule());
	        }
       		set(
       			$current, 
       			"secondExpression",
        		lv_secondExpression_2_0, 
        		"SimpleExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleSimpleExpression
entryRuleSimpleExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSimpleExpressionRule()); }
	 iv_ruleSimpleExpression=ruleSimpleExpression 
	 { $current=$iv_ruleSimpleExpression.current; } 
	 EOF 
;

// Rule SimpleExpression
ruleSimpleExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getUnaryAddingOperatorUnaryAddingOperatorEnumRuleCall_0_0()); 
	    }
		lv_unaryAddingOperator_0_0=ruleUnaryAddingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		set(
       			$current, 
       			"unaryAddingOperator",
        		lv_unaryAddingOperator_0_0, 
        		"UnaryAddingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)?(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getTermsTermParserRuleCall_1_0()); 
	    }
		lv_terms_1_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_1_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getBinaryAddingOperatorsBinaryAddingOperatorEnumRuleCall_2_0_0()); 
	    }
		lv_binaryAddingOperators_2_0=ruleBinaryAddingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		add(
       			$current, 
       			"binaryAddingOperators",
        		lv_binaryAddingOperators_2_0, 
        		"BinaryAddingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSimpleExpressionAccess().getTermsTermParserRuleCall_2_1_0()); 
	    }
		lv_terms_3_0=ruleTerm		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSimpleExpressionRule());
	        }
       		add(
       			$current, 
       			"terms",
        		lv_terms_3_0, 
        		"Term");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleTerm
entryRuleTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getTermRule()); }
	 iv_ruleTerm=ruleTerm 
	 { $current=$iv_ruleTerm.current; } 
	 EOF 
;

// Rule Term
ruleTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getFactorsFactorParserRuleCall_0_0()); 
	    }
		lv_factors_0_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"factors",
        		lv_factors_0_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getMultiplyingOperatorsMultiplyingOperatorEnumRuleCall_1_0_0()); 
	    }
		lv_multiplyingOperators_1_0=ruleMultiplyingOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"multiplyingOperators",
        		lv_multiplyingOperators_1_0, 
        		"MultiplyingOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getTermAccess().getFactorsFactorParserRuleCall_1_1_0()); 
	    }
		lv_factors_2_0=ruleFactor		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getTermRule());
	        }
       		add(
       			$current, 
       			"factors",
        		lv_factors_2_0, 
        		"Factor");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleFactor
entryRuleFactor returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFactorRule()); }
	 iv_ruleFactor=ruleFactor 
	 { $current=$iv_ruleFactor.current; } 
	 EOF 
;

// Rule Factor
ruleFactor returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getFirstValueValueParserRuleCall_0_0_0()); 
	    }
		lv_firstValue_0_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"firstValue",
        		lv_firstValue_0_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)((
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getBinaryNumericOperatorBinaryNumericOperatorEnumRuleCall_0_1_0_0()); 
	    }
		lv_binaryNumericOperator_1_0=ruleBinaryNumericOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"binaryNumericOperator",
        		lv_binaryNumericOperator_1_0, 
        		"BinaryNumericOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getSecondValueValueParserRuleCall_0_1_1_0()); 
	    }
		lv_secondValue_2_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"secondValue",
        		lv_secondValue_2_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getUnaryNumericOperatorUnaryNumericOperatorEnumRuleCall_1_0_0()); 
	    }
		lv_unaryNumericOperator_3_0=ruleUnaryNumericOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"unaryNumericOperator",
        		lv_unaryNumericOperator_3_0, 
        		"UnaryNumericOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getFirstValueValueParserRuleCall_1_1_0()); 
	    }
		lv_firstValue_4_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"firstValue",
        		lv_firstValue_4_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
))
    |((
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getUnaryBooleanOperatorUnaryBooleanOperatorEnumRuleCall_2_0_0()); 
	    }
		lv_unaryBooleanOperator_5_0=ruleUnaryBooleanOperator		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"unaryBooleanOperator",
        		lv_unaryBooleanOperator_5_0, 
        		"UnaryBooleanOperator");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getFactorAccess().getFirstValueValueParserRuleCall_2_1_0()); 
	    }
		lv_firstValue_6_0=ruleValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFactorRule());
	        }
       		set(
       			$current, 
       			"firstValue",
        		lv_firstValue_6_0, 
        		"Value");
	        afterParserOrEnumRuleCall();
	    }

)
)))
;





// Entry rule entryRuleValue
entryRuleValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getValueRule()); }
	 iv_ruleValue=ruleValue 
	 { $current=$iv_ruleValue.current; } 
	 EOF 
;

// Rule Value
ruleValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueAccess().getValueConstantParserRuleCall_0()); 
    }
    this_ValueConstant_0=ruleValueConstant
    {
        $current = $this_ValueConstant_0.current;
        afterParserOrEnumRuleCall();
    }

    |((ruleValueVariable)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueAccess().getValueVariableParserRuleCall_1()); 
    }
    this_ValueVariable_1=ruleValueVariable
    {
        $current = $this_ValueVariable_1.current;
        afterParserOrEnumRuleCall();
    }
)
    |(((
LeftParenthesis
)=>
	otherlv_2=LeftParenthesis
    {
    	newLeafNode(otherlv_2, grammarAccess.getValueAccess().getLeftParenthesisKeyword_2_0());
    }
)
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueAccess().getValueExpressionParserRuleCall_2_1()); 
    }
    this_ValueExpression_3=ruleValueExpression
    {
        $current = $this_ValueExpression_3.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_4=RightParenthesis
    {
    	newLeafNode(otherlv_4, grammarAccess.getValueAccess().getRightParenthesisKeyword_2_2());
    }
))
;





// Entry rule entryRuleValueVariable
entryRuleValueVariable returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getValueVariableRule()); }
	 iv_ruleValueVariable=ruleValueVariable 
	 { $current=$iv_ruleValueVariable.current; } 
	 EOF 
;

// Rule ValueVariable
ruleValueVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueVariableAccess().getPortDequeueValueParserRuleCall_0()); 
    }
    this_PortDequeueValue_0=rulePortDequeueValue
    {
        $current = $this_PortDequeueValue_0.current;
        afterParserOrEnumRuleCall();
    }

    |((rulePortCountValue)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueVariableAccess().getPortCountValueParserRuleCall_1()); 
    }
    this_PortCountValue_1=rulePortCountValue
    {
        $current = $this_PortCountValue_1.current;
        afterParserOrEnumRuleCall();
    }
)
    |((rulePortFreshValue)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueVariableAccess().getPortFreshValueParserRuleCall_2()); 
    }
    this_PortFreshValue_2=rulePortFreshValue
    {
        $current = $this_PortFreshValue_2.current;
        afterParserOrEnumRuleCall();
    }
)
    |((ruleValueVariableReference)=>
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueVariableAccess().getValueVariableReferenceParserRuleCall_3()); 
    }
    this_ValueVariableReference_3=ruleValueVariableReference
    {
        $current = $this_ValueVariableReference_3.current;
        afterParserOrEnumRuleCall();
    }
))
;





// Entry rule entryRuleValueVariableReference
entryRuleValueVariableReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getValueVariableReferenceRule()); }
	 iv_ruleValueVariableReference=ruleValueVariableReference 
	 { $current=$iv_ruleValueVariableReference.current; } 
	 EOF 
;

// Rule ValueVariableReference
ruleValueVariableReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueVariableReferenceAccess().getReferenceParserRuleCall()); 
    }
    this_Reference_0=ruleReference
    {
        $current = $this_Reference_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRulePortDequeueValue
entryRulePortDequeueValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPortDequeueValueRule()); }
	 iv_rulePortDequeueValue=rulePortDequeueValue 
	 { $current=$iv_rulePortDequeueValue.current; } 
	 EOF 
;

// Rule PortDequeueValue
rulePortDequeueValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPortDequeueValueAccess().getReferenceParserRuleCall_0()); 
    }
    this_Reference_0=ruleReference
    {
        $current = $this_Reference_0.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_1=QuestionMark
    {
    	newLeafNode(otherlv_1, grammarAccess.getPortDequeueValueAccess().getQuestionMarkKeyword_1());
    }
)
;





// Entry rule entryRulePortCountValue
entryRulePortCountValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPortCountValueRule()); }
	 iv_rulePortCountValue=rulePortCountValue 
	 { $current=$iv_rulePortCountValue.current; } 
	 EOF 
;

// Rule PortCountValue
rulePortCountValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPortCountValueAccess().getReferenceParserRuleCall_0()); 
    }
    this_Reference_0=ruleReference
    {
        $current = $this_Reference_0.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_1=Count
    {
    	newLeafNode(otherlv_1, grammarAccess.getPortCountValueAccess().getCountKeyword_1());
    }
)
;





// Entry rule entryRulePortFreshValue
entryRulePortFreshValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPortFreshValueRule()); }
	 iv_rulePortFreshValue=rulePortFreshValue 
	 { $current=$iv_rulePortFreshValue.current; } 
	 EOF 
;

// Rule PortFreshValue
rulePortFreshValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPortFreshValueAccess().getReferenceParserRuleCall_0()); 
    }
    this_Reference_0=ruleReference
    {
        $current = $this_Reference_0.current;
        afterParserOrEnumRuleCall();
    }

	otherlv_1=Fresh
    {
    	newLeafNode(otherlv_1, grammarAccess.getPortFreshValueAccess().getFreshKeyword_1());
    }
)
;





// Entry rule entryRuleValueConstant
entryRuleValueConstant returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getValueConstantRule()); }
	 iv_ruleValueConstant=ruleValueConstant 
	 { $current=$iv_ruleValueConstant.current; } 
	 EOF 
;

// Rule ValueConstant
ruleValueConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueConstantAccess().getBehaviorNumericLiteralParserRuleCall_0()); 
    }
    this_BehaviorNumericLiteral_0=ruleBehaviorNumericLiteral
    {
        $current = $this_BehaviorNumericLiteral_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueConstantAccess().getPropertyReferenceParserRuleCall_1()); 
    }
    this_PropertyReference_1=rulePropertyReference
    {
        $current = $this_PropertyReference_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueConstantAccess().getBehaviorBooleanLiteralParserRuleCall_2()); 
    }
    this_BehaviorBooleanLiteral_2=ruleBehaviorBooleanLiteral
    {
        $current = $this_BehaviorBooleanLiteral_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getValueConstantAccess().getBehaviorStringLiteralParserRuleCall_3()); 
    }
    this_BehaviorStringLiteral_3=ruleBehaviorStringLiteral
    {
        $current = $this_BehaviorStringLiteral_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleBehaviorStringLiteral
entryRuleBehaviorStringLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorStringLiteralRule()); }
	 iv_ruleBehaviorStringLiteral=ruleBehaviorStringLiteral 
	 { $current=$iv_ruleBehaviorStringLiteral.current; } 
	 EOF 
;

// Rule BehaviorStringLiteral
ruleBehaviorStringLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorStringLiteralAccess().getValueNoQuoteStringParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleNoQuoteString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorStringLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NoQuoteString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBehaviorNumericLiteral
entryRuleBehaviorNumericLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorNumericLiteralRule()); }
	 iv_ruleBehaviorNumericLiteral=ruleBehaviorNumericLiteral 
	 { $current=$iv_ruleBehaviorNumericLiteral.current; } 
	 EOF 
;

// Rule BehaviorNumericLiteral
ruleBehaviorNumericLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBehaviorNumericLiteralAccess().getBehaviorIntegerLiteralAction_0(),
            $current);
    }
)(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorNumericLiteralAccess().getValueSignedIntParserRuleCall_1_0()); 
	    }
		lv_value_1_0=ruleSignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorNumericLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_1_0, 
        		"SignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBehaviorBooleanLiteral
entryRuleBehaviorBooleanLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorBooleanLiteralRule()); }
	 iv_ruleBehaviorBooleanLiteral=ruleBehaviorBooleanLiteral 
	 { $current=$iv_ruleBehaviorBooleanLiteral.current; } 
	 EOF 
;

// Rule BehaviorBooleanLiteral
ruleBehaviorBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBehaviorBooleanLiteralAccess().getBehaviorBooleanLiteralAction_0(),
            $current);
    }
)((
(
		lv_value_1_0=
	True
    {
        newLeafNode(lv_value_1_0, grammarAccess.getBehaviorBooleanLiteralAccess().getValueTrueKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "value", true, "true");
	    }

)
)
    |
	otherlv_2=False
    {
    	newLeafNode(otherlv_2, grammarAccess.getBehaviorBooleanLiteralAccess().getFalseKeyword_1_1());
    }
))
;





// Entry rule entryRulePropertyReference
entryRulePropertyReference returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyReferenceRule()); }
	 iv_rulePropertyReference=rulePropertyReference 
	 { $current=$iv_rulePropertyReference.current; } 
	 EOF 
;

// Rule PropertyReference
rulePropertyReference returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((((
(
		lv_propertySet_0_0=
	NumberSign
    {
        newLeafNode(lv_propertySet_0_0, grammarAccess.getPropertyReferenceAccess().getPropertySetNumberSignKeyword_0_0_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getPropertyReferenceRule());
	        }
       		setWithLastConsumed($current, "propertySet", true, "#");
	    }

)
)(this_ID_1=RULE_ID
    { 
    newLeafNode(this_ID_1, grammarAccess.getPropertyReferenceAccess().getIDTerminalRuleCall_0_0_1()); 
    }
)?)
    |(((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyReferenceAccess().getQualifiedNameQualifiedNamedElementParserRuleCall_0_1_0_0_0()); 
	    }
		lv_qualifiedName_2_0=ruleQualifiedNamedElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyReferenceRule());
	        }
       		set(
       			$current, 
       			"qualifiedName",
        		lv_qualifiedName_2_0, 
        		"QualifiedNamedElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyReferenceAccess().getReferenceReferenceParserRuleCall_0_1_0_1_0()); 
	    }
		lv_reference_3_0=ruleReference		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyReferenceRule());
	        }
       		set(
       			$current, 
       			"reference",
        		lv_reference_3_0, 
        		"Reference");
	        afterParserOrEnumRuleCall();
	    }

)
))
	otherlv_4=NumberSign
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyReferenceAccess().getNumberSignKeyword_0_1_1());
    }
))(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyReferenceAccess().getPropertyNamesPropertyNameParserRuleCall_1_0()); 
	    }
		lv_propertyNames_5_0=rulePropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyReferenceRule());
	        }
       		add(
       			$current, 
       			"propertyNames",
        		lv_propertyNames_5_0, 
        		"PropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_6=FullStop
    {
    	newLeafNode(otherlv_6, grammarAccess.getPropertyReferenceAccess().getFullStopKeyword_2_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyReferenceAccess().getPropertyNamesPropertyNameParserRuleCall_2_1_0()); 
	    }
		lv_propertyNames_7_0=rulePropertyName		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyReferenceRule());
	        }
       		add(
       			$current, 
       			"propertyNames",
        		lv_propertyNames_7_0, 
        		"PropertyName");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRulePropertyName
entryRulePropertyName returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyNameRule()); }
	 iv_rulePropertyName=rulePropertyName 
	 { $current=$iv_rulePropertyName.current; } 
	 EOF 
;

// Rule PropertyName
rulePropertyName returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyNameAccess().getPropertyNameIdentifierParserRuleCall_0_0()); 
	    }
		lv_propertyName_0_0=ruleIdentifier		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyNameRule());
	        }
       		set(
       			$current, 
       			"propertyName",
        		lv_propertyName_0_0, 
        		"Identifier");
	        afterParserOrEnumRuleCall();
	    }

)
)((
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getPropertyNameAccess().getLeftSquareBracketKeyword_1_0_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyNameAccess().getIndexesIntegerValueParserRuleCall_1_0_1_0()); 
	    }
		lv_indexes_2_0=ruleIntegerValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyNameRule());
	        }
       		add(
       			$current, 
       			"indexes",
        		lv_indexes_2_0, 
        		"IntegerValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightSquareBracket
    {
    	newLeafNode(otherlv_3, grammarAccess.getPropertyNameAccess().getRightSquareBracketKeyword_1_0_2());
    }
)+
    |(
	otherlv_4=FullStop
    {
    	newLeafNode(otherlv_4, grammarAccess.getPropertyNameAccess().getFullStopKeyword_1_1_0());
    }
(
	otherlv_5=Upper_bound
    {
    	newLeafNode(otherlv_5, grammarAccess.getPropertyNameAccess().getUpper_boundKeyword_1_1_1_0());
    }

    |
	otherlv_6=Lower_bound
    {
    	newLeafNode(otherlv_6, grammarAccess.getPropertyNameAccess().getLower_boundKeyword_1_1_1_1());
    }
)))?)
;





// Entry rule entryRuleIntegerRange
entryRuleIntegerRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerRangeRule()); }
	 iv_ruleIntegerRange=ruleIntegerRange 
	 { $current=$iv_ruleIntegerRange.current; } 
	 EOF 
;

// Rule IntegerRange
ruleIntegerRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getLowerIntegerValueIntegerValueParserRuleCall_0_0()); 
	    }
		lv_lowerIntegerValue_0_0=ruleIntegerValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"lowerIntegerValue",
        		lv_lowerIntegerValue_0_0, 
        		"IntegerValue");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=FullStopFullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getIntegerRangeAccess().getFullStopFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerRangeAccess().getUpperIntegerValueIntegerValueParserRuleCall_2_0()); 
	    }
		lv_upperIntegerValue_2_0=ruleIntegerValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerRangeRule());
	        }
       		set(
       			$current, 
       			"upperIntegerValue",
        		lv_upperIntegerValue_2_0, 
        		"IntegerValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntegerValue
entryRuleIntegerValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerValueRule()); }
	 iv_ruleIntegerValue=ruleIntegerValue 
	 { $current=$iv_ruleIntegerValue.current; } 
	 EOF 
;

// Rule IntegerValue
ruleIntegerValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIntegerValueAccess().getIntegerValueConstantParserRuleCall_0()); 
    }
    this_IntegerValueConstant_0=ruleIntegerValueConstant
    {
        $current = $this_IntegerValueConstant_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIntegerValueAccess().getIntegerValueVariableParserRuleCall_1()); 
    }
    this_IntegerValueVariable_1=ruleIntegerValueVariable
    {
        $current = $this_IntegerValueVariable_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntegerValueConstant
entryRuleIntegerValueConstant returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerValueConstantRule()); }
	 iv_ruleIntegerValueConstant=ruleIntegerValueConstant 
	 { $current=$iv_ruleIntegerValueConstant.current; } 
	 EOF 
;

// Rule IntegerValueConstant
ruleIntegerValueConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIntegerValueConstantAccess().getBehaviorIntegerLiteralParserRuleCall_0()); 
    }
    this_BehaviorIntegerLiteral_0=ruleBehaviorIntegerLiteral
    {
        $current = $this_BehaviorIntegerLiteral_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIntegerValueConstantAccess().getPropertyReferenceParserRuleCall_1()); 
    }
    this_PropertyReference_1=rulePropertyReference
    {
        $current = $this_PropertyReference_1.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleIntegerValueVariable
entryRuleIntegerValueVariable returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerValueVariableRule()); }
	 iv_ruleIntegerValueVariable=ruleIntegerValueVariable 
	 { $current=$iv_ruleIntegerValueVariable.current; } 
	 EOF 
;

// Rule IntegerValueVariable
ruleIntegerValueVariable returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getIntegerValueVariableAccess().getValueVariableReferenceParserRuleCall()); 
    }
    this_ValueVariableReference_0=ruleValueVariableReference
    {
        $current = $this_ValueVariableReference_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleBehaviorIntegerLiteral
entryRuleBehaviorIntegerLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorIntegerLiteralRule()); }
	 iv_ruleBehaviorIntegerLiteral=ruleBehaviorIntegerLiteral 
	 { $current=$iv_ruleBehaviorIntegerLiteral.current; } 
	 EOF 
;

// Rule BehaviorIntegerLiteral
ruleBehaviorIntegerLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorIntegerLiteralAccess().getValueSignedIntParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleSignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorIntegerLiteralRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBehaviorTime
entryRuleBehaviorTime returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorTimeRule()); }
	 iv_ruleBehaviorTime=ruleBehaviorTime 
	 { $current=$iv_ruleBehaviorTime.current; } 
	 EOF 
;

// Rule BehaviorTime
ruleBehaviorTime returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getBehaviorTimeAccess().getIntegerValueIntegerValueParserRuleCall_0_0()); 
	    }
		lv_integerValue_0_0=ruleIntegerValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getBehaviorTimeRule());
	        }
       		set(
       			$current, 
       			"integerValue",
        		lv_integerValue_0_0, 
        		"IntegerValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getBehaviorTimeRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getBehaviorTimeAccess().getUnitUnitLiteralCrossReference_1_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleBehaviorCondition
entryRuleBehaviorCondition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBehaviorConditionRule()); }
	 iv_ruleBehaviorCondition=ruleBehaviorCondition 
	 { $current=$iv_ruleBehaviorCondition.current; } 
	 EOF 
;

// Rule BehaviorCondition
ruleBehaviorCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBehaviorConditionAccess().getDispatchConditionParserRuleCall_0()); 
    }
    this_DispatchCondition_0=ruleDispatchCondition
    {
        $current = $this_DispatchCondition_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBehaviorConditionAccess().getExecuteConditionParserRuleCall_1()); 
    }
    this_ExecuteCondition_1=ruleExecuteCondition
    {
        $current = $this_ExecuteCondition_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBehaviorConditionAccess().getExternalConditionParserRuleCall_2()); 
    }
ruleExternalCondition
    {
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getBehaviorConditionAccess().getInternalConditionParserRuleCall_3()); 
    }
ruleInternalCondition
    {
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleExternalCondition
entryRuleExternalCondition returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getExternalConditionRule()); } 
	 iv_ruleExternalCondition=ruleExternalCondition 
	 { $current=$iv_ruleExternalCondition.current.getText(); }  
	 EOF 
;

// Rule ExternalCondition
ruleExternalCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=TBD_ExternalCondition 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getExternalConditionAccess().getTBD_ExternalConditionKeyword()); 
    }

    ;





// Entry rule entryRuleInternalCondition
entryRuleInternalCondition returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getInternalConditionRule()); } 
	 iv_ruleInternalCondition=ruleInternalCondition 
	 { $current=$iv_ruleInternalCondition.current.getText(); }  
	 EOF 
;

// Rule InternalCondition
ruleInternalCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=TBD_InternalCondition 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getInternalConditionAccess().getTBD_InternalConditionKeyword()); 
    }

    ;





// Entry rule entryRuleExecuteCondition
entryRuleExecuteCondition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getExecuteConditionRule()); }
	 iv_ruleExecuteCondition=ruleExecuteCondition 
	 { $current=$iv_ruleExecuteCondition.current; } 
	 EOF 
;

// Rule ExecuteCondition
ruleExecuteCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExecuteConditionAccess().getValueExpressionParserRuleCall_0()); 
    }
    this_ValueExpression_0=ruleValueExpression
    {
        $current = $this_ValueExpression_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExecuteConditionAccess().getTimeoutExecuteConditionParserRuleCall_1()); 
    }
ruleTimeoutExecuteCondition
    {
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getExecuteConditionAccess().getOthewiseConditionParserRuleCall_2()); 
    }
    this_OthewiseCondition_2=ruleOthewiseCondition
    {
        $current = $this_OthewiseCondition_2.current;
        afterParserOrEnumRuleCall();
    }
)?
;





// Entry rule entryRuleTimeoutExecuteCondition
entryRuleTimeoutExecuteCondition returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getTimeoutExecuteConditionRule()); } 
	 iv_ruleTimeoutExecuteCondition=ruleTimeoutExecuteCondition 
	 { $current=$iv_ruleTimeoutExecuteCondition.current.getText(); }  
	 EOF 
;

// Rule TimeoutExecuteCondition
ruleTimeoutExecuteCondition returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=TBD_TimeoutExecuteCondition 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getTimeoutExecuteConditionAccess().getTBD_TimeoutExecuteConditionKeyword()); 
    }

    ;





// Entry rule entryRuleOthewiseCondition
entryRuleOthewiseCondition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOthewiseConditionRule()); }
	 iv_ruleOthewiseCondition=ruleOthewiseCondition 
	 { $current=$iv_ruleOthewiseCondition.current; } 
	 EOF 
;

// Rule OthewiseCondition
ruleOthewiseCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Otherwise
    {
    	newLeafNode(otherlv_0, grammarAccess.getOthewiseConditionAccess().getOtherwiseKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getOthewiseConditionAccess().getOtherwiseAction_1(),
            $current);
    }
))
;





// Entry rule entryRuleDispatchCondition
entryRuleDispatchCondition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDispatchConditionRule()); }
	 iv_ruleDispatchCondition=ruleDispatchCondition 
	 { $current=$iv_ruleDispatchCondition.current; } 
	 EOF 
;

// Rule DispatchCondition
ruleDispatchCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDispatchConditionAccess().getDispatchConditionAction_0(),
            $current);
    }
)
	otherlv_1=On
    {
    	newLeafNode(otherlv_1, grammarAccess.getDispatchConditionAccess().getOnKeyword_1());
    }

	otherlv_2=Dispatch
    {
    	newLeafNode(otherlv_2, grammarAccess.getDispatchConditionAccess().getDispatchKeyword_2());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchConditionAccess().getDispatchTriggerConditionDispatchTriggerConditionParserRuleCall_3_0_0()); 
	    }
		lv_dispatchTriggerCondition_3_0=ruleDispatchTriggerCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchConditionRule());
	        }
       		set(
       			$current, 
       			"dispatchTriggerCondition",
        		lv_dispatchTriggerCondition_3_0, 
        		"DispatchTriggerCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchConditionAccess().getDispatchTriggerConditionStopDispatchTriggerConditionParserRuleCall_3_1_0()); 
	    }
		lv_dispatchTriggerCondition_4_0=ruleStopDispatchTriggerCondition		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchConditionRule());
	        }
       		set(
       			$current, 
       			"dispatchTriggerCondition",
        		lv_dispatchTriggerCondition_4_0, 
        		"StopDispatchTriggerCondition");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchConditionAccess().getDispatchTriggerConditionCompletionRelativeTimeoutCatchParserRuleCall_3_2_0()); 
	    }
		lv_dispatchTriggerCondition_5_0=ruleCompletionRelativeTimeoutCatch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchConditionRule());
	        }
       		set(
       			$current, 
       			"dispatchTriggerCondition",
        		lv_dispatchTriggerCondition_5_0, 
        		"CompletionRelativeTimeoutCatch");
	        afterParserOrEnumRuleCall();
	    }

)
)
    |(
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchConditionAccess().getDispatchTriggerConditionDispatchRelativeTimeoutCatchParserRuleCall_3_3_0()); 
	    }
		lv_dispatchTriggerCondition_6_0=ruleDispatchRelativeTimeoutCatch		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchConditionRule());
	        }
       		set(
       			$current, 
       			"dispatchTriggerCondition",
        		lv_dispatchTriggerCondition_6_0, 
        		"DispatchRelativeTimeoutCatch");
	        afterParserOrEnumRuleCall();
	    }

)
))?(
	otherlv_7=Frozen
    {
    	newLeafNode(otherlv_7, grammarAccess.getDispatchConditionAccess().getFrozenKeyword_4_0());
    }

	otherlv_8=LeftParenthesis
    {
    	newLeafNode(otherlv_8, grammarAccess.getDispatchConditionAccess().getLeftParenthesisKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchConditionAccess().getFrozenPortsFrozenPortsParserRuleCall_4_2_0()); 
	    }
		lv_frozenPorts_9_0=ruleFrozenPorts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchConditionRule());
	        }
       		add(
       			$current, 
       			"frozenPorts",
        		lv_frozenPorts_9_0, 
        		"FrozenPorts");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_10=Comma
    {
    	newLeafNode(otherlv_10, grammarAccess.getDispatchConditionAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchConditionAccess().getFrozenPortsFrozenPortsParserRuleCall_4_3_1_0()); 
	    }
		lv_frozenPorts_11_0=ruleFrozenPorts		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchConditionRule());
	        }
       		add(
       			$current, 
       			"frozenPorts",
        		lv_frozenPorts_11_0, 
        		"FrozenPorts");
	        afterParserOrEnumRuleCall();
	    }

)
))*
	otherlv_12=RightParenthesis
    {
    	newLeafNode(otherlv_12, grammarAccess.getDispatchConditionAccess().getRightParenthesisKeyword_4_4());
    }
)?)
;





// Entry rule entryRuleDispatchRelativeTimeoutCatch
entryRuleDispatchRelativeTimeoutCatch returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDispatchRelativeTimeoutCatchRule()); }
	 iv_ruleDispatchRelativeTimeoutCatch=ruleDispatchRelativeTimeoutCatch 
	 { $current=$iv_ruleDispatchRelativeTimeoutCatch.current; } 
	 EOF 
;

// Rule DispatchRelativeTimeoutCatch
ruleDispatchRelativeTimeoutCatch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Timeout
    {
    	newLeafNode(otherlv_0, grammarAccess.getDispatchRelativeTimeoutCatchAccess().getTimeoutKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getDispatchRelativeTimeoutCatchAccess().getDispatchRelativeTimeoutAction_1(),
            $current);
    }
))
;







// Entry rule entryRuleCompletionRelativeTimeoutCatch
entryRuleCompletionRelativeTimeoutCatch returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getCompletionRelativeTimeoutCatchRule()); }
	 iv_ruleCompletionRelativeTimeoutCatch=ruleCompletionRelativeTimeoutCatch 
	 { $current=$iv_ruleCompletionRelativeTimeoutCatch.current; } 
	 EOF 
;

// Rule CompletionRelativeTimeoutCatch
ruleCompletionRelativeTimeoutCatch returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Timeout
    {
    	newLeafNode(otherlv_0, grammarAccess.getCompletionRelativeTimeoutCatchAccess().getTimeoutKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getCompletionRelativeTimeoutCatchAccess().getIntegerValueIntegerValueParserRuleCall_1_0()); 
	    }
		lv_integerValue_1_0=ruleIntegerValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getCompletionRelativeTimeoutCatchRule());
	        }
       		set(
       			$current, 
       			"integerValue",
        		lv_integerValue_1_0, 
        		"IntegerValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getCompletionRelativeTimeoutCatchRule());
	        }
        }
	otherlv_2=RULE_ID
	{
		newLeafNode(otherlv_2, grammarAccess.getCompletionRelativeTimeoutCatchAccess().getUnitUnitLiteralCrossReference_2_0()); 
	}

)
))
;





// Entry rule entryRuleFrozenPorts
entryRuleFrozenPorts returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFrozenPortsRule()); }
	 iv_ruleFrozenPorts=ruleFrozenPorts 
	 { $current=$iv_ruleFrozenPorts.current; } 
	 EOF 
;

// Rule FrozenPorts
ruleFrozenPorts returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFrozenPortsRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFrozenPortsAccess().getElementPortCrossReference_0()); 
	}

)
)
;





// Entry rule entryRuleDispatchTriggerLogicalExpression
entryRuleDispatchTriggerLogicalExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDispatchTriggerLogicalExpressionRule()); }
	 iv_ruleDispatchTriggerLogicalExpression=ruleDispatchTriggerLogicalExpression 
	 { $current=$iv_ruleDispatchTriggerLogicalExpression.current; } 
	 EOF 
;

// Rule DispatchTriggerLogicalExpression
ruleDispatchTriggerLogicalExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchTriggerLogicalExpressionAccess().getDispatchConjunctionsDispatchConjunctionParserRuleCall_0_0()); 
	    }
		lv_dispatchConjunctions_0_0=ruleDispatchConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchTriggerLogicalExpressionRule());
	        }
       		add(
       			$current, 
       			"dispatchConjunctions",
        		lv_dispatchConjunctions_0_0, 
        		"DispatchConjunction");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=Or
    {
    	newLeafNode(otherlv_1, grammarAccess.getDispatchTriggerLogicalExpressionAccess().getOrKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchTriggerLogicalExpressionAccess().getDispatchConjunctionsDispatchConjunctionParserRuleCall_1_1_0()); 
	    }
		lv_dispatchConjunctions_2_0=ruleDispatchConjunction		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchTriggerLogicalExpressionRule());
	        }
       		add(
       			$current, 
       			"dispatchConjunctions",
        		lv_dispatchConjunctions_2_0, 
        		"DispatchConjunction");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDispatchConjunction
entryRuleDispatchConjunction returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDispatchConjunctionRule()); }
	 iv_ruleDispatchConjunction=ruleDispatchConjunction 
	 { $current=$iv_ruleDispatchConjunction.current; } 
	 EOF 
;

// Rule DispatchConjunction
ruleDispatchConjunction returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchConjunctionAccess().getDispatchTriggersDispatchTriggerParserRuleCall_0_0()); 
	    }
		lv_dispatchTriggers_0_0=ruleDispatchTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchConjunctionRule());
	        }
       		add(
       			$current, 
       			"dispatchTriggers",
        		lv_dispatchTriggers_0_0, 
        		"DispatchTrigger");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=And
    {
    	newLeafNode(otherlv_1, grammarAccess.getDispatchConjunctionAccess().getAndKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getDispatchConjunctionAccess().getDispatchTriggersDispatchTriggerParserRuleCall_1_1_0()); 
	    }
		lv_dispatchTriggers_2_0=ruleDispatchTrigger		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getDispatchConjunctionRule());
	        }
       		add(
       			$current, 
       			"dispatchTriggers",
        		lv_dispatchTriggers_2_0, 
        		"DispatchTrigger");
	        afterParserOrEnumRuleCall();
	    }

)
))*)
;





// Entry rule entryRuleDispatchTriggerCondition
entryRuleDispatchTriggerCondition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDispatchTriggerConditionRule()); }
	 iv_ruleDispatchTriggerCondition=ruleDispatchTriggerCondition 
	 { $current=$iv_ruleDispatchTriggerCondition.current; } 
	 EOF 
;

// Rule DispatchTriggerCondition
ruleDispatchTriggerCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDispatchTriggerConditionAccess().getDispatchTriggerLogicalExpressionParserRuleCall()); 
    }
    this_DispatchTriggerLogicalExpression_0=ruleDispatchTriggerLogicalExpression
    {
        $current = $this_DispatchTriggerLogicalExpression_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleDispatchTrigger
entryRuleDispatchTrigger returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getDispatchTriggerRule()); }
	 iv_ruleDispatchTrigger=ruleDispatchTrigger 
	 { $current=$iv_ruleDispatchTrigger.current; } 
	 EOF 
;

// Rule DispatchTrigger
ruleDispatchTrigger returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:

	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getDispatchTriggerAccess().getReferenceParserRuleCall()); 
    }
    this_Reference_0=ruleReference
    {
        $current = $this_Reference_0.current;
        afterParserOrEnumRuleCall();
    }

;





// Entry rule entryRuleStopDispatchTriggerCondition
entryRuleStopDispatchTriggerCondition returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStopDispatchTriggerConditionRule()); }
	 iv_ruleStopDispatchTriggerCondition=ruleStopDispatchTriggerCondition 
	 { $current=$iv_ruleStopDispatchTriggerCondition.current; } 
	 EOF 
;

// Rule StopDispatchTriggerCondition
ruleStopDispatchTriggerCondition returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Stop
    {
    	newLeafNode(otherlv_0, grammarAccess.getStopDispatchTriggerConditionAccess().getStopKeyword_0());
    }
(
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getStopDispatchTriggerConditionAccess().getDispatchTriggerConditionStopAction_1(),
            $current);
    }
))
;







// Entry rule entryRuleContainedPropertyAssociation
entryRuleContainedPropertyAssociation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainedPropertyAssociationRule()); }
	 iv_ruleContainedPropertyAssociation=ruleContainedPropertyAssociation 
	 { $current=$iv_ruleContainedPropertyAssociation.current; } 
	 EOF 
;

// Rule ContainedPropertyAssociation
ruleContainedPropertyAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getPropertyPropertyCrossReference_0_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getContainedPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1_0());
    }

    |(
(
		lv_append_2_0=
	PlusSignEqualsSignGreaterThanSign
    {
        newLeafNode(lv_append_2_0, grammarAccess.getContainedPropertyAssociationAccess().getAppendPlusSignEqualsSignGreaterThanSignKeyword_1_1_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		setWithLastConsumed($current, "append", true, "+=>");
	    }

)
))(
(
		lv_constant_3_0=
	Constant
    {
        newLeafNode(lv_constant_3_0, grammarAccess.getContainedPropertyAssociationAccess().getConstantConstantKeyword_2_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		setWithLastConsumed($current, "constant", true, "constant");
	    }

)
)?((
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_0_0()); 
	    }
		lv_ownedValue_4_0=ruleOptionalModalPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_4_0, 
        		"OptionalModalPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_3_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getOwnedValueOptionalModalPropertyValueParserRuleCall_3_1_1_0()); 
	    }
		lv_ownedValue_6_0=ruleOptionalModalPropertyValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_6_0, 
        		"OptionalModalPropertyValue");
	        afterParserOrEnumRuleCall();
	    }

)
))*)(
	otherlv_7=Applies
    {
    	newLeafNode(otherlv_7, grammarAccess.getContainedPropertyAssociationAccess().getAppliesKeyword_4_0());
    }

	otherlv_8=To
    {
    	newLeafNode(otherlv_8, grammarAccess.getContainedPropertyAssociationAccess().getToKeyword_4_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_2_0()); 
	    }
		lv_appliesTo_9_0=ruleContainmentPath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"appliesTo",
        		lv_appliesTo_9_0, 
        		"ContainmentPath");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_10=Comma
    {
    	newLeafNode(otherlv_10, grammarAccess.getContainedPropertyAssociationAccess().getCommaKeyword_4_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getAppliesToContainmentPathParserRuleCall_4_3_1_0()); 
	    }
		lv_appliesTo_11_0=ruleContainmentPath		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainedPropertyAssociationRule());
	        }
       		add(
       			$current, 
       			"appliesTo",
        		lv_appliesTo_11_0, 
        		"ContainmentPath");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?(
	otherlv_12=In
    {
    	newLeafNode(otherlv_12, grammarAccess.getContainedPropertyAssociationAccess().getInKeyword_5_0());
    }

	otherlv_13=Binding
    {
    	newLeafNode(otherlv_13, grammarAccess.getContainedPropertyAssociationAccess().getBindingKeyword_5_1());
    }

	otherlv_14=LeftParenthesis
    {
    	newLeafNode(otherlv_14, grammarAccess.getContainedPropertyAssociationAccess().getLeftParenthesisKeyword_5_2());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainedPropertyAssociationRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getContainedPropertyAssociationAccess().getInBindingClassifierCrossReference_5_3_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_16=RightParenthesis
    {
    	newLeafNode(otherlv_16, grammarAccess.getContainedPropertyAssociationAccess().getRightParenthesisKeyword_5_4());
    }
)?
	otherlv_17=Semicolon
    {
    	newLeafNode(otherlv_17, grammarAccess.getContainedPropertyAssociationAccess().getSemicolonKeyword_6());
    }
)
;









// Entry rule entryRuleContainmentPath
entryRuleContainmentPath returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainmentPathRule()); }
	 iv_ruleContainmentPath=ruleContainmentPath 
	 { $current=$iv_ruleContainmentPath.current; } 
	 EOF 
;

// Rule ContainmentPath
ruleContainmentPath returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathAccess().getPathContainmentPathElementParserRuleCall_0()); 
	    }
		lv_path_0_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_0_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
;







// Entry rule entryRuleOptionalModalPropertyValue
entryRuleOptionalModalPropertyValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getOptionalModalPropertyValueRule()); }
	 iv_ruleOptionalModalPropertyValue=ruleOptionalModalPropertyValue 
	 { $current=$iv_ruleOptionalModalPropertyValue.current; } 
	 EOF 
;

// Rule OptionalModalPropertyValue
ruleOptionalModalPropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getOptionalModalPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0_0()); 
	    }
		lv_ownedValue_0_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getOptionalModalPropertyValueRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_0_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_1=In
    {
    	newLeafNode(otherlv_1, grammarAccess.getOptionalModalPropertyValueAccess().getInKeyword_1_0());
    }

	otherlv_2=Modes
    {
    	newLeafNode(otherlv_2, grammarAccess.getOptionalModalPropertyValueAccess().getModesKeyword_1_1());
    }

	otherlv_3=LeftParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getOptionalModalPropertyValueAccess().getLeftParenthesisKeyword_1_2());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalModalPropertyValueRule());
	        }
        }
	otherlv_4=RULE_ID
	{
		newLeafNode(otherlv_4, grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_3_0()); 
	}

)
)(
	otherlv_5=Comma
    {
    	newLeafNode(otherlv_5, grammarAccess.getOptionalModalPropertyValueAccess().getCommaKeyword_1_4_0());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getOptionalModalPropertyValueRule());
	        }
        }
	otherlv_6=RULE_ID
	{
		newLeafNode(otherlv_6, grammarAccess.getOptionalModalPropertyValueAccess().getInModeModeCrossReference_1_4_1_0()); 
	}

)
))*
	otherlv_7=RightParenthesis
    {
    	newLeafNode(otherlv_7, grammarAccess.getOptionalModalPropertyValueAccess().getRightParenthesisKeyword_1_5());
    }
)?)
;





// Entry rule entryRulePropertyValue
entryRulePropertyValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyValueRule()); }
	 iv_rulePropertyValue=rulePropertyValue 
	 { $current=$iv_rulePropertyValue.current; } 
	 EOF 
;

// Rule PropertyValue
rulePropertyValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getPropertyValueAccess().getOwnedValuePropertyExpressionParserRuleCall_0()); 
	    }
		lv_ownedValue_0_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getPropertyValueRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_0_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRulePropertyExpression
entryRulePropertyExpression returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getPropertyExpressionRule()); }
	 iv_rulePropertyExpression=rulePropertyExpression 
	 { $current=$iv_rulePropertyExpression.current; } 
	 EOF 
;

// Rule PropertyExpression
rulePropertyExpression returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getRecordTermParserRuleCall_0()); 
    }
    this_RecordTerm_0=ruleRecordTerm
    {
        $current = $this_RecordTerm_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getReferenceTermParserRuleCall_1()); 
    }
    this_ReferenceTerm_1=ruleReferenceTerm
    {
        $current = $this_ReferenceTerm_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getComponentClassifierTermParserRuleCall_2()); 
    }
    this_ComponentClassifierTerm_2=ruleComponentClassifierTerm
    {
        $current = $this_ComponentClassifierTerm_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getComputedTermParserRuleCall_3()); 
    }
    this_ComputedTerm_3=ruleComputedTerm
    {
        $current = $this_ComputedTerm_3.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getStringTermParserRuleCall_4()); 
    }
    this_StringTerm_4=ruleStringTerm
    {
        $current = $this_StringTerm_4.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getNumericRangeTermParserRuleCall_5()); 
    }
    this_NumericRangeTerm_5=ruleNumericRangeTerm
    {
        $current = $this_NumericRangeTerm_5.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getRealTermParserRuleCall_6()); 
    }
    this_RealTerm_6=ruleRealTerm
    {
        $current = $this_RealTerm_6.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getIntegerTermParserRuleCall_7()); 
    }
    this_IntegerTerm_7=ruleIntegerTerm
    {
        $current = $this_IntegerTerm_7.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getListTermParserRuleCall_8()); 
    }
    this_ListTerm_8=ruleListTerm
    {
        $current = $this_ListTerm_8.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getBooleanLiteralParserRuleCall_9()); 
    }
    this_BooleanLiteral_9=ruleBooleanLiteral
    {
        $current = $this_BooleanLiteral_9.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getPropertyExpressionAccess().getLiteralorReferenceTermParserRuleCall_10()); 
    }
    this_LiteralorReferenceTerm_10=ruleLiteralorReferenceTerm
    {
        $current = $this_LiteralorReferenceTerm_10.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleLiteralorReferenceTerm
entryRuleLiteralorReferenceTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getLiteralorReferenceTermRule()); }
	 iv_ruleLiteralorReferenceTerm=ruleLiteralorReferenceTerm 
	 { $current=$iv_ruleLiteralorReferenceTerm.current; } 
	 EOF 
;

// Rule LiteralorReferenceTerm
ruleLiteralorReferenceTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getLiteralorReferenceTermRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getLiteralorReferenceTermAccess().getNamedValueAbstractNamedValueCrossReference_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleBooleanLiteral
entryRuleBooleanLiteral returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getBooleanLiteralRule()); }
	 iv_ruleBooleanLiteral=ruleBooleanLiteral 
	 { $current=$iv_ruleBooleanLiteral.current; } 
	 EOF 
;

// Rule BooleanLiteral
ruleBooleanLiteral returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getBooleanLiteralAccess().getBooleanLiteralAction_0(),
            $current);
    }
)((
(
		lv_value_1_0=
	True
    {
        newLeafNode(lv_value_1_0, grammarAccess.getBooleanLiteralAccess().getValueTrueKeyword_1_0_0());
    }

	    {
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getBooleanLiteralRule());
	        }
       		setWithLastConsumed($current, "value", true, "true");
	    }

)
)
    |
	otherlv_2=False
    {
    	newLeafNode(otherlv_2, grammarAccess.getBooleanLiteralAccess().getFalseKeyword_1_1());
    }
))
;





// Entry rule entryRuleConstantValue
entryRuleConstantValue returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getConstantValueRule()); }
	 iv_ruleConstantValue=ruleConstantValue 
	 { $current=$iv_ruleConstantValue.current; } 
	 EOF 
;

// Rule ConstantValue
ruleConstantValue returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getConstantValueRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getConstantValueAccess().getNamedValuePropertyConstantCrossReference_0()); 
	    }
		ruleQPREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleReferenceTerm
entryRuleReferenceTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getReferenceTermRule()); }
	 iv_ruleReferenceTerm=ruleReferenceTerm 
	 { $current=$iv_ruleReferenceTerm.current; } 
	 EOF 
;

// Rule ReferenceTerm
ruleReferenceTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Reference
    {
    	newLeafNode(otherlv_0, grammarAccess.getReferenceTermAccess().getReferenceKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getReferenceTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getReferenceTermAccess().getPathContainmentPathElementParserRuleCall_2_0()); 
	    }
		lv_path_2_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getReferenceTermRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_2_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getReferenceTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleRecordTerm
entryRuleRecordTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRecordTermRule()); }
	 iv_ruleRecordTerm=ruleRecordTerm 
	 { $current=$iv_ruleRecordTerm.current; } 
	 EOF 
;

// Rule RecordTerm
ruleRecordTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=LeftSquareBracket
    {
    	newLeafNode(otherlv_0, grammarAccess.getRecordTermAccess().getLeftSquareBracketKeyword_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getRecordTermAccess().getOwnedFieldValueFieldPropertyAssociationParserRuleCall_1_0()); 
	    }
		lv_ownedFieldValue_1_0=ruleFieldPropertyAssociation		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRecordTermRule());
	        }
       		add(
       			$current, 
       			"ownedFieldValue",
        		lv_ownedFieldValue_1_0, 
        		"FieldPropertyAssociation");
	        afterParserOrEnumRuleCall();
	    }

)
)+
	otherlv_2=RightSquareBracket
    {
    	newLeafNode(otherlv_2, grammarAccess.getRecordTermAccess().getRightSquareBracketKeyword_2());
    }
)
;







// Entry rule entryRuleComputedTerm
entryRuleComputedTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComputedTermRule()); }
	 iv_ruleComputedTerm=ruleComputedTerm 
	 { $current=$iv_ruleComputedTerm.current; } 
	 EOF 
;

// Rule ComputedTerm
ruleComputedTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Compute
    {
    	newLeafNode(otherlv_0, grammarAccess.getComputedTermAccess().getComputeKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getComputedTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		lv_function_2_0=RULE_ID
		{
			newLeafNode(lv_function_2_0, grammarAccess.getComputedTermAccess().getFunctionIDTerminalRuleCall_2_0()); 
		}
		{
	        if ($current==null) {
	            $current = createModelElement(grammarAccess.getComputedTermRule());
	        }
       		setWithLastConsumed(
       			$current, 
       			"function",
        		lv_function_2_0, 
        		"ID");
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getComputedTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleComponentClassifierTerm
entryRuleComponentClassifierTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getComponentClassifierTermRule()); }
	 iv_ruleComponentClassifierTerm=ruleComponentClassifierTerm 
	 { $current=$iv_ruleComponentClassifierTerm.current; } 
	 EOF 
;

// Rule ComponentClassifierTerm
ruleComponentClassifierTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	otherlv_0=Classifier
    {
    	newLeafNode(otherlv_0, grammarAccess.getComponentClassifierTermAccess().getClassifierKeyword_0());
    }

	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getComponentClassifierTermAccess().getLeftParenthesisKeyword_1());
    }
(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getComponentClassifierTermRule());
	        }
        }
		{ 
	        newCompositeNode(grammarAccess.getComponentClassifierTermAccess().getClassifierComponentClassifierCrossReference_2_0()); 
	    }
		ruleQCREF		{ 
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=RightParenthesis
    {
    	newLeafNode(otherlv_3, grammarAccess.getComponentClassifierTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleListTerm
entryRuleListTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getListTermRule()); }
	 iv_ruleListTerm=ruleListTerm 
	 { $current=$iv_ruleListTerm.current; } 
	 EOF 
;

// Rule ListTerm
ruleListTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getListTermAccess().getListValueAction_0(),
            $current);
    }
)
	otherlv_1=LeftParenthesis
    {
    	newLeafNode(otherlv_1, grammarAccess.getListTermAccess().getLeftParenthesisKeyword_1());
    }
((
(
		{ 
	        newCompositeNode(grammarAccess.getListTermAccess().getOwnedListElementPropertyExpressionParserRuleCall_2_0_0()); 
	    }
		lv_ownedListElement_2_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTermRule());
	        }
       		add(
       			$current, 
       			"ownedListElement",
        		lv_ownedListElement_2_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Comma
    {
    	newLeafNode(otherlv_3, grammarAccess.getListTermAccess().getCommaKeyword_2_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getListTermAccess().getOwnedListElementPropertyExpressionParserRuleCall_2_1_1_0()); 
	    }
		lv_ownedListElement_4_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getListTermRule());
	        }
       		add(
       			$current, 
       			"ownedListElement",
        		lv_ownedListElement_4_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
))*)?
	otherlv_5=RightParenthesis
    {
    	newLeafNode(otherlv_5, grammarAccess.getListTermAccess().getRightParenthesisKeyword_3());
    }
)
;





// Entry rule entryRuleFieldPropertyAssociation
entryRuleFieldPropertyAssociation returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getFieldPropertyAssociationRule()); }
	 iv_ruleFieldPropertyAssociation=ruleFieldPropertyAssociation 
	 { $current=$iv_ruleFieldPropertyAssociation.current; } 
	 EOF 
;

// Rule FieldPropertyAssociation
ruleFieldPropertyAssociation returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getFieldPropertyAssociationRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getFieldPropertyAssociationAccess().getPropertyBasicPropertyCrossReference_0_0()); 
	}

)
)
	otherlv_1=EqualsSignGreaterThanSign
    {
    	newLeafNode(otherlv_1, grammarAccess.getFieldPropertyAssociationAccess().getEqualsSignGreaterThanSignKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getFieldPropertyAssociationAccess().getOwnedValuePropertyExpressionParserRuleCall_2_0()); 
	    }
		lv_ownedValue_2_0=rulePropertyExpression		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getFieldPropertyAssociationRule());
	        }
       		set(
       			$current, 
       			"ownedValue",
        		lv_ownedValue_2_0, 
        		"PropertyExpression");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_3=Semicolon
    {
    	newLeafNode(otherlv_3, grammarAccess.getFieldPropertyAssociationAccess().getSemicolonKeyword_3());
    }
)
;





// Entry rule entryRuleContainmentPathElement
entryRuleContainmentPathElement returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getContainmentPathElementRule()); }
	 iv_ruleContainmentPathElement=ruleContainmentPathElement 
	 { $current=$iv_ruleContainmentPathElement.current; } 
	 EOF 
;

// Rule ContainmentPathElement
ruleContainmentPathElement returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(((
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getContainmentPathElementRule());
	        }
        }
	otherlv_0=RULE_ID
	{
		newLeafNode(otherlv_0, grammarAccess.getContainmentPathElementAccess().getNamedElementNamedElementCrossReference_0_0_0()); 
	}

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathElementAccess().getArrayRangeArrayRangeParserRuleCall_0_1_0()); 
	    }
		lv_arrayRange_1_0=ruleArrayRange		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathElementRule());
	        }
       		add(
       			$current, 
       			"arrayRange",
        		lv_arrayRange_1_0, 
        		"ArrayRange");
	        afterParserOrEnumRuleCall();
	    }

)
)*)(
	otherlv_2=FullStop
    {
    	newLeafNode(otherlv_2, grammarAccess.getContainmentPathElementAccess().getFullStopKeyword_1_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getContainmentPathElementAccess().getPathContainmentPathElementParserRuleCall_1_1_0()); 
	    }
		lv_path_3_0=ruleContainmentPathElement		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getContainmentPathElementRule());
	        }
       		set(
       			$current, 
       			"path",
        		lv_path_3_0, 
        		"ContainmentPathElement");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;







// Entry rule entryRulePlusMinus
entryRulePlusMinus returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getPlusMinusRule()); } 
	 iv_rulePlusMinus=rulePlusMinus 
	 { $current=$iv_rulePlusMinus.current.getText(); }  
	 EOF 
;

// Rule PlusMinus
rulePlusMinus returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getPlusSignKeyword_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getPlusMinusAccess().getHyphenMinusKeyword_1()); 
    }
)
    ;





// Entry rule entryRuleStringTerm
entryRuleStringTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getStringTermRule()); }
	 iv_ruleStringTerm=ruleStringTerm 
	 { $current=$iv_ruleStringTerm.current; } 
	 EOF 
;

// Rule StringTerm
ruleStringTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
(
		{ 
	        newCompositeNode(grammarAccess.getStringTermAccess().getValueNoQuoteStringParserRuleCall_0()); 
	    }
		lv_value_0_0=ruleNoQuoteString		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getStringTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"NoQuoteString");
	        afterParserOrEnumRuleCall();
	    }

)
)
;





// Entry rule entryRuleNoQuoteString
entryRuleNoQuoteString returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getNoQuoteStringRule()); } 
	 iv_ruleNoQuoteString=ruleNoQuoteString 
	 { $current=$iv_ruleNoQuoteString.current.getText(); }  
	 EOF 
;

// Rule NoQuoteString
ruleNoQuoteString returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_STRING_0=RULE_STRING    {
		$current.merge(this_STRING_0);
    }

    { 
    newLeafNode(this_STRING_0, grammarAccess.getNoQuoteStringAccess().getSTRINGTerminalRuleCall()); 
    }

    ;





// Entry rule entryRuleArrayRange
entryRuleArrayRange returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getArrayRangeRule()); }
	 iv_ruleArrayRange=ruleArrayRange 
	 { $current=$iv_ruleArrayRange.current; } 
	 EOF 
;

// Rule ArrayRange
ruleArrayRange returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
	{ 
	  /* */ 
	}
    {
        $current = forceCreateModelElement(
            grammarAccess.getArrayRangeAccess().getArrayRangeAction_0(),
            $current);
    }
)
	otherlv_1=LeftSquareBracket
    {
    	newLeafNode(otherlv_1, grammarAccess.getArrayRangeAccess().getLeftSquareBracketKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayRangeAccess().getLowerBoundINTVALUEParserRuleCall_2_0()); 
	    }
		lv_lowerBound_2_0=ruleINTVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRangeRule());
	        }
       		set(
       			$current, 
       			"lowerBound",
        		lv_lowerBound_2_0, 
        		"INTVALUE");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=FullStopFullStop
    {
    	newLeafNode(otherlv_3, grammarAccess.getArrayRangeAccess().getFullStopFullStopKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getArrayRangeAccess().getUpperBoundINTVALUEParserRuleCall_3_1_0()); 
	    }
		lv_upperBound_4_0=ruleINTVALUE		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getArrayRangeRule());
	        }
       		set(
       			$current, 
       			"upperBound",
        		lv_upperBound_4_0, 
        		"INTVALUE");
	        afterParserOrEnumRuleCall();
	    }

)
))?
	otherlv_5=RightSquareBracket
    {
    	newLeafNode(otherlv_5, grammarAccess.getArrayRangeAccess().getRightSquareBracketKeyword_4());
    }
)
;





// Entry rule entryRuleSignedConstant
entryRuleSignedConstant returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getSignedConstantRule()); }
	 iv_ruleSignedConstant=ruleSignedConstant 
	 { $current=$iv_ruleSignedConstant.current; } 
	 EOF 
;

// Rule SignedConstant
ruleSignedConstant returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOpPlusMinusParserRuleCall_0_0()); 
	    }
		lv_op_0_0=rulePlusMinus		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		set(
       			$current, 
       			"op",
        		lv_op_0_0, 
        		"PlusMinus");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
	        newCompositeNode(grammarAccess.getSignedConstantAccess().getOwnedPropertyExpressionConstantValueParserRuleCall_1_0()); 
	    }
		lv_ownedPropertyExpression_1_0=ruleConstantValue		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getSignedConstantRule());
	        }
       		add(
       			$current, 
       			"ownedPropertyExpression",
        		lv_ownedPropertyExpression_1_0, 
        		"ConstantValue");
	        afterParserOrEnumRuleCall();
	    }

)
))
;





// Entry rule entryRuleIntegerTerm
entryRuleIntegerTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getIntegerTermRule()); }
	 iv_ruleIntegerTerm=ruleIntegerTerm 
	 { $current=$iv_ruleIntegerTerm.current; } 
	 EOF 
;

// Rule IntegerTerm
ruleIntegerTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getIntegerTermAccess().getValueSignedIntParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleSignedInt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getIntegerTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SignedInt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getIntegerTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getIntegerTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleSignedInt
entryRuleSignedInt returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSignedIntRule()); } 
	 iv_ruleSignedInt=ruleSignedInt 
	 { $current=$iv_ruleSignedInt.current.getText(); }  
	 EOF 
;

// Rule SignedInt
ruleSignedInt returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedIntAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedIntAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_INTEGER_LIT_2=RULE_INTEGER_LIT    {
		$current.merge(this_INTEGER_LIT_2);
    }

    { 
    newLeafNode(this_INTEGER_LIT_2, grammarAccess.getSignedIntAccess().getINTEGER_LITTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleRealTerm
entryRuleRealTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getRealTermRule()); }
	 iv_ruleRealTerm=ruleRealTerm 
	 { $current=$iv_ruleRealTerm.current; } 
	 EOF 
;

// Rule RealTerm
ruleRealTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getRealTermAccess().getValueSignedRealParserRuleCall_0_0()); 
	    }
		lv_value_0_0=ruleSignedReal		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getRealTermRule());
	        }
       		set(
       			$current, 
       			"value",
        		lv_value_0_0, 
        		"SignedReal");
	        afterParserOrEnumRuleCall();
	    }

)
)(
(
		{ 
		  /* */ 
		}
		{
			if ($current==null) {
	            $current = createModelElement(grammarAccess.getRealTermRule());
	        }
        }
	otherlv_1=RULE_ID
	{
		newLeafNode(otherlv_1, grammarAccess.getRealTermAccess().getUnitUnitLiteralCrossReference_1_0()); 
	}

)
)?)
;





// Entry rule entryRuleSignedReal
entryRuleSignedReal returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSignedRealRule()); } 
	 iv_ruleSignedReal=ruleSignedReal 
	 { $current=$iv_ruleSignedReal.current.getText(); }  
	 EOF 
;

// Rule SignedReal
ruleSignedReal returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((
	kw=PlusSign 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedRealAccess().getPlusSignKeyword_0_0()); 
    }

    |
	kw=HyphenMinus 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSignedRealAccess().getHyphenMinusKeyword_0_1()); 
    }
)?    this_REAL_LIT_2=RULE_REAL_LIT    {
		$current.merge(this_REAL_LIT_2);
    }

    { 
    newLeafNode(this_REAL_LIT_2, grammarAccess.getSignedRealAccess().getREAL_LITTerminalRuleCall_1()); 
    }
)
    ;





// Entry rule entryRuleNumericRangeTerm
entryRuleNumericRangeTerm returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNumericRangeTermRule()); }
	 iv_ruleNumericRangeTerm=ruleNumericRangeTerm 
	 { $current=$iv_ruleNumericRangeTerm.current; } 
	 EOF 
;

// Rule NumericRangeTerm
ruleNumericRangeTerm returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
((
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getMinimumNumAltParserRuleCall_0_0()); 
	    }
		lv_minimum_0_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"minimum",
        		lv_minimum_0_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
)
	otherlv_1=FullStopFullStop
    {
    	newLeafNode(otherlv_1, grammarAccess.getNumericRangeTermAccess().getFullStopFullStopKeyword_1());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getMaximumNumAltParserRuleCall_2_0()); 
	    }
		lv_maximum_2_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"maximum",
        		lv_maximum_2_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
)(
	otherlv_3=Delta
    {
    	newLeafNode(otherlv_3, grammarAccess.getNumericRangeTermAccess().getDeltaKeyword_3_0());
    }
(
(
		{ 
	        newCompositeNode(grammarAccess.getNumericRangeTermAccess().getDeltaNumAltParserRuleCall_3_1_0()); 
	    }
		lv_delta_4_0=ruleNumAlt		{
	        if ($current==null) {
	            $current = createModelElementForParent(grammarAccess.getNumericRangeTermRule());
	        }
       		set(
       			$current, 
       			"delta",
        		lv_delta_4_0, 
        		"NumAlt");
	        afterParserOrEnumRuleCall();
	    }

)
))?)
;





// Entry rule entryRuleNumAlt
entryRuleNumAlt returns [EObject current=null]
	:
	{ newCompositeNode(grammarAccess.getNumAltRule()); }
	 iv_ruleNumAlt=ruleNumAlt 
	 { $current=$iv_ruleNumAlt.current; } 
	 EOF 
;

// Rule NumAlt
ruleNumAlt returns [EObject current=null] 
    @init { enterRule(); 
    }
    @after { leaveRule(); }:
(
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getRealTermParserRuleCall_0()); 
    }
    this_RealTerm_0=ruleRealTerm
    {
        $current = $this_RealTerm_0.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getIntegerTermParserRuleCall_1()); 
    }
    this_IntegerTerm_1=ruleIntegerTerm
    {
        $current = $this_IntegerTerm_1.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getSignedConstantParserRuleCall_2()); 
    }
    this_SignedConstant_2=ruleSignedConstant
    {
        $current = $this_SignedConstant_2.current;
        afterParserOrEnumRuleCall();
    }

    |
	{ 
	  /* */ 
	}
    { 
        newCompositeNode(grammarAccess.getNumAltAccess().getConstantValueParserRuleCall_3()); 
    }
    this_ConstantValue_3=ruleConstantValue
    {
        $current = $this_ConstantValue_3.current;
        afterParserOrEnumRuleCall();
    }
)
;





// Entry rule entryRuleINTVALUE
entryRuleINTVALUE returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getINTVALUERule()); } 
	 iv_ruleINTVALUE=ruleINTVALUE 
	 { $current=$iv_ruleINTVALUE.current.getText(); }  
	 EOF 
;

// Rule INTVALUE
ruleINTVALUE returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
    this_INTEGER_LIT_0=RULE_INTEGER_LIT    {
		$current.merge(this_INTEGER_LIT_0);
    }

    { 
    newLeafNode(this_INTEGER_LIT_0, grammarAccess.getINTVALUEAccess().getINTEGER_LITTerminalRuleCall()); 
    }

    ;







// Entry rule entryRuleQPREF
entryRuleQPREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQPREFRule()); } 
	 iv_ruleQPREF=ruleQPREF 
	 { $current=$iv_ruleQPREF.current.getText(); }  
	 EOF 
;

// Rule QPREF
ruleQPREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
(    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_0()); 
    }
(
	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQPREFAccess().getColonColonKeyword_1_0()); 
    }
    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQPREFAccess().getIDTerminalRuleCall_1_1()); 
    }
)?)
    ;





// Entry rule entryRuleQCREF
entryRuleQCREF returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getQCREFRule()); } 
	 iv_ruleQCREF=ruleQCREF 
	 { $current=$iv_ruleQCREF.current.getText(); }  
	 EOF 
;

// Rule QCREF
ruleQCREF returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:
((    this_ID_0=RULE_ID    {
		$current.merge(this_ID_0);
    }

    { 
    newLeafNode(this_ID_0, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_0_0()); 
    }

	kw=ColonColon 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getColonColonKeyword_0_1()); 
    }
)*    this_ID_2=RULE_ID    {
		$current.merge(this_ID_2);
    }

    { 
    newLeafNode(this_ID_2, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_1()); 
    }
(
	kw=FullStop 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getQCREFAccess().getFullStopKeyword_2_0()); 
    }
    this_ID_4=RULE_ID    {
		$current.merge(this_ID_4);
    }

    { 
    newLeafNode(this_ID_4, grammarAccess.getQCREFAccess().getIDTerminalRuleCall_2_1()); 
    }
)?)
    ;





// Entry rule entryRuleSTAR
entryRuleSTAR returns [String current=null] 
:
	{ newCompositeNode(grammarAccess.getSTARRule()); } 
	 iv_ruleSTAR=ruleSTAR 
	 { $current=$iv_ruleSTAR.current.getText(); }  
	 EOF 
;

// Rule STAR
ruleSTAR returns [AntlrDatatypeRuleToken current=new AntlrDatatypeRuleToken()] 
    @init { enterRule(); 
    }
    @after { leaveRule();
    }:

	kw=Asterisk 
    {
        $current.merge(kw);
        newLeafNode(kw, grammarAccess.getSTARAccess().getAsteriskKeyword()); 
    }

    ;





// Rule BinaryNumericOperator
ruleBinaryNumericOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(    enumLiteral_0=AsteriskAsterisk
    {
        $current = grammarAccess.getBinaryNumericOperatorAccess().getMultiplyMultiplyEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryNumericOperatorAccess().getMultiplyMultiplyEnumLiteralDeclaration()); 
    }
);



// Rule UnaryNumericOperator
ruleUnaryNumericOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(    enumLiteral_0=Abs
    {
        $current = grammarAccess.getUnaryNumericOperatorAccess().getAbsEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryNumericOperatorAccess().getAbsEnumLiteralDeclaration()); 
    }
);



// Rule UnaryBooleanOperator
ruleUnaryBooleanOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(    enumLiteral_0=Not
    {
        $current = grammarAccess.getUnaryBooleanOperatorAccess().getNotEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryBooleanOperatorAccess().getNotEnumLiteralDeclaration()); 
    }
);



// Rule MultiplyingOperator
ruleMultiplyingOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=Asterisk
    {
        $current = grammarAccess.getMultiplyingOperatorAccess().getMultiplyEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getMultiplyingOperatorAccess().getMultiplyEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Solidus
    {
        $current = grammarAccess.getMultiplyingOperatorAccess().getDivideEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getMultiplyingOperatorAccess().getDivideEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=Mod
    {
        $current = grammarAccess.getMultiplyingOperatorAccess().getModEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getMultiplyingOperatorAccess().getModEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=Rem
    {
        $current = grammarAccess.getMultiplyingOperatorAccess().getRemEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getMultiplyingOperatorAccess().getRemEnumLiteralDeclaration_3()); 
    }
));



// Rule BinaryAddingOperator
ruleBinaryAddingOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=PlusSign
    {
        $current = grammarAccess.getBinaryAddingOperatorAccess().getPlusEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getBinaryAddingOperatorAccess().getPlusEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=HyphenMinus
    {
        $current = grammarAccess.getBinaryAddingOperatorAccess().getMinusEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getBinaryAddingOperatorAccess().getMinusEnumLiteralDeclaration_1()); 
    }
));



// Rule UnaryAddingOperator
ruleUnaryAddingOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
(    enumLiteral_0=HyphenMinus
    {
        $current = grammarAccess.getUnaryAddingOperatorAccess().getMinusEnumLiteralDeclaration().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getUnaryAddingOperatorAccess().getMinusEnumLiteralDeclaration()); 
    }
);



// Rule LogicalOperator
ruleLogicalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=And
    {
        $current = grammarAccess.getLogicalOperatorAccess().getAndEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getLogicalOperatorAccess().getAndEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=Or
    {
        $current = grammarAccess.getLogicalOperatorAccess().getOrEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getLogicalOperatorAccess().getOrEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=Xor
    {
        $current = grammarAccess.getLogicalOperatorAccess().getXorEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getLogicalOperatorAccess().getXorEnumLiteralDeclaration_2()); 
    }
));



// Rule RelationalOperator
ruleRelationalOperator returns [Enumerator current=null] 
    @init { enterRule(); }
    @after { leaveRule(); }:
((    enumLiteral_0=EqualsSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getEqualEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_0, grammarAccess.getRelationalOperatorAccess().getEqualEnumLiteralDeclaration_0()); 
    }
)
    |(    enumLiteral_1=ExclamationMarkEqualsSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getNotEqualEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_1, grammarAccess.getRelationalOperatorAccess().getNotEqualEnumLiteralDeclaration_1()); 
    }
)
    |(    enumLiteral_2=LessThanSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_2().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_2, grammarAccess.getRelationalOperatorAccess().getLessThanEnumLiteralDeclaration_2()); 
    }
)
    |(    enumLiteral_3=LessThanSignEqualsSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getLessOrEqualThanEnumLiteralDeclaration_3().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_3, grammarAccess.getRelationalOperatorAccess().getLessOrEqualThanEnumLiteralDeclaration_3()); 
    }
)
    |(    enumLiteral_4=GreaterThanSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_4().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_4, grammarAccess.getRelationalOperatorAccess().getGreaterThanEnumLiteralDeclaration_4()); 
    }
)
    |(    enumLiteral_5=GreaterThanSignEqualsSign
    {
        $current = grammarAccess.getRelationalOperatorAccess().getGreaterOrEqualThanEnumLiteralDeclaration_5().getEnumLiteral().getInstance();
        newLeafNode(enumLiteral_5, grammarAccess.getRelationalOperatorAccess().getGreaterOrEqualThanEnumLiteralDeclaration_5()); 
    }
));



